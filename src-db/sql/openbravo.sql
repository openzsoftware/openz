/* ..\OpenSourceTrunc\src-db\sql\openbravo.sql */

CREATE OR REPLACE FUNCTION a_amortizationline_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_Processed VARCHAR(60) ; --OBTG:varchar2--
  v_Posted VARCHAR(60) ; --OBTG:varchar2--
  v_AmortizationID VARCHAR(32); --OBTG:varchar2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  -- ReadOnly Check
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    v_AmortizationID := NEW.A_Amortization_ID;
  ELSE
    v_AmortizationID := OLD.A_Amortization_ID;
  END IF;

    begin
      SELECT processed,
             POSTED
      INTO v_Processed,
        v_Posted
      FROM A_Amortization
      WHERE A_Amortization.A_Amortization_ID=v_AmortizationID;
    exception
    when others then
      v_processed:=null;
    end;

  if(TG_OP = 'UPDATE') THEN
    IF coalesce(v_Processed, 'N')='Y'
   and(  COALESCE(old.A_AMORTIZATIONLINE_ID, '0') <> COALESCE(new.A_AMORTIZATIONLINE_ID, '0')
       or COALESCE(old.AD_CLIENT_ID, '0') <> COALESCE(new.AD_CLIENT_ID, '0')
       or COALESCE(old.AD_ORG_ID, '0') <> COALESCE(new.AD_ORG_ID, '0')
       or COALESCE(old.ISACTIVE, '') <> COALESCE(new.ISACTIVE, '')
       or COALESCE(old.A_AMORTIZATION_ID, '0') <> COALESCE(new.A_AMORTIZATION_ID, '0')
       or COALESCE(old.LINE, 0) <> COALESCE(new.LINE, 0)
       or COALESCE(old.A_ASSET_ID, '0') <> COALESCE(new.A_ASSET_ID, '0')
       or COALESCE(old.AMORTIZATION_PERCENTAGE, 0) <> COALESCE(new.AMORTIZATION_PERCENTAGE, 0)
       or COALESCE(old.AMORTIZATIONAMT, 0) <> COALESCE(new.AMORTIZATIONAMT, 0)
       or COALESCE(old.C_CURRENCY_ID, '0') <> COALESCE(new.C_CURRENCY_ID, '0'))
  then
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    end if;
  end if;
  if (TG_OP = 'INSERT' OR TG_OP = 'DELETE') THEN
    IF(coalesce(v_Processed, 'N')='Y'
   or coalesce(v_posted, 'N')='Y')
  then
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    end if;
  end if;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.a_amortizationline_trg() OWNER TO tad;

--
-- Name: a_amortizationline_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION a_amortizationline_trg2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





      
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

 null;
/* mutating table
  update a_asset
  set DepreciatedPlan=(select sum(AmortizationAmt)
  from A_AmortizationLine
  where  A_AmortizationLine_ID=new.A_AmortizationLine_ID)
  where a_Asset_ID=new.A_Asset_ID:
   exception when others then null; */
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.a_amortizationline_trg2() OWNER TO tad;

--
-- Name: a_asset_create(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION a_asset_create(p_pinstance_id character varying, p_inoutline_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: A_Asset_Create.sql,v 1.6 2003/05/26 22:31:16 jjanke Exp $
  ***
  * Title: Create Asset and Delivery
  * Description:
  * Open Issues:
  * - Reversal or Negative Delivery
  * - Guarantee Extension
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; -- 0=failure
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    -- Create from ShipmentLine
    Cur_ShipLine RECORD;
    --
    v_A_Asset_ID VARCHAR(32) ; --OBTG:VARCHAR2--
    v_A_Asset_Delivery_ID VARCHAR(32) ; --OBTG:VARCHAR2--
    v_DocumentNo VARCHAR(40) ; --OBTG:VARCHAR2--
    v_Value VARCHAR(60) ; --OBTG:VARCHAR2--
    v_Name VARCHAR(80) ; --OBTG:VARCHAR2--
    v_count NUMERIC:=0;
  BEGIN
    --  Update AD_PInstance
    IF(p_PInstance_ID IS NOT NULL) THEN
      RAISE NOTICE '%','A_Asset_Create - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_AD_User_ID:=Cur_Parameter.AD_User_ID;
        -- IF (p.ParameterName = 'xx') THEN
        --  p_xx := p.P_String;
        --  DBMS_OUTPUT.PUT_LINE('  xx=' || p_xx);
        -- ELSE
        --  DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || p.ParameterName);
        --  END IF;
      END LOOP; -- Get Parameter
    END IF;
  BEGIN --BODY
    -- DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID || ', InOutLine_ID=' || p_InOutLine_ID);
    -- Create From Shipment Line
    IF(p_InOutLine_ID IS NOT NULL) THEN
      FOR Cur_ShipLine IN
        (SELECT s.AD_Client_ID, s.AD_Org_ID, s.DocumentNo, s.MovementDate, s.C_BPartner_ID, s.C_BPartner_Location_ID, s.AD_User_ID, bp.Value AS BP_Value, bp.Name AS BP_Name, p.Value, p.Name, p.Description, p.Help, p.VersionNo, pc.A_Asset_Group_ID, CASE WHEN p.GuaranteeDays IS NOT NULL THEN s.MovementDate+p.GuaranteeDays ELSE NULL
          END AS GuaranteeDate, sl.M_Product_ID, sl.Description AS LineDescription, sl.MovementQty
        FROM M_InOut s
        INNER JOIN M_InOutLine sl
          ON(s.M_InOut_ID=sl.M_InOut_ID)
        INNER JOIN M_Product p
          ON(sl.M_Product_ID=p.M_Product_ID)
        INNER JOIN M_Product_Category pc
          ON(p.M_Product_Category_ID=pc.M_Product_Category_ID)
        INNER JOIN C_BPartner bp
          ON(s.C_BPartner_ID=bp.C_BPartner_ID)
        WHERE pc.A_Asset_Group_ID IS NOT NULL  AND sl.M_InOutLine_ID=p_InOutLine_ID  AND sl.MovementQty>0
        )
      LOOP
        FOR i IN 1 .. Cur_Shipline.MovementQty
        LOOP
          v_ResultStr:='InsertingAsset';
          SELECT * INTO  v_A_Asset_ID FROM AD_Sequence_Next('A_Asset', Cur_Shipline.AD_Client_ID) ;
          v_DocumentNo:='_' || Cur_Shipline.DocumentNo;
          IF(Cur_Shipline.MovementQty>1) THEN
            v_DocumentNo:=v_DocumentNo || '_' || i;
          END IF;
          v_Value:='_' || Cur_Shipline.Value || v_DocumentNo;
          v_Name:='_' || Cur_Shipline.Name || v_DocumentNo;
          --
          INSERT
          INTO A_Asset
            (
              A_Asset_ID, AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy,
              Value, Name, Description, Help, A_Asset_Group_ID, M_Product_ID, VersionNo,
              GuaranteeDate, AssetServiceDate, IsOwned, IsDepreciated, AssetDepreciationDate, IsInPosession,
              LocationComment, C_BPartner_ID, C_BPartner_Location_ID, AD_User_ID
            )
            VALUES
            (v_A_Asset_ID, Cur_Shipline.AD_Client_ID, Cur_Shipline.AD_Org_ID, 'Y', TO_DATE(NOW()), '0', TO_DATE(NOW()), '0', SUBSTR(Cur_Shipline.BP_Value, 1, 40-LENGTH(v_Value)) || v_Value, SUBSTR(Cur_Shipline.BP_Name, 1,
            60-LENGTH(v_Name)) || v_Name, SUBSTR(Cur_Shipline.Description || ' ' || Cur_Shipline.LineDescription, 1, 255), Cur_Shipline.Help, Cur_Shipline.A_Asset_Group_ID, Cur_Shipline.M_Product_ID,
            Cur_Shipline.VersionNo, Cur_Shipline.GuaranteeDate, Cur_Shipline.MovementDate, 'N', 'N', null, 'N', v_DocumentNo, Cur_Shipline.C_BPartner_ID, Cur_Shipline.C_BPartner_Location_ID, Cur_Shipline.AD_User_ID) ;
            RAISE NOTICE '%','A_Asset_ID=' || v_A_Asset_ID || ' - ' || Cur_Shipline.Value||v_DocumentNo ;
        END LOOP;
        v_count:=v_count + 1;
		v_Message:='@Created@: ' || v_count;
      END LOOP;
    END IF;
    RAISE NOTICE '%','Assets Created=' || v_count ;
    ---- <<FINISH_PROCESS>>
    RAISE NOTICE '%','A_Asset_Create - Finished ' || v_Message ;
    --  Update AD_PInstance
    IF(p_PInstance_ID IS NOT NULL) THEN
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
  RETURN;
END ; $_$;


ALTER FUNCTION public.a_asset_create(p_pinstance_id character varying, p_inoutline_id character varying) OWNER TO tad;

--
-- Name: a_asset_group_acct_copy(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION a_asset_group_acct_copy(pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --
    v_A_Asset_Group_ID VARCHAR(32); --OBTG:VARCHAR2--
    Cur_Acct RECORD;
    --
    v_Updated NUMERIC:=0;
    v_Created NUMERIC:=0;
    v_Updated_Total NUMERIC:=0;
    v_Created_Total NUMERIC:=0;
    rowcount NUMERIC;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      IF(Cur_Parameter.ParameterName='A_Asset_Group_ID') THEN
        v_A_Asset_Group_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  A_Asset_Group_ID=' || v_A_Asset_Group_ID ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    /**
    * For all Accounting Schema of the Category
    */
    FOR Cur_Acct IN
      (SELECT *  FROM A_Asset_Group_Acct  WHERE A_Asset_Group_ID=v_A_Asset_Group_ID)
    LOOP
      -- Update existing Assets
      UPDATE A_Asset_Acct
        SET A_DEPRECIATION_ACCT=Cur_Acct.A_DEPRECIATION_ACCT, A_ACCUMDEPRECIATION_ACCT=Cur_Acct.A_ACCUMDEPRECIATION_ACCT, A_DISPOSAL_LOSS=Cur_Acct.A_DISPOSAL_LOSS, A_DISPOSAL_GAIN=Cur_Acct.A_DISPOSAL_GAIN, updated=TO_DATE(NOW()), UpdatedBy='0'
      WHERE A_Asset_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID  AND exists
        (SELECT 1
        FROM A_Asset a
        WHERE a.A_Asset_ID=A_Asset_Acct.A_Asset_ID  AND a.A_Asset_Group_ID=Cur_Acct.A_Asset_Group_ID
        )
        ;
     GET DIAGNOSTICS  rowcount:=ROW_COUNT;
      v_Updated:=rowcount;
      -- Insert new Assets
      INSERT
      INTO A_Asset_Acct
        (
          A_ASSET_ACCT_ID, A_ASSET_ID, C_ACCTSCHEMA_ID, AD_CLIENT_ID, AD_ORG_ID,
          ISACTIVE, CREATED, CREATEDBY, UPDATED,
          UPDATEDBY, A_DEPRECIATION_ACCT, A_ACCUMDEPRECIATION_ACCT, A_DISPOSAL_LOSS,
          A_DISPOSAL_GAIN
        )
      SELECT GET_UUID(), a.A_ASSET_ID, Cur_Acct.C_ACCTSCHEMA_ID, a.AD_CLIENT_ID, a.AD_ORG_ID, 'Y', TO_DATE(NOW()), '0', TO_DATE(NOW()), '0', Cur_Acct.A_DEPRECIATION_ACCT, Cur_Acct.A_ACCUMDEPRECIATION_ACCT, Cur_Acct.A_DISPOSAL_LOSS, Cur_Acct.A_DISPOSAL_GAIN
      FROM A_Asset a
      WHERE a.A_Asset_Group_ID=Cur_Acct.A_Asset_Group_ID  
      AND NOT EXISTS
		(SELECT 1
		FROM a_Asset_Acct aa
		WHERE aa.A_Asset_ID=a.A_Asset_Id  AND aa.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
		)
      AND EXISTS
	      (
	      SELECT 1 
	      FROM AD_Org_AcctSchema
	      WHERE (AD_IsOrgIncluded(AD_Org_ID, a.AD_ORG_ID, a.AD_Client_ID)<>-1 OR AD_IsOrgIncluded(a.AD_ORG_ID, AD_Org_ID, a.AD_Client_ID)<>-1)
	      AND IsActive = 'Y'
	      AND AD_Org_AcctSchema.C_AcctSchema_ID = Cur_Acct.C_AcctSchema_ID
	      )
        ;
     GET DIAGNOSTICS  rowcount:=ROW_COUNT;
      v_Created:=rowcount;
      RAISE NOTICE '%','Asset = ' || v_Updated || ' / ' || v_Created ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
    END LOOP;
    v_Message:='@Created@=' || v_Created_Total || ', @Updated@=' || v_Updated_Total;
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $$;


ALTER FUNCTION public.a_asset_group_acct_copy(pinstance_id character varying) OWNER TO tad;

--
-- Name: a_asset_group_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION a_asset_group_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
    --TYPE RECORD IS REFCURSOR;
  Cur_Defaults RECORD;

BEGIN

    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  FOR Cur_Defaults IN
    (
    SELECT *
    FROM C_AcctSchema_Default d
    WHERE EXISTS
      (
      SELECT 1
      FROM AD_Org_AcctSchema
      WHERE (AD_IsOrgIncluded(AD_Org_ID, new.AD_ORG_ID, new.AD_Client_ID)<>-1 OR AD_IsOrgIncluded(new.AD_ORG_ID, AD_Org_ID, new.AD_Client_ID)<>-1)
      AND IsActive = 'Y'
      AND AD_Org_AcctSchema.C_AcctSchema_ID = d.C_AcctSchema_ID
      )
      AND d.AD_CLIENT_ID = new.AD_Client_ID
    )
  LOOP
    INSERT
    INTO A_Asset_Group_Acct
      (
        A_Asset_Group_Acct_ID, A_ASSET_GROUP_ID, C_ACCTSCHEMA_ID, AD_CLIENT_ID,
        AD_ORG_ID, ISACTIVE, CREATED,
        CREATEDBY, UPDATED, UPDATEDBY,
        A_DEPRECIATION_ACCT, A_ACCUMDEPRECIATION_ACCT, A_DISPOSAL_LOSS,
        A_DISPOSAL_GAIN
      )
      VALUES
      (
        get_uuid(), new.A_Asset_Group_ID, Cur_Defaults.C_AcctSchema_ID, new.AD_Client_ID,
        new.AD_Org_ID,  'Y', TO_DATE(NOW()),
        new.CreatedBy, TO_DATE(NOW()), new.UpdatedBy,
        Cur_Defaults.A_DEPRECIATION_ACCT, Cur_Defaults.A_ACCUMDEPRECIATION_ACCT, Cur_Defaults.A_DISPOSAL_LOSS,
        Cur_Defaults.A_DISPOSAL_GAIN
      )
      ;
  END LOOP;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.a_asset_group_trg() OWNER TO tad;

--
-- Name: a_asset_group_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION a_asset_group_trg2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2006 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
        
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  DELETE FROM A_Asset_Group_Acct  WHERE A_Asset_Group_ID=old.A_Asset_Group_ID;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.a_asset_group_trg2() OWNER TO tad;

--
-- Name: a_asset_post(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--


ALTER FUNCTION public.a_asset_post(p_pinstance_id character varying, p_asset_id character varying) OWNER TO tad;

--
-- Name: a_asset_post0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION a_asset_post0(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
 PERFORM A_ASSET_POST(p_PInstance_ID, NULL);
END ; $$;


ALTER FUNCTION public.a_asset_post0(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: a_asset_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: a_asset_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION a_asset_trg2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
        
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  DELETE FROM A_Asset_Acct  WHERE A_Asset_ID=old.A_Asset_ID;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.a_asset_trg2() OWNER TO tad;

--
-- Name: ad_accountingrpt_element_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_accountingrpt_element_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_xTree_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_xParent_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_NextNo     VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  -- Insert AD_Menu Trigger
  --  for Translation
  --  and TreeNode
  IF TG_OP = 'INSERT' THEN
    --  Create TreeNode --
    --  get AD_Tree_ID + ParentID
    --SELECT  c.AD_Tree_Menu_ID, n.Node_ID
    -- INTO  v_xTree_ID, v_xParent_ID
    -- FROM    AD_CLIENTINFO c, AD_TREENODE n -- AD_TreeNodeMM n
    --  WHERE   c.AD_Tree_Menu_ID=n.AD_Tree_ID
    --    AND n.Parent_ID IS NULL
    --AND c.AD_Client_ID=:NEW.AD_Client_ID;
    SELECT AD_TREE_ID,
      '0'
    INTO v_xTree_ID,
      v_xParent_ID
    FROM AD_TREE
    WHERE treetype='AR'
      AND AD_Client_ID=NEW.AD_Client_ID;
    --  DBMS_OUTPUT.PUT_LINE('Tree='||v_xTree_ID||'  Node='||:new.AD_Menu_ID||'  Parent='||v_xParent_ID);
    --  Insert into TreeNode
    INSERT
    INTO AD_TREENODE
      -- AD_TreeNodeMM
      (
        AD_TreeNode_ID, AD_Client_ID, AD_Org_ID, IsActive,
        Created, CreatedBy, Updated,
        UpdatedBy, AD_Tree_ID, Node_ID,
        Parent_ID, SeqNo
      )
      VALUES
      (
        get_UUID(), NEW.AD_Client_ID, NEW.AD_Org_ID, NEW.IsActive,
        NEW.Created, NEW.CreatedBy, NEW.Updated,
        NEW.UpdatedBy, v_xTree_ID, NEW.AD_Accountingrpt_Element_ID,
        v_xParent_ID,(
        CASE NEW.IsSummary
          WHEN 'Y'
          THEN 100
          ELSE 999
        END
        )
      )
      ;
    -- Summary Nodes first
  END IF;
  -- Inserting
  -- AD_Ref_List update trigger
  --  synchronize name,...
  IF TG_OP = 'UPDATE' THEN
    IF((COALESCE(old.Name, '.') <> COALESCE(NEW.Name, '.')
   OR COALESCE(old.Description, '.') <> COALESCE(NEW.Description, '.')
   OR COALESCE(old.IsActive, '.') <> COALESCE(NEW.IsActive, '.')))
  THEN
      IF(OLD.IsActive!=NEW.IsActive) THEN
        --  get AD_Tree_ID + ParentID
        --SELECT  c.AD_Tree_Menu_ID, n.Node_ID
        --INTO  v_xTree_ID, v_xParent_ID
        --FROM    AD_CLIENTINFO c, AD_TREENODE n -- AD_TreeNodeMM n
        --WHERE   c.AD_Tree_Menu_ID=n.AD_Tree_ID
        --  AND n.Parent_ID IS NULL
        --AND c.AD_Client_ID=:NEW.AD_Client_ID;
        -- Update
        UPDATE AD_TREENODE
          -- AD_TreeNodeMM
          SET IsActive=NEW.IsActive
        WHERE AD_Tree_ID=v_xTree_ID
          AND Node_ID=NEW.AD_Accountingrpt_Element_ID;
      END IF;
    END IF;
  END IF;
  -- Updating
/*EXCEPTION
WHEN DATA_EXCEPTION THEN
  RAISE EXCEPTION '%', 'AD_AccountingRpt_Element InsertTrigger Error: No ClientInfo or parent TreeNode' ; --OBTG:-20002--
  */
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_accountingrpt_element_trg() OWNER TO tad;

--
-- Name: ad_alertrecipient_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_alertrecipient_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2006 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
      n NUMERIC;
        
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;



   IF TG_OP = 'INSERT' or TG_OP = 'UPDATE' THEN
     select count(*)
       into n
       from ad_user_roles
      where ad_user_id = new.ad_user_id
        and ad_role_id = new.ad_role_id;
     IF new.AD_USER_ID is not null and n=0 then
       RAISE EXCEPTION '%', 'User not in role' ; --OBTG:-20515--
     end if;
   END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_alertrecipient_trg() OWNER TO tad;


--
-- Name: ad_auxiliarinput_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_auxiliarinput_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
  
  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;
  
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.Ad_Auxiliarinput_Id;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.Ad_Auxiliarinput_Id;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.AD_Tab_ID , '.') != COALESCE(OLD.AD_Tab_ID , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Code , '.') != COALESCE(OLD.Code , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_auxiliarinput_mod_trg() OWNER TO tad;

--
-- Name: ad_auxiliarinput_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_auxiliarinput_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
 v_aux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF new.AD_Module_ID != '0' THEN
    SELECT COUNT(*)
      INTO v_Aux
      FROM AD_MODULE_DBPREFIX
     WHERE AD_MODULE_ID = new.AD_Module_ID
       AND instr(upper(new.NAME), upper(name)||'_') = 1;
    
    IF v_Aux = 0 THEN
      RAISE EXCEPTION '%', 'Messages must start with its module DB prefix' ; --OBTG:-20536--
    END IF;
  END IF;


IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_auxiliarinput_trg() OWNER TO tad;

--
-- Name: ad_callout_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_callout_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Callout_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Callout_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_callout_mod_trg() OWNER TO tad;

--
-- Name: ad_callout_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: ad_client_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_client_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: AD_Client_Trg.sql,v 1.2 2002/05/29 04:25:38 jjanke Exp $
    ***
    * Title: AD_Client
    * Description:
    *  Add DocumentNo Sequences for the new Client
    ************************************************************************/
    --TYPE RECORD IS REFCURSOR;
  CUR_DSequence RECORD;
  v_NextNo VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  -- See also: AD_Sequence_Check
  FOR CUR_DSequence IN
    (
    SELECT TableName
    FROM AD_Table t
    WHERE IsActive='Y'
      -- Get all Tables with DocumentNo or Value
      AND AD_Table_ID IN
      (
      SELECT AD_Table_ID
      FROM AD_Column
      WHERE ColumnName='DocumentNo'
        OR ColumnName='Value'
      )
      AND NOT EXISTS
      (SELECT 1 FROM AD_Sequence s  WHERE s.Name = 'DocumentNo_' || t.TableName
    AND s.AD_Client_ID=NEW.AD_Client_ID)
    )
  LOOP
    -- DBMS_OUTPUT.PUT_LINE(' ' || :new.AD_Client_ID || ' - ' || CUR_DSequence.TableName);
    --
    SELECT * INTO  v_NextNo FROM Ad_Sequence_Next('AD_Sequence', NEW.AD_Client_ID) ;
    INSERT
    INTO AD_Sequence
      (
        AD_Sequence_ID, AD_Client_ID, AD_Org_ID,
        IsActive, Created, CreatedBy,
        Updated, UpdatedBy, Name,
        Description, VFormat, IsAutoSequence,
        IncrementNo, StartNo, CurrentNext,
        CurrentNextSys, IsTableID,
        Prefix, Suffix, StartNewYear
      )
      VALUES
      (
        v_NextNo, NEW.AD_Client_ID, 0,  'Y',
        TO_DATE(NOW()), '0', TO_DATE(NOW()),
        '0', 'DocumentNo_' || CUR_DSequence.TableName,  'DocumentNo/Value for Table ' || CUR_DSequence.TableName,
        NULL,  'Y', 1,
        10000000, 10000000, 10000000,
        'N',  NULL,
        NULL,  'N'
      )
      ;
  END LOOP;
  -- Sequences
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.ad_client_trg() OWNER TO tad;

--
-- Name: ad_clientinfo_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_clientinfo_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

    
 /*************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SL
 * All portions are Copyright (C) 2009 Openbravo SL
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************/

   
  v_ExistsNegativeStock NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF; 
  IF (OLD.ALLOWNEGATIVESTOCK='Y' AND NEW.ALLOWNEGATIVESTOCK='N') THEN
    SELECT COUNT(*)
    INTO v_ExistsNegativeStock
    FROM
      ( SELECT ROUND(COALESCE(QTYONHAND, 0), 2) AS QTY,
        ROUND(COALESCE(QTYORDERONHAND, 0), 2) AS QTYORDER
      FROM M_STORAGE_DETAIL
      WHERE AD_CLIENT_ID=NEW.AD_Client_ID
      )
      A
    WHERE QTY<0
      OR QTYORDER<0;      
      IF v_ExistsNegativeStock<>0 THEN
              RAISE EXCEPTION '%', '@NegativeStockCheck@'; --OBTG:-20000--
      END IF;
  END IF;
  
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_clientinfo_trg() OWNER TO tad;

--
-- Name: ad_column_identifier(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.ad_column_identifier(p_tablename character varying, p_record_id character varying, p_language character varying) OWNER TO tad;

--
-- Name: ad_column_identifier_ref_sql(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: ad_column_identifier_sql(character varying); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.ad_column_identifier_sql(p_tablename character varying) OWNER TO tad;

--
-- Name: ad_column_identifier_std(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ad_column_identifier_std(p_tablename character varying, p_record_id character varying) OWNER TO tad;

--
-- Name: ad_column_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--






ALTER FUNCTION public.ad_column_trg2() OWNER TO tad;

--
-- Name: ad_dataset_column_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_dataset_column_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Dataset_Column_ID;
    cuerrentModuleID := new.AD_Dataset_Table_ID;
  ELSE
    cuerrentID := old.AD_Dataset_Column_ID;
    cuerrentModuleID := old.AD_Dataset_Table_ID;
  END IF;
  
   SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M, AD_DATASET T, AD_DATASET_TABLE T1
   WHERE M.AD_MODULE_ID = T.AD_MODULE_ID
     AND T1.AD_DATASET_ID = T.AD_DATASET_ID
     AND T1.AD_DATASET_TABLE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.AD_Dataset_Table_ID , '.') != COALESCE(OLD.AD_Dataset_Table_ID , '.') OR
        COALESCE(NEW.AD_Column_ID , '.') != COALESCE(OLD.AD_Column_ID , '.') OR
        COALESCE(NEW.IsExcluded , '.') != COALESCE(OLD.IsExcluded , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_dataset_column_mod_trg() OWNER TO tad;

--
-- Name: ad_dataset_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_dataset_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Dataset_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Dataset_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Value , '.') != COALESCE(OLD.Value , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        COALESCE(NEW.Export , '.') != COALESCE(OLD.Export , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_dataset_mod_trg() OWNER TO tad;

--
-- Name: ad_dataset_table_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_dataset_table_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Dataset_Table_ID;
    cuerrentModuleID := new.AD_Dataset_ID;
  ELSE
    cuerrentID := old.AD_Dataset_Table_ID;
    cuerrentModuleID := old.AD_Dataset_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M, AD_DATASET T
   WHERE M.AD_MODULE_ID = T.AD_MODULE_ID
     AND T.AD_DATASET_ID = cuerrentModuleID;

     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.AD_Dataset_ID , '.') != COALESCE(OLD.AD_Dataset_ID , '.') OR
        COALESCE(NEW.AD_Table_ID , '.') != COALESCE(OLD.AD_Table_ID , '.') OR
        COALESCE(NEW.IncludeAllColumns , '.') != COALESCE(OLD.IncludeAllColumns , '.') OR
        COALESCE(NEW.WhereClause , '.') != COALESCE(OLD.WhereClause , '.') OR
        COALESCE(NEW.excludeAuditInfo , '.') != COALESCE(OLD.excludeAuditInfo , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_dataset_table_mod_trg() OWNER TO tad;

--
-- Name: ad_db_modified(character); Type: FUNCTION; Schema: public; Owner: tad
-- REMOVED
--

--REMOVED
ALTER FUNCTION public.ad_db_modified(p_update character) OWNER TO tad;

--
-- Name: ad_dba_user_const_searchcond(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_dba_user_const_searchcond(p_constraintname character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_varchar2 VARCHAR(32767) ; --OBTG:VARCHAR2--
  --TYPE RECORD IS REFCURSOR;
    cur_searchCond RECORD;
  BEGIN
    FOR cur_searchCond IN
      (SELECT SEARCH_CONDITION
      FROM USER_CONSTRAINTS
      WHERE CONSTRAINT_NAME=p_constraintName
      )
    LOOP
      v_varchar2 := cur_searchCond.SEARCH_CONDITION;
      v_varchar2 := TRIM(SUBSTR(v_varchar2, 1, 4000)) ;
      EXIT;
    END LOOP;
    RETURN(v_varchar2) ;
END ; $$;


ALTER FUNCTION public.ad_dba_user_const_searchcond(p_constraintname character varying) OWNER TO tad;

--
-- Name: ad_delete_client(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--


-- REMOVED
ALTER FUNCTION public.ad_delete_client(p_pinstance_id character varying, p_ad_client_id character varying) OWNER TO tad;

--
-- Name: ad_delete_client0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--
-- REMOVED


ALTER FUNCTION public.ad_delete_client0(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ad_display_list(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_display_list(p_referencevalue_id character varying, p_value character varying, p_ad_language character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
* Title: Get RefList Name translated
************************************************************************/
  v_Display VARCHAR(120) ; --OBTG:NVARCHAR2--
BEGIN
  IF(p_AD_Language='en_US') THEN
    SELECT RL.NAME
    INTO v_Display
    FROM AD_REF_LIST RL
    WHERE RL.AD_REFERENCE_ID=p_ReferenceValue_ID
      AND RL.VALUE=p_Value;
  ELSE
    SELECT RLT.NAME
    INTO v_Display
    FROM AD_REF_LIST RL,
      AD_REF_LIST_TRL RLT
    WHERE RL.AD_REF_LIST_ID=RLT.AD_REF_LIST_ID
      AND RLT.AD_LANGUAGE=p_AD_Language
      AND RL.AD_REFERENCE_ID=p_ReferenceValue_ID
      AND RL.VALUE=p_Value;
  END IF;
  RETURN v_Display;
EXCEPTION
WHEN OTHERS THEN
  RETURN 'Not found!!!';
END ; $$;


ALTER FUNCTION public.ad_display_list(p_referencevalue_id character varying, p_value character varying, p_ad_language character varying) OWNER TO tad;

--
-- Name: FUNCTION ad_display_list(p_referencevalue_id character varying, p_value character varying, p_ad_language character varying); Type: COMMENT; Schema: public; Owner: tad
--

COMMENT ON FUNCTION ad_display_list(p_referencevalue_id character varying, p_value character varying, p_ad_language character varying) IS '--OBTG:AD_DISPLAY_LISTfunc=NVARCHAR,p_value=NVARCHAR--';




--
-- Name: ad_ep_instance_para_insert(character varying, character varying, character varying, character varying, character varying, numeric, numeric, timestamp without time zone, timestamp without time zone, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_ep_instance_para_insert(p_ad_ep_instance_id character varying, p_ad_ep_extension_points_id character varying, p_parametername character varying, p_p_string character varying, p_p_string_to character varying, p_p_number numeric, p_p_number_to numeric, p_p_date timestamp without time zone, p_p_date_to timestamp without time zone, p_p_text character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
  INSERT INTO ad_ep_instance_para (
    AD_EP_INSTANCE_PARA_ID, AD_EP_INSTANCE_ID, AD_EXTENSION_POINTS_ID, PARAMETERNAME,
    P_STRING, P_STRING_TO, P_NUMBER, P_NUMBER_TO,
    P_DATE, P_DATE_TO, P_TEXT)
  VALUES
    (get_uuid(), p_AD_EP_INSTANCE_ID, p_AD_EP_EXTENSION_POINTS_ID, p_PARAMETERNAME,
    p_P_STRING, p_P_STRING_TO, p_P_NUMBER, p_P_NUMBER_TO, 
    p_P_DATE, p_P_DATE_TO, p_P_TEXT);
EXCEPTION
WHEN OTHERS THEN
  RAISE NOTICE '%','AD_EP_INSTANCE_PARA_INSERT exception' ;
  RAISE EXCEPTION '%', SQLERRM;
END ; $$;


ALTER FUNCTION public.ad_ep_instance_para_insert(p_ad_ep_instance_id character varying, p_ad_ep_extension_points_id character varying, p_parametername character varying, p_p_string character varying, p_p_string_to character varying, p_p_number numeric, p_p_number_to numeric, p_p_date timestamp without time zone, p_p_date_to timestamp without time zone, p_p_text character varying) OWNER TO tad;

--
-- Name: FUNCTION ad_ep_instance_para_insert(p_ad_ep_instance_id character varying, p_ad_ep_extension_points_id character varying, p_parametername character varying, p_p_string character varying, p_p_string_to character varying, p_p_number numeric, p_p_number_to numeric, p_p_date timestamp without time zone, p_p_date_to timestamp without time zone, p_p_text character varying); Type: COMMENT; Schema: public; Owner: tad
--

COMMENT ON FUNCTION ad_ep_instance_para_insert(p_ad_ep_instance_id character varying, p_ad_ep_extension_points_id character varying, p_parametername character varying, p_p_string character varying, p_p_string_to character varying, p_p_number numeric, p_p_number_to numeric, p_p_date timestamp without time zone, p_p_date_to timestamp without time zone, p_p_text character varying) IS '--OBTG:p_parametername=NVARCHAR,p_p_string=NVARCHAR,p_p_string_to=NVARCHAR,p_p_text=NVARCHAR--';


--
-- Name: ad_extension_point_handler(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_extension_point_handler(p_ep_instance_id character varying, p_extension_point_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
v_Sql VARCHAR(2000); --OBTG:VARCHAR2--
--TYPE RECORD IS REFCURSOR;
  Cur_Procedures RECORD;

BEGIN
  FOR Cur_Procedures IN (
    SELECT lower(PROCEDURENAME) AS procedurename
    FROM ad_ep_procedures
    WHERE ad_extension_points_id = p_extension_point_id
      AND isactive = 'Y') LOOP
    IF (AD_GET_RDBMS() = 'ORACLE') THEN
      v_Sql := 'CALL ' || Cur_Procedures.procedurename || '('''||p_ep_instance_id||''')';
    ELSE
      v_Sql := 'SELECT ' || Cur_Procedures.procedurename || '('''||p_ep_instance_id||''') FROM DUAL';
    END IF;
    RAISE NOTICE '%', v_Sql;
    EXECUTE v_Sql;
  END LOOP;
EXCEPTION
WHEN OTHERS THEN
  RAISE NOTICE '%','AD_EXTENSION_POINT_HANDLER exception' ;
  RAISE EXCEPTION '%', SQLERRM;
END ; $$;


ALTER FUNCTION public.ad_extension_point_handler(p_ep_instance_id character varying, p_extension_point_id character varying) OWNER TO tad;

--
-- Name: ad_field_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ad_field_mod_trg() OWNER TO tad;


--
-- Name: ad_fieldgroup_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_fieldgroup_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_FieldGroup_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_FieldGroup_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_fieldgroup_mod_trg() OWNER TO tad;


--
-- Name: ad_form_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_form_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;
    
  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Form_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Form_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.Help , '.') != COALESCE(OLD.Help , '.') OR
        COALESCE(NEW.AccessLevel , '.') != COALESCE(OLD.AccessLevel , '.') OR
        COALESCE(NEW.Classname , '.') != COALESCE(OLD.Classname , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_form_mod_trg() OWNER TO tad;



ALTER FUNCTION public.ad_form_trg() OWNER TO tad;

--
-- Name: ad_form_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ad_form_trg2() OWNER TO tad;

--
-- Name: ad_get_doc_le_bu(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_get_doc_le_bu(p_header_table character varying, p_document_id character varying, p_header_column_id character varying, p_type character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
   v_org_header_id ad_org.ad_org_id%TYPE;
   v_isbusinessunit ad_orgtype.isbusinessunit%TYPE;
   v_islegalentity ad_orgtype.islegalentity%TYPE;
   
 BEGIN
 
   -- Gets the organization and the organization type of the document's header
   EXECUTE 
     'SELECT ad_org.ad_org_id, ad_orgtype.isbusinessunit, ad_orgtype.islegalentity 
     FROM '||p_header_table||', ad_org, ad_orgtype
     WHERE '||p_header_table||'.'||p_header_column_id||'='||''''||p_document_id||''''||' 
     AND ad_org.ad_orgtype_id = ad_orgtype.ad_orgtype_id
     AND '||p_header_table||'.ad_org_id=ad_org.ad_org_id' 
     INTO v_org_header_id, v_isbusinessunit, v_islegalentity;
 
   -- Gets recursively the organization parent until finding a Business Unit or a Legal Entity
   IF (p_type IS NULL) THEN
	   WHILE (v_isbusinessunit='N' AND v_islegalentity='N') LOOP
	     SELECT hh.parent_id, ad_orgtype.isbusinessunit, ad_orgtype.islegalentity
	     INTO v_org_header_id, v_isbusinessunit, v_islegalentity
	     FROM ad_org, ad_orgtype, ad_treenode pp, ad_treenode hh
	     WHERE pp.node_id = hh.parent_id
	     AND hh.ad_tree_id = pp.ad_tree_id
	     AND pp.node_id=ad_org.ad_org_id
	     AND hh.node_id=v_org_header_id
	     AND ad_org.ad_orgtype_id=ad_orgtype.ad_orgtype_id
	     AND ad_org.isready='Y'
	     AND  EXISTS (SELECT 1 FROM ad_tree WHERE ad_tree.treetype='OO' AND hh.ad_tree_id=ad_tree.ad_tree_id and hh.ad_client_id=ad_tree.ad_client_id);     
	   END LOOP;
   -- Gets recursively the organization parent until finding a Legal Entity
    ELSIF (p_type='LE') THEN
       WHILE (v_islegalentity='N') LOOP
         SELECT hh.parent_id, ad_orgtype.islegalentity
         INTO v_org_header_id, v_islegalentity
         FROM ad_org, ad_orgtype, ad_treenode pp, ad_treenode hh
         WHERE pp.node_id = hh.parent_id
         AND hh.ad_tree_id = pp.ad_tree_id
         AND pp.node_id=ad_org.ad_org_id
         AND hh.node_id=v_org_header_id
         AND ad_org.ad_orgtype_id=ad_orgtype.ad_orgtype_id
         AND ad_org.isready='Y'
         AND  EXISTS (SELECT 1 FROM ad_tree WHERE ad_tree.treetype='OO' AND hh.ad_tree_id=ad_tree.ad_tree_id and hh.ad_client_id=ad_tree.ad_client_id);     
       END LOOP;
    -- Gets recursively the organization parent until finding a Business Unit
    ELSIF (p_type='BU') THEN
       WHILE (v_isbusinessunit='N' AND v_org_header_id<>'0') LOOP
         SELECT hh.parent_id, ad_orgtype.isbusinessunit
         INTO v_org_header_id, v_isbusinessunit
         FROM ad_org, ad_orgtype, ad_treenode pp, ad_treenode hh
         WHERE pp.node_id = hh.parent_id
         AND hh.ad_tree_id = pp.ad_tree_id
         AND pp.node_id=ad_org.ad_org_id
         AND hh.node_id=v_org_header_id
         AND ad_org.ad_orgtype_id=ad_orgtype.ad_orgtype_id
         AND ad_org.isready='Y'
         AND  EXISTS (SELECT 1 FROM ad_tree WHERE ad_tree.treetype='OO' AND hh.ad_tree_id=ad_tree.ad_tree_id and hh.ad_client_id=ad_tree.ad_client_id);     
       END LOOP;
       RETURN NULL;
    END IF;
   
   RETURN v_org_header_id;
   
END;   $$;


ALTER FUNCTION public.ad_get_doc_le_bu(p_header_table character varying, p_document_id character varying, p_header_column_id character varying, p_type character varying) OWNER TO tad;


--
-- Name: ad_get_doctype(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_get_doctype(p_clientid character varying, p_orgid character varying, p_docbasetype character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
RETURN AD_GET_DOCTYPE ($1, $2, $3, NULL);
END
; $_$;


ALTER FUNCTION public.ad_get_doctype(p_clientid character varying, p_orgid character varying, p_docbasetype character varying) OWNER TO tad;

--
-- Name: ad_get_next_sequence(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_get_next_sequence(p_tablename character varying, p_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*
* This is maintained just for backwards compatibility, use instead get_uuid()
*/
BEGIN
 return get_uuid();
END ; $$;


ALTER FUNCTION public.ad_get_next_sequence(p_tablename character varying, p_id character varying) OWNER TO tad;

--
-- Name: ad_get_rdbms(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_get_rdbms() RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
  return 'POSTGRE';
END;   $$;


ALTER FUNCTION public.ad_get_rdbms() OWNER TO tad;

--
-- Name: ad_impformat_copy(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_impformat_copy(pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: AD_ImpFormat_Copy.sql,v 1.2 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: Copy Import Format content (i.e. Rows) to another
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_AD_ImpFormat_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_NoOfFields NUMERIC:=0;
    v_NextNo VARCHAR(32); --OBTG:VARCHAR2--
    Cur_Rows RECORD;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      IF(Cur_Parameter.ParameterName='AD_ImpFormat_ID') THEN
        v_AD_ImpFormat_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  AD_ImpFormat_ID=' || v_AD_ImpFormat_ID ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    -- Record_ID is the ImpFormat_ID to copy to
    FOR Cur_Rows IN
      (SELECT *  FROM AD_ImpFormat_Row  WHERE AD_ImpFormat_ID=v_AD_ImpFormat_ID)
    LOOP
      -- Get next no
      SELECT * INTO  v_NextNo FROM AD_Sequence_Next('AD_ImpFormat_Row', Cur_Rows.AD_Client_ID) ;
      -- Insert
      INSERT
      INTO AD_ImpFormat_Row
        (
          AD_ImpFormat_Row_ID, AD_ImpFormat_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, Name, SeqNo, AD_Column_ID,
          StartNo, EndNo, DataType, DataFormat,
          DecimalPoint, DivideBy100, ConstantValue, Callout
        )
        VALUES
        (v_NextNo, v_Record_ID, Cur_Rows.AD_Client_ID, Cur_Rows.AD_Org_ID,
        Cur_Rows.IsActive, TO_DATE(NOW()), '0', TO_DATE(NOW()),
        '0', Cur_Rows.Name, Cur_Rows.SeqNo, Cur_Rows.AD_Column_ID,
        Cur_Rows.StartNo, Cur_Rows.EndNo, Cur_Rows.DataType, Cur_Rows.DataFormat,
        Cur_Rows.DecimalPoint, Cur_Rows.DivideBy100, Cur_Rows.ConstantValue, Cur_Rows.Callout) ;
      --
      v_NoOfFields:=v_NoOfFields + 1;
    END LOOP;
    v_Message:='@Copied@=' || v_NoOfFields;
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
 v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $_$;


ALTER FUNCTION public.ad_impformat_copy(pinstance_id character varying) OWNER TO tad;

--
-- Name: ad_isjavaword(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_isjavaword(word character varying) RETURNS character
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009-2010 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
  --Prevents column names to generate conflicts with DAL's getters and setters
  RETURN case when lower(WORD) in ('class')
    THEN 'Y' ELSE 'N' END;
END ; $$;


ALTER FUNCTION public.ad_isjavaword(word character varying) OWNER TO tad;

--
-- Name: ad_ismemberincluded(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_ismemberincluded(p_nodeid character varying, p_parentid character varying, p_treeid character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Title: Return 'Tree Level' if nodeID is a leaf of the tree
*    where parentID is the root. Else return -1
************************************************************************/
  v_Level NUMERIC:=0;
  v_Parent VARCHAR(32) ; --OBTG:VARCHAR2--
  v_Node   VARCHAR(32) ; --OBTG:VARCHAR2--
BEGIN
  v_Parent:=p_nodeID;
  WHILE v_Parent IS NOT NULL
  LOOP
    v_Level:=v_Level + 1;
    SELECT MAX(NODE_ID),
      MAX(PARENT_ID)
    INTO v_Node,
      v_Parent
    FROM AD_TREENODE
    WHERE AD_TREE_ID=p_treeID
      AND NODE_ID=v_Parent;
    IF v_Node=p_parentID THEN
      RETURN v_Level;
    END IF;
  END LOOP;
  RETURN(-1) ;
END ; $$;


ALTER FUNCTION public.ad_ismemberincluded(p_nodeid character varying, p_parentid character varying, p_treeid character varying) OWNER TO tad;

--
-- Name: ad_isorgincluded(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_isorgincluded(p_orgid character varying, p_parentorgid character varying, p_clientid character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Title: Return 'Org Level' if orgID is a leaf of the org tree
*    where parentOrgID is the root. Else return -1
************************************************************************/
  v_Level NUMERIC:=0;
  v_treeID VARCHAR(32) ; --OBTG:varchar2--
  v_Parent VARCHAR(32) ;
  v_Node   VARCHAR(32) ;
BEGIN
  SELECT MAX(AD_TREE_ORG_ID)
  INTO v_treeID
  FROM AD_CLIENTINFO
  WHERE AD_CLIENT_ID=p_clientID;
  v_Parent:=p_OrgID;
  WHILE v_Parent IS NOT NULL
  LOOP
    v_Level:=v_Level + 1;
    SELECT MAX(NODE_ID),
      MAX(PARENT_ID)
    INTO v_Node,
      v_Parent
    FROM AD_TREENODE
    WHERE AD_TREE_ID=v_treeID
      AND NODE_ID=v_Parent;
    IF v_Node=p_parentOrgID THEN
      RETURN v_Level;
    END IF;
  END LOOP;
  RETURN(-1) ;
END ; $$;


ALTER FUNCTION public.ad_isorgincluded(p_orgid character varying, p_parentorgid character varying, p_clientid character varying) OWNER TO tad;

--
-- Name: ad_istriggerenabled(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_istriggerenabled() RETURNS character
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
 v_aux NUMERIC;
BEGIN
 SELECT COUNT(*) 
   INTO v_aux
   FROM AD_Session_Status
  WHERE IsImporting='Y';
  
  IF v_Aux>0 THEN
    RETURN 'N';
  ELSE
    RETURN 'Y';
  END IF;
  
  
EXCEPTION
WHEN OTHERS THEN
  RETURN 'Y';
END ; $$;


ALTER FUNCTION public.ad_istriggerenabled() OWNER TO tad;


--
-- Name: ad_mapping_format(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_mapping_format(p_str character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_str VARCHAR(2000) ; --OBTG:VARCHAR2--
BEGIN
  IF p_str IS NULL THEN
    RETURN p_str;
  END IF;
  v_str:=p_str;
  --Replace Accents
  v_str:=replace(v_str, 'á', 'a') ;
  v_str:=replace(v_str, 'é', 'e') ;
  v_str:=replace(v_str, 'í', 'i') ;
  v_str:=replace(v_str, 'ó', 'o') ;
  v_str:=replace(v_str, 'ú', 'u') ;
  v_str:=replace(v_str, 'Á', 'A') ;
  v_str:=replace(v_str, 'É', 'E') ;
  v_str:=replace(v_str, 'Í', 'I') ;
  v_str:=replace(v_str, 'Ó', 'O') ;
  v_str:=replace(v_str, 'Ú', 'U') ;
  --Replace special characters
  v_str:=replace(v_str, '-', '') ;
  v_str:=replace(v_str, '/', '') ;
  v_str:=replace(v_str, '#', '') ;
  v_str:=replace(v_str, ' ', '') ;
  v_str:=replace(v_str, '&', '') ;
  v_str:=replace(v_str, ',', '') ;
  v_str:=replace(v_str, '(', '') ;
  v_str:=replace(v_str, ')', '') ;
  RETURN(v_str) ;
END ; $$;


ALTER FUNCTION public.ad_mapping_format(p_str character varying) OWNER TO tad;

--
-- Name: ad_menu_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_menu_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Menu_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Menu_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.IsSummary , '.') != COALESCE(OLD.IsSummary , '.') OR
        COALESCE(NEW.Action , '.') != COALESCE(OLD.Action , '.') OR
        COALESCE(NEW.AD_Window_ID , '.') != COALESCE(OLD.AD_Window_ID , '.') OR
        COALESCE(NEW.AD_Workflow_ID , '.') != COALESCE(OLD.AD_Workflow_ID , '.') OR
        COALESCE(NEW.AD_Task_ID , '.') != COALESCE(OLD.AD_Task_ID , '.') OR
        COALESCE(NEW.AD_Process_ID , '.') != COALESCE(OLD.AD_Process_ID , '.') OR
        COALESCE(NEW.AD_Form_ID , '.') != COALESCE(OLD.AD_Form_ID , '.') OR
        COALESCE(NEW.URL , '.') != COALESCE(OLD.URL , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_menu_mod_trg() OWNER TO tad;

--
-- Name: ad_menu_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: ad_message_get(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ad_message_get(p_value character varying, p_ad_language character varying) OWNER TO tad;

--
-- Name: FUNCTION ad_message_get(p_value character varying, p_ad_language character varying); Type: COMMENT; Schema: public; Owner: tad
--

COMMENT ON FUNCTION ad_message_get(p_value character varying, p_ad_language character varying) IS '--OBTG:AD_MESSAGE_GETfunc=NVARCHAR,p_value=NVARCHAR--';


--
-- Name: ad_message_get2(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ad_message_get2(p_value character varying, p_ad_language character varying) OWNER TO tad;

--
-- Name: FUNCTION ad_message_get2(p_value character varying, p_ad_language character varying); Type: COMMENT; Schema: public; Owner: tad
--

COMMENT ON FUNCTION ad_message_get2(p_value character varying, p_ad_language character varying) IS '--OBTG:AD_MESSAGE_GET2func=NVARCHAR,p_value=NVARCHAR--';


--
-- Name: ad_message_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_message_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Message_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Message_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Value , '.') != COALESCE(OLD.Value , '.') OR
        COALESCE(NEW.MsgText , '.') != COALESCE(OLD.MsgText , '.') OR
        COALESCE(NEW.MsgTip , '.') != COALESCE(OLD.MsgTip , '.') OR
        COALESCE(NEW.MsgType , '.') != COALESCE(OLD.MsgType , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_message_mod_trg() OWNER TO tad;

--
-- Name: ad_message_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: ad_model_object_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_model_object_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_TAB_ID       VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_TASK_ID      VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_WORKFLOW_ID  VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_PROCESS_ID   VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_FORM_ID      VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_REFERENCE_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_CALLOUT_ID   VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;



     null;
     /* Mutating tables....
  cuerrentModuleID := NULL;
  
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Model_Object_ID;
    v_AD_TAB_ID       := new.AD_TAB_ID;
    v_AD_TASK_ID      := new.AD_TASK_ID;
    v_AD_WORKFLOW_ID  := new.AD_WORKFLOW_ID;
    v_AD_PROCESS_ID   := new.AD_PROCESS_ID;
    v_AD_FORM_ID      := new.AD_FORM_ID;
    v_AD_REFERENCE_ID := new.AD_REFERENCE_ID;
    v_AD_CALLOUT_ID   := new.AD_CALLOUT_ID;
  ELSE
    cuerrentID := old.AD_Model_Object_ID;
    v_AD_TAB_ID       := old.AD_TAB_ID;
    v_AD_TASK_ID      := old.AD_TASK_ID;
    v_AD_WORKFLOW_ID  := old.AD_WORKFLOW_ID;
    v_AD_PROCESS_ID   := old.AD_PROCESS_ID;
    v_AD_FORM_ID      := old.AD_FORM_ID;
    v_AD_REFERENCE_ID := old.AD_REFERENCE_ID;
    v_AD_CALLOUT_ID   := old.AD_CALLOUT_ID;
  END IF;
  
  IF (v_AD_TAB_ID       IS NULL AND
    v_AD_TASK_ID      IS NULL AND
    v_AD_WORKFLOW_ID  IS NULL AND
    v_AD_PROCESS_ID   IS NULL AND
    v_AD_FORM_ID      IS NULL AND
    v_AD_REFERENCE_ID IS NULL AND
    v_AD_CALLOUT_ID   IS NULL) THEN
    cuerrentModuleID := '0'; --CORE
  ELSIF v_AD_TAB_ID       IS NOT NULL THEN
    SELECT AD_MODULE_ID
      INTO cuerrentModuleID
      FROM AD_TAB
     WHERE AD_TAB_ID = v_AD_TAB_ID;
  ELSIF v_AD_TASK_ID      IS NOT NULL THEN
   
     null;
  ELSIF v_AD_WORKFLOW_ID  IS NOT NULL THEN
    SELECT AD_MODULE_ID
      INTO cuerrentModuleID
      FROM AD_WORKFLOW
     WHERE AD_WORKFLOW_ID = v_AD_WORKFLOW_ID;
  ELSIF v_AD_PROCESS_ID   IS NOT NULL THEN
    SELECT AD_MODULE_ID
      INTO cuerrentModuleID
      FROM AD_PROCESS
     WHERE AD_PROCESS_ID = v_AD_PROCESS_ID;
  ELSIF v_AD_FORM_ID      IS NOT NULL THEN
    SELECT AD_MODULE_ID
      INTO cuerrentModuleID
      FROM AD_FORM
     WHERE AD_FORM_ID = v_AD_FORM_ID;
  ELSIF v_AD_REFERENCE_ID IS NOT NULL THEN
    SELECT AD_MODULE_ID
      INTO cuerrentModuleID
      FROM AD_REFERENCE
     WHERE AD_REFERENCE_ID = v_AD_REFERENCE_ID;
  ELSIF v_AD_CALLOUT_ID   IS NOT NULL THEN
    SELECT AD_MODULE_ID
      INTO cuerrentModuleID
      FROM AD_CALLOUT
     WHERE AD_CALLOUT_ID = v_AD_CALLOUT_ID;
  END IF;
  
  IF cuerrentModuleID IS NOT NULL THEN
    SELECT ISInDevelopment
      INTO devModule
      FROM AD_MODULE 
     WHERE AD_MODULE_ID = cuerrentModuleID;
     
    SELECT COUNT(*)
      INTO devTemplate
      FROM AD_MODULE
     WHERE IsInDevelopment = 'Y'
       AND Type = 'T';
    IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
      IF (
          COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
          COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
          COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
          COALESCE(NEW.Action , '.') != COALESCE(OLD.Action , '.') OR
          COALESCE(NEW.AD_Tab_ID , '.') != COALESCE(OLD.AD_Tab_ID , '.') OR
          COALESCE(NEW.Classname , '.') != COALESCE(OLD.Classname , '.') OR
          COALESCE(NEW.IsDefault , '.') != COALESCE(OLD.IsDefault , '.') OR
          COALESCE(NEW.AD_Task_ID , '.') != COALESCE(OLD.AD_Task_ID , '.') OR
          COALESCE(NEW.AD_Workflow_ID , '.') != COALESCE(OLD.AD_Workflow_ID , '.') OR
          COALESCE(NEW.AD_Process_ID , '.') != COALESCE(OLD.AD_Process_ID , '.') OR
          COALESCE(NEW.AD_Form_ID , '.') != COALESCE(OLD.AD_Form_ID , '.') OR
          COALESCE(NEW.AD_Reference_ID , '.') != COALESCE(OLD.AD_Reference_ID , '.') OR
          COALESCE(NEW.AD_Callout_ID , '.') != COALESCE(OLD.AD_Callout_ID , '.') OR
          1=2) THEN
        RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
      END IF;
    END IF;
    
    IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
      RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
    END IF;
  END IF;
  */
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_model_object_mod_trg() OWNER TO tad;

--
-- Name: ad_modobjmapping_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.ad_modobjmapping_mod_trg() OWNER TO tad;

--
-- Name: ad_module_dbprefix_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_module_dbprefix_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Module_Dbprefix_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Module_Dbprefix_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.Isactive , '.') != COALESCE(OLD.Isactive , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_module_dbprefix_mod_trg() OWNER TO tad;


ALTER FUNCTION public.ad_module_dbprefix_trg() OWNER TO tad;

--
-- Name: ad_module_denpendency_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_module_denpendency_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

  /*************************************************************************
  * The contents of this file are subject to the Openbravo  Public  License
  * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
  * Version 1.1  with a permitted attribution clause; you may not  use this
  * file except in compliance with the License. You  may  obtain  a copy of
  * the License at http://www.openbravo.com/legal/license.html
  * Software distributed under the License  is  distributed  on  an "AS IS"
  * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  * License for the specific  language  governing  rights  and  limitations
  * under the License.
  * The Original Code is Openbravo ERP.
  * The Initial Developer of the Original Code is Openbravo SL
  * All portions are Copyright (C) 2008 Openbravo SL
  * All Rights Reserved.
  * Contributor(s):  ______________________________________.
  ************************************************************************/
  v_Type VARCHAR(60); --OBTG:VARCHAR2--
  v_name VARCHAR(60); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT Type
    INTO v_Type
    FROM AD_MODULE
   WHERE AD_Module_ID = new.AD_Module_ID;
   
  SELECT name
    INTO v_name
    FROM AD_MODULE
   WHERE AD_Module_ID = new.AD_Dependent_Module_ID;
   
  IF v_Type = 'M' AND new.IsIncluded = 'Y' THEN
    RAISE EXCEPTION '%', 'Simple modules cannot contain other modules' ; --OBTG:-20530--
  END IF;
  new.Dependant_Module_Name := v_name;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_module_denpendency_trg() OWNER TO tad;

--
-- Name: ad_module_dependency_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_module_dependency_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2010 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Module_Dependency_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Module_Dependency_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        COALESCE(NEW.AD_Dependent_Module_ID , '.') != COALESCE(OLD.AD_Dependent_Module_ID , '.') OR
        COALESCE(NEW.StartVersion , '.') != COALESCE(OLD.StartVersion , '.') OR
        COALESCE(NEW.EndVersion , '.') != COALESCE(OLD.EndVersion , '.') OR
        COALESCE(NEW.IsIncluded , '.') != COALESCE(OLD.IsIncluded , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', '@20532@'; --OBTG:-20000--
    END IF;
  END IF;
  
  IF (TG_OP = 'INSERT' AND devModule='N') THEN
    RAISE EXCEPTION '%', '@20533'; --OBTG:-20000--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_module_dependency_mod_trg() OWNER TO tad;

--
-- Name: ad_module_dependent(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ad_module_dependent(p_childmodule_id character varying, p_parentmodule_id character varying) OWNER TO tad;

--
-- Name: ad_module_translation_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_module_translation_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_Aux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

    SELECT COUNT(*)
      INTO v_Aux
    FROM AD_WINDOW T
   WHERE T.AD_MODULE_ID = new.AD_MODULE_ID;

     IF v_Aux > 0 AND new.istranslationrequired='N' THEN
       RAISE EXCEPTION '%', 'The module has User Interface artifacts, translation required must be set to Yes (checked).' ; --OBTG:-20103--
     END IF;

    SELECT COUNT(*)
      INTO v_Aux
    FROM AD_TAB T
   WHERE T.AD_MODULE_ID = new.AD_MODULE_ID;

     IF v_Aux > 0 AND new.istranslationrequired='N' THEN
       RAISE EXCEPTION '%', 'The module has User Interface artifacts, translation required must be set to Yes (checked).' ; --OBTG:-20103--
     END IF;

    SELECT COUNT(*)
      INTO v_Aux
    FROM AD_FIELD T
   WHERE T.AD_MODULE_ID = new.AD_MODULE_ID;

     IF v_Aux > 0 AND new.istranslationrequired='N' THEN
       RAISE EXCEPTION '%', 'The module has User Interface artifacts, translation required must be set to Yes (checked).' ; --OBTG:-20103--
     END IF;

    SELECT COUNT(*)
      INTO v_Aux
    FROM AD_ELEMENT T
   WHERE T.AD_MODULE_ID = new.AD_MODULE_ID;

     IF v_Aux > 0 AND new.istranslationrequired='N' THEN
       RAISE EXCEPTION '%', 'The module has User Interface artifacts, translation required must be set to Yes (checked).' ; --OBTG:-20103--
     END IF;

    SELECT COUNT(*)
      INTO v_Aux
    FROM AD_TEXTINTERFACES T
   WHERE T.AD_MODULE_ID = new.AD_MODULE_ID;

     IF v_Aux > 0 AND new.istranslationrequired='N' THEN
       RAISE EXCEPTION '%', 'The module has User Interface artifacts, translation required must be set to Yes (checked).' ; --OBTG:-20103--
     END IF;

    SELECT COUNT(*)
      INTO v_Aux
    FROM AD_MESSAGE T
   WHERE T.AD_MODULE_ID = new.AD_MODULE_ID;

     IF v_Aux > 0 AND new.istranslationrequired='N' THEN
       RAISE EXCEPTION '%', 'The module has User Interface artifacts, translation required must be set to Yes (checked).' ; --OBTG:-20103--
     END IF;

    SELECT COUNT(*)
      INTO v_Aux
    FROM AD_FORM T
   WHERE T.AD_MODULE_ID = new.AD_MODULE_ID;

     IF v_Aux > 0 AND new.istranslationrequired='N' THEN
       RAISE EXCEPTION '%', 'The module has User Interface artifacts, translation required must be set to Yes (checked).' ; --OBTG:-20103--
     END IF;

    SELECT COUNT(*)
      INTO v_Aux
    FROM AD_MENU T
   WHERE T.AD_MODULE_ID = new.AD_MODULE_ID;

     IF v_Aux > 0 AND new.istranslationrequired='N' THEN
       RAISE EXCEPTION '%', 'The module has User Interface artifacts, translation required must be set to Yes (checked).' ; --OBTG:-20103--
     END IF;

    SELECT COUNT(*)
      INTO v_Aux
    FROM AD_WORKFLOW T
   WHERE T.AD_MODULE_ID = new.AD_MODULE_ID;

     IF v_Aux > 0 AND new.istranslationrequired='N' THEN
       RAISE EXCEPTION '%', 'The module has User Interface artifacts, translation required must be set to Yes (checked).' ; --OBTG:-20103--
     END IF;

IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_module_translation_trg() OWNER TO tad;



ALTER FUNCTION public.ad_module_trg() OWNER TO tad;

--
-- Name: ad_module_version_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ad_module_version_trg() OWNER TO tad;

--
-- Name: ad_org_acctschema_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_org_acctschema_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_num NUMERIC; 
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  SELECT AD_ORG_CHK_SCHEMAS() INTO v_num FROM DUAL;
  IF (v_num = -1) THEN
    RAISE EXCEPTION '%', 'Every legal entity must have itself or an ancestor at least an accounting schema attached to it'; --OBTG:-20542--
  END IF;
  
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_org_acctschema_trg() OWNER TO tad;

--
-- Name: ad_org_chk_calendar(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_org_chk_calendar() RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/      

  v_parent_id ad_treenode.parent_id%TYPE;
  v_node_id ad_treenode.parent_id%TYPE;
  
  v_num_calendars INTEGER;
  v_calendar_id ad_org.c_calendar_id%TYPE;
  v_calendar_id_old ad_org.c_calendar_id%TYPE;
  
  --TYPE RECORD IS REFCURSOR;
  cur_org_le RECORD;
  

BEGIN
  
  -- Get Legal Entities with accounting
  FOR cur_org_le IN
  (
   SELECT ad_org.ad_org_id
   FROM ad_org, ad_orgtype
   WHERE IsLegalEntity='Y'
   AND IsReady='Y'
   AND IsAcctLegalEntity='Y'
   AND ad_org.ad_orgtype_id= ad_orgtype.ad_orgtype_id
  )
  
  LOOP
  
    -- The number of calendars must be < 1
    SELECT COUNT(DISTINCT c_calendar_id), COALESCE(MAX(c_calendar_id), 'NO CALENDAR')
    INTO v_num_calendars, v_calendar_id
    FROM ad_org
    WHERE AD_ISORGINCLUDED(ad_org.ad_org_id, cur_org_le.ad_org_id, ad_org.ad_client_id)<>-1
    AND IsReady='Y';
    
    IF (v_num_calendars>1) THEN
      RETURN -2;
    END IF;
       
    v_calendar_id_old := v_calendar_id;
    v_node_id := cur_org_le.ad_org_id;
    v_parent_id := 'XX';
    WHILE ( v_parent_id <> '0' AND v_node_id <> '0' ) LOOP      
      
      SELECT parent_id
      INTO v_parent_id
      FROM ad_treenode t
      WHERE node_id=v_node_id
      AND EXISTS (SELECT 1 
                  FROM ad_tree, ad_org
                  WHERE ad_tree.ad_client_id = ad_org.ad_client_id
                  AND ad_tree.ad_client_id=t.ad_client_id
                  AND ad_tree.treetype='OO'
                  AND t.ad_tree_id=ad_tree.ad_tree_id
                  AND IsReady='Y'
                  );
  
  
      SELECT COALESCE(ad_org.c_calendar_id, 'NO CALENDAR')
      INTO v_calendar_id
      FROM ad_org
      WHERE ad_org_id=v_parent_id;
           
      
      IF ((v_calendar_id_old <> v_calendar_id) AND ((v_calendar_id_old <> 'NO CALENDAR') AND (v_calendar_id <> 'NO CALENDAR' ))) THEN
        RETURN -1;
      END IF;
      
      IF (v_calendar_id<>'NO CALENDAR') THEN
        v_num_calendars:= v_num_calendars+1;
        v_calendar_id_old:= v_calendar_id;
      END IF;
  
      
      v_node_id:=v_parent_id;
    END LOOP;
    
    IF (v_num_calendars=0) THEN
      RETURN -3;
    END IF;

 END LOOP;

 
 RETURN 0;
END ; $$;


ALTER FUNCTION public.ad_org_chk_calendar() OWNER TO tad;

--
-- Name: ad_org_chk_doc_payments(character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_org_chk_doc_payments(p_header_table character varying, p_lines_table character varying, p_document_id character varying, p_header_column_id character varying, p_lines_column_id character varying, p_lines_column_payment_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
   v_org_header_id ad_org.ad_org_id%TYPE;
   v_isbusinessunit ad_orgtype.isbusinessunit%TYPE;
   v_islegalentity ad_orgtype.islegalentity%TYPE;
   v_is_included NUMERIC:=0;
   v_dyn_cur VARCHAR(2000);
 
   TYPE_Ref REFCURSOR;
   cur_doc_lines_payment TYPE_REF%TYPE;
 
   v_line_org_payment VARCHAR(32);
   v_org_payment_line_id VARCHAR(32);
 BEGIN
 
   -- Gets the Business Unit or Legal Entity of the document
   SELECT AD_GET_DOC_LE_BU(p_header_table, p_document_id, p_header_column_id, NULL)
   INTO v_org_header_id
   FROM DUAL;
 
   v_dyn_cur:='SELECT DISTINCT(C_DEBT_PAYMENT.ad_org_id) AS v_line_org_payment
    FROM '||p_header_table||', '||p_lines_table||', C_DEBT_PAYMENT
    WHERE '||p_header_table||'.'||p_header_column_id||' = '||p_lines_table||'.'||p_lines_column_id||'
    AND C_DEBT_PAYMENT.C_DEBT_PAYMENT_ID='||p_lines_table||'.'||p_lines_column_payment_id||'
	AND '||p_lines_table||'.ad_org_id<>'||''''||v_org_header_id||'''
    AND '||p_lines_table||'.'||p_lines_column_id||'='||''''||p_document_id||'''';

   -- Check the payments of the lines belong to the same BU or LE as the document header
   OPEN cur_doc_lines_payment FOR EXECUTE v_dyn_cur;
    LOOP
     FETCH cur_doc_lines_payment INTO v_line_org_payment;
     IF NOT FOUND THEN
       EXIT;
     END IF;


     SELECT ad_orgtype.isbusinessunit, ad_orgtype.islegalentity
     INTO v_isbusinessunit, v_islegalentity
     FROM AD_Org, AD_OrgType
     WHERE AD_Org.AD_OrgType_ID=AD_OrgType.AD_OrgType_ID
     AND AD_Org.AD_Org_ID=v_line_org_payment;

      v_org_payment_line_id:=v_line_org_payment;
      -- Gets recursively the organization parent until finding a Business Unit or a Legal Entity
      WHILE (v_isbusinessunit='N' AND v_islegalentity='N') LOOP
        SELECT hh.parent_id, ad_orgtype.isbusinessunit, ad_orgtype.islegalentity
        INTO v_org_payment_line_id, v_isbusinessunit, v_islegalentity
        FROM ad_org, ad_orgtype, ad_treenode pp, ad_treenode hh
        WHERE pp.node_id = hh.parent_id
        AND hh.ad_tree_id = pp.ad_tree_id
        AND pp.node_id=ad_org.ad_org_id
        AND hh.node_id=v_org_payment_line_id
        AND ad_org.ad_orgtype_id=ad_orgtype.ad_orgtype_id
        AND ad_org.isready='Y'
        AND  EXISTS (SELECT 1 FROM ad_tree WHERE ad_tree.treetype='OO' AND hh.ad_tree_id=ad_tree.ad_tree_id AND hh.ad_client_id=ad_tree.ad_client_id);     
      END LOOP;

     IF (v_org_payment_line_id<>v_org_header_id) THEN
       v_is_included:=-1;
     END IF;
     EXIT WHEN v_is_included=-1;
 
    END LOOP; 
   CLOSE cur_doc_lines_payment;
 
  RETURN v_is_included;
 
END;   $$;


ALTER FUNCTION public.ad_org_chk_doc_payments(p_header_table character varying, p_lines_table character varying, p_document_id character varying, p_header_column_id character varying, p_lines_column_id character varying, p_lines_column_payment_id character varying) OWNER TO tad;

--
-- Name: ad_org_chk_documents(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_org_chk_documents(p_header_table character varying, p_lines_table character varying, p_document_id character varying, p_header_column_id character varying, p_lines_column_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
   v_org_header_id ad_org.ad_org_id%TYPE;
   v_isbusinessunit ad_orgtype.isbusinessunit%TYPE;
   v_islegalentity ad_orgtype.islegalentity%TYPE;
   v_is_included NUMERIC:=0;
   v_dyn_cur VARCHAR(2000);
 
   TYPE_Ref REFCURSOR;
   cur_doc_lines TYPE_REF%TYPE;
 
   v_line_org VARCHAR(32);
   v_org_line_id VARCHAR(32);
 BEGIN
 
   -- Gets the Business Unit or Legal Entity of the document
   SELECT AD_GET_DOC_LE_BU(p_header_table, p_document_id, p_header_column_id, NULL)
   INTO v_org_header_id
   FROM DUAL;
 
   v_dyn_cur:='SELECT DISTINCT('||p_lines_table||'.ad_org_id) AS v_line_org 
	FROM '||p_header_table||', '||p_lines_table||'  
	WHERE '||p_header_table||'.'||p_header_column_id||' = '||p_lines_table||'.'||p_lines_column_id||' 
	AND '||p_lines_table||'.ad_org_id<>'||''''||v_org_header_id||'''
	AND '||p_lines_table||'.'||p_lines_column_id||'='||''''||p_document_id||'''';
 
   OPEN cur_doc_lines FOR EXECUTE v_dyn_cur;   
    LOOP
      FETCH cur_doc_lines INTO v_line_org;
      IF NOT FOUND THEN
        EXIT;
      END IF;

      SELECT ad_orgtype.isbusinessunit, ad_orgtype.islegalentity
      INTO v_isbusinessunit, v_islegalentity
      FROM AD_Org, AD_OrgType
      WHERE AD_Org.AD_OrgType_ID=AD_OrgType.AD_OrgType_ID
      AND AD_Org.AD_Org_ID=v_line_org;

      v_org_line_id:=v_line_org;
      -- Gets recursively the organization parent until finding a Business Unit or a Legal Entity
      WHILE (v_isbusinessunit='N' AND v_islegalentity='N') LOOP
        SELECT hh.parent_id, ad_orgtype.isbusinessunit, ad_orgtype.islegalentity
        INTO v_org_line_id, v_isbusinessunit, v_islegalentity
        FROM ad_org, ad_orgtype, ad_treenode pp, ad_treenode hh
        WHERE pp.node_id = hh.parent_id
        AND hh.ad_tree_id = pp.ad_tree_id
        AND pp.node_id=ad_org.ad_org_id
        AND hh.node_id=v_org_line_id
        AND ad_org.ad_orgtype_id=ad_orgtype.ad_orgtype_id
        AND ad_org.isready='Y'
        AND  EXISTS (SELECT 1 FROM ad_tree WHERE ad_tree.treetype='OO' AND hh.ad_tree_id=ad_tree.ad_tree_id AND hh.ad_client_id=ad_tree.ad_client_id);     
      END LOOP;

      IF (v_org_line_id<>v_org_header_id) THEN
        v_is_included:=-1;
      END IF;
      EXIT WHEN v_is_included=-1;
 
    END LOOP; 
   CLOSE cur_doc_lines;
 
   RETURN v_is_included;
 
END;   $$;


ALTER FUNCTION public.ad_org_chk_documents(p_header_table character varying, p_lines_table character varying, p_document_id character varying, p_header_column_id character varying, p_lines_column_id character varying) OWNER TO tad;

--
-- Name: ad_org_chk_ready(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_org_chk_ready(p_ad_org_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
v_ready_count INTEGER:=0;
  v_count INTEGER:=0;
  v_parent_id ad_treenode.parent_id%TYPE;
  v_node_id ad_treenode.parent_id%TYPE;
  v_isready ad_org.isready%TYPE;
BEGIN
    
  v_node_id := p_ad_org_id;
  v_parent_id := 'XX';
  -- Has any of the parents IsReady='N'
  WHILE (v_parent_id <> '0' AND v_node_id <> '0') LOOP     
    v_count:=v_count+1;
  
    SELECT parent_id
    INTO v_parent_id
    FROM ad_treenode t
    WHERE node_id=v_node_id
    AND EXISTS (SELECT 1 
                FROM ad_tree, ad_org
                WHERE ad_tree.ad_client_id = ad_org.ad_client_id
                AND ad_tree.ad_client_id=t.ad_client_id
                AND ad_tree.treetype='OO'
                AND t.ad_tree_id=ad_tree.ad_tree_id
                );
    
    
    SELECT ad_org.isready 
    INTO v_isready
    FROM ad_org
    WHERE ad_org.ad_org_id = v_parent_id;
  
    IF (v_isready='Y') THEN
      v_ready_count:=v_ready_count+1;
    END IF;     
    
    v_node_id:=v_parent_id;
  END LOOP; 

  IF (v_count <> v_ready_count) THEN
    RETURN -1;
  ELSE
    RETURN 0;
  END IF;
END ; $$;


ALTER FUNCTION public.ad_org_chk_ready(p_ad_org_id character varying) OWNER TO tad;

--
-- Name: ad_org_chk_schemas(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_org_chk_schemas() RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/      

  v_countschemas INTEGER:=1; 
  v_parent_id ad_treenode.parent_id%TYPE;
  v_node_id ad_treenode.parent_id%TYPE;
  
  --TYPE RECORD IS REFCURSOR;
  cur_org_le RECORD;
  
BEGIN
  -- Get Legal Entities with accounting
  FOR cur_org_le IN
  (
   SELECT ad_org.ad_org_id
   FROM ad_org, ad_orgtype
   WHERE IsLegalEntity='Y'
   AND IsReady='Y'
   AND IsAcctLegalEntity='Y'
   AND ad_org.ad_orgtype_id= ad_orgtype.ad_orgtype_id
  )
  
  LOOP
  
    SELECT COUNT(c_acctschema_id)
    INTO v_countschemas
    FROM ad_org_acctschema
    WHERE ad_org_acctschema.ad_org_id = cur_org_le.ad_org_id;
    

    v_node_id := cur_org_le.ad_org_id;
    v_parent_id := 'XX';    
    WHILE ( v_parent_id <> '0' AND v_node_id <> '0' AND v_countschemas<1 ) LOOP      
      
      SELECT parent_id
      INTO v_parent_id
      FROM ad_treenode t
      WHERE node_id=v_node_id
      AND EXISTS (SELECT 1 
                  FROM ad_tree, ad_org
                  WHERE ad_tree.ad_client_id = ad_org.ad_client_id
                  AND ad_tree.ad_client_id=t.ad_client_id
                  AND ad_tree.treetype='OO'
                  AND t.ad_tree_id=ad_tree.ad_tree_id
                  AND AD_Org.IsReady='Y'
                  );

      SELECT COUNT(c_acctschema_id)+v_countschemas
      INTO v_countschemas
      FROM ad_org_acctschema
      WHERE ad_org_acctschema.ad_org_id = v_parent_id;

      v_node_id:=v_parent_id;
    END LOOP;
    
    IF (v_countschemas<1 ) THEN
      RETURN -1;
    END IF;

 END LOOP;

 RETURN v_countschemas;
END ; $$;


ALTER FUNCTION public.ad_org_chk_schemas() OWNER TO tad;

--
-- Name: ad_org_getcalendarowner(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_org_getcalendarowner(p_organization character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

/*
* It returns the organization that owns the calendar for the p_organization Organization.
* If no calendar is found, it returns NULL.
*/

  v_calendar_id AD_Org.C_Calendar_ID%TYPE;  
  v_parent_id ad_treenode.parent_id%TYPE;
  v_node_id ad_treenode.parent_id%TYPE;

BEGIN
  SELECT C_Calendar_ID, AD_Org_ID
  INTO v_calendar_id, v_parent_id
  FROM AD_Org
  WHERE AD_Org_ID=p_organization;
  
  IF (v_calendar_id IS NOT NULL) THEN
    RETURN v_parent_id;
  ELSE
    v_node_id:=p_organization;
    WHILE ( v_parent_id <> '0' AND v_node_id <> '0' ) LOOP      
      SELECT parent_id
      INTO v_parent_id
      FROM ad_treenode t
      WHERE node_id=v_node_id
      AND EXISTS (SELECT 1 
                  FROM ad_tree, ad_org
                  WHERE ad_tree.ad_client_id = ad_org.ad_client_id
                  AND ad_tree.ad_client_id=t.ad_client_id
                  AND ad_tree.treetype='OO'
                  AND t.ad_tree_id=ad_tree.ad_tree_id
                  );

      SELECT C_Calendar_ID, AD_Org_ID
      INTO v_calendar_id, v_parent_id
      FROM AD_Org
      WHERE AD_Org_ID=v_parent_id;
      
      IF (v_calendar_id IS NOT NULL) THEN
        RETURN v_parent_id;
      END IF;
      
      v_node_id:=v_parent_id;
   END LOOP;
END IF;
RETURN NULL;
END ; $$;


ALTER FUNCTION public.ad_org_getcalendarowner(p_organization character varying) OWNER TO tad;

--
-- Name: ad_org_getperiodcontrolallow(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_org_getperiodcontrolallow(p_organization character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

/*
* It returns the organization that is period control allowed for the p_organization Organization.
* If no organization is found, it returns NULL.
*/

  v_isperiodcontrolallowed AD_Org.IsPeriodControlAllowed%TYPE;  
  v_parent_id ad_treenode.parent_id%TYPE;
  v_node_id ad_treenode.parent_id%TYPE;

BEGIN
  SELECT IsPeriodControlAllowed, AD_Org_ID
  INTO v_isperiodcontrolallowed, v_parent_id
  FROM AD_Org
  WHERE AD_Org_ID=p_organization;
  
  IF (v_isperiodcontrolallowed='Y') THEN
    RETURN v_parent_id;
  ELSE
    v_node_id:=p_organization;
    WHILE ( v_parent_id <> '0' AND v_node_id <> '0' ) LOOP      
      SELECT parent_id
      INTO v_parent_id
      FROM ad_treenode t
      WHERE node_id=v_node_id
      AND EXISTS (SELECT 1 
                  FROM ad_tree, ad_org
                  WHERE ad_tree.ad_client_id = ad_org.ad_client_id
                  AND ad_tree.ad_client_id=t.ad_client_id
                  AND ad_tree.treetype='OO'
                  AND t.ad_tree_id=ad_tree.ad_tree_id
                  );

      SELECT IsPeriodControlAllowed, AD_Org_ID
      INTO v_isperiodcontrolallowed, v_parent_id
      FROM AD_Org
      WHERE AD_Org_ID=v_parent_id;
      
      IF (v_isperiodcontrolallowed='Y') THEN
        RETURN v_parent_id;
      END IF;
      
      v_node_id:=v_parent_id;
   END LOOP;
END IF;
RETURN NULL;
END ; $$;


ALTER FUNCTION public.ad_org_getperiodcontrolallow(p_organization character varying) OWNER TO tad;

--
-- Name: ad_org_ready(character varying); Type: FUNCTION; Schema: public; Owner: tad
--


ALTER FUNCTION public.ad_org_ready(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ad_org_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ad_org_trg() OWNER TO tad;

--
-- Name: ad_orglist(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_orglist(p_roleid character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Title: Return the list (comma separated) of Organizations granted to the role
************************************************************************/
  v_orgList VARCHAR(4000) ; --OBTG:VARCHAR2--
  --TYPE RECORD IS REFCURSOR;
    Cur_Roles RECORD;
BEGIN
    v_orgList := '';
    FOR Cur_Roles IN
      (SELECT AD_Org_ID
      FROM AD_ROLE_ORGACCESS
      WHERE AD_ROLE_ID = p_roleID
      ORDER BY AD_Org_ID
      )
    LOOP
      v_orgList:=v_orgList||','||Cur_Roles.AD_Org_ID;
    END LOOP;
    RETURN SUBSTR(v_orgList, 2, 4000) ;
END ; $$;


ALTER FUNCTION public.ad_orglist(p_roleid character varying) OWNER TO tad;

--
-- Name: ad_orgtype_isle_isbu(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_orgtype_isle_isbu() RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

  v_bu_count INTEGER;
  v_le_count INTEGER;
  v_isbusinessunit ad_orgtype.isbusinessunit%TYPE;
  v_islegalentity ad_orgtype.islegalentity%TYPE;
  v_parent_id ad_treenode.parent_id%TYPE;
  v_node_id ad_treenode.parent_id%TYPE;
  v_isready ad_org.isready%TYPE;

  --TYPE RECORD IS REFCURSOR;
  cur_org RECORD;  
   
BEGIN
  -- Every Ready Org without a child
  FOR cur_org IN
  (SELECT ad_org.ad_org_id AS ad_org_id
   FROM ad_org
   WHERE ISREADY='Y'
   AND NOT EXISTS (SELECT 1
                   FROM ad_treenode pp, ad_treenode hh
                   WHERE pp.node_id = hh.parent_id
                   AND hh.ad_tree_id = pp.ad_tree_id
                   AND hh.parent_id=ad_org.ad_org_id 
                   AND  EXISTS (SELECT 1 FROM ad_tree WHERE treetype='OO' AND hh.Ad_tree_id=ad_tree.ad_tree_id))
  )

  LOOP
  
    SELECT ad_orgtype.isbusinessunit 
    INTO v_isbusinessunit
    FROM ad_orgtype, ad_org
    WHERE ad_org.ad_orgtype_id= ad_orgtype.ad_orgtype_id
    AND ad_org.ad_org_id = cur_org.ad_org_id;

    -- Is the Org a business unit 
    v_bu_count:=0;
    IF (v_isbusinessunit='Y') THEN
      v_bu_count:=v_bu_count+1;
    END IF;


    v_le_count:=0;
    v_node_id := cur_org.ad_org_id;
    v_parent_id := 'XX'; 
    -- Is any of the parents a business unit
    WHILE (v_parent_id <> '0' AND v_node_id <> '0') LOOP      
      SELECT parent_id
      INTO v_parent_id
      FROM ad_treenode t
      WHERE node_id=v_node_id
      AND EXISTS (SELECT 1 
                  FROM ad_tree, ad_org
                  WHERE ad_tree.ad_client_id = ad_org.ad_client_id
                  AND ad_tree.ad_client_id=t.ad_client_id
                  AND ad_tree.treetype='OO'
                  AND t.ad_tree_id=ad_tree.ad_tree_id
                  );
                  
      SELECT ad_orgtype.isbusinessunit, ad_orgtype.islegalentity, ad_org.isready 
      INTO v_isbusinessunit, v_islegalentity, v_isready
      FROM ad_orgtype, ad_org
      WHERE ad_org.ad_orgtype_id= ad_orgtype.ad_orgtype_id
      AND ad_org.ad_org_id = v_parent_id;
    
      IF (v_isbusinessunit='Y' AND v_isready='Y') THEN
        v_bu_count:=v_bu_count+1;
      END IF;
      
      IF (v_bu_count<2 AND v_islegalentity='Y' AND v_isready='Y') THEN
        v_le_count:=v_le_count+1;
      END IF;     
      
      v_node_id:=v_parent_id;
    END LOOP; 
    
    IF (v_bu_count > 1 ) THEN
      RETURN v_bu_count;
    END IF;
    
    IF (v_bu_count=1 AND v_le_count <> 1) THEN
      RETURN -1;
    END IF;
        
  END LOOP;
    
  RETURN v_bu_count;
END ; $$;


ALTER FUNCTION public.ad_orgtype_isle_isbu() OWNER TO tad;

--
-- Name: ad_orgtype_istrans_allowed(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_orgtype_istrans_allowed() RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/      

  v_le_count INTEGER; 
  v_islegalentity ad_orgtype.islegalentity%TYPE;
  v_parent_id ad_treenode.parent_id%TYPE;
  v_node_id ad_treenode.parent_id%TYPE;
  v_isready ad_org.isready%TYPE;
  
  --TYPE RECORD IS REFCURSOR;
  cur_tree_org RECORD;
  
BEGIN
  
  FOR cur_tree_org IN
  (
   SELECT ad_org.ad_org_id AS ad_org_id
   FROM ad_org, ad_orgtype
   WHERE IStransactionsallowed='Y'
   AND ad_org.ad_orgtype_id= ad_orgtype.ad_orgtype_id
   AND ISREADY='Y'
  )
  LOOP
  
    SELECT ad_orgtype.islegalentity
    INTO v_islegalentity
    FROM ad_orgtype, ad_org
    WHERE ad_org.ad_orgtype_id= ad_orgtype.ad_orgtype_id
    AND ad_org.ad_org_id = cur_tree_org.ad_org_id;
    
    -- Is the Org a legal entity
    v_le_count:=0;
    IF (v_islegalentity='Y') THEN
      v_le_count:=v_le_count+1;
    END IF;

    v_node_id := cur_tree_org.ad_org_id;
    v_parent_id := 'XX';
    -- Is any of the parents a legal entity
    WHILE (v_parent_id <> '0' AND v_node_id <> '0') LOOP      
      SELECT parent_id
      INTO v_parent_id
      FROM ad_treenode t
      WHERE node_id=v_node_id
      AND EXISTS (SELECT 1 
                  FROM ad_tree, ad_org
                  WHERE ad_tree.ad_client_id = ad_org.ad_client_id
                  AND ad_tree.ad_client_id=t.ad_client_id
                  AND ad_tree.treetype='OO'
                  AND t.ad_tree_id=ad_tree.ad_tree_id
                  );
      
      
      SELECT ad_orgtype.islegalentity, ad_org.isready 
      INTO v_islegalentity, v_isready
      FROM ad_orgtype, ad_org
      WHERE ad_org.ad_orgtype_id= ad_orgtype.ad_orgtype_id
      AND ad_org.ad_org_id = v_parent_id;
    
      IF (v_islegalentity='Y' AND v_isready='Y') THEN
        v_le_count:=v_le_count+1;
      END IF;     
      
      v_node_id:=v_parent_id;
    END LOOP; 
    
    IF (v_le_count <> 1) THEN
     RETURN v_le_count;
    END IF;
       
  END LOOP;
  
  
  RETURN v_le_count;
END ; $$;


ALTER FUNCTION public.ad_orgtype_istrans_allowed() OWNER TO tad;

--
-- Name: ad_orgtype_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_orgtype_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_num NUMERIC; 
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF (new.IsLegalEntity<>old.IsLegalEntity OR new.IsBusinessUnit<>old.IsBusinessUnit OR new.IsAcctLegalEntity<>old.IsAcctLegalEntity OR new.IsTransactionsAllowed<>old.IsTransactionsAllowed) THEN
    SELECT COUNT(AD_Org.AD_Org_ID)
    INTO v_num
    FROM AD_Org
    WHERE AD_Org.AD_OrgType_ID=new.AD_OrgType_ID
    AND AD_Org.IsReady='Y';
    
    IF (v_num>0) THEN
      RAISE EXCEPTION '%','The selected Organization Type is currently associated with a ready Organization'; --OBTG:-20544--
    END IF;  
  END IF;
 
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_orgtype_trg() OWNER TO tad;

--
-- Name: ad_package_jp_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_package_jp_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_Aux NUMERIC;
  v_Type VARCHAR(60); --OBTG:VARCHAR2--
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

   SELECT Type
   INTO v_type
    FROM AD_MODULE
   WHERE AD_MODULE_ID = new.AD_Module_ID;

   IF v_type = 'T' THEN
     RAISE EXCEPTION '%', '@DataPackageNotAllowedInTemplate@'; --OBTG:-20000--
   END IF;


    SELECT COUNT(*)
      INTO v_Aux
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = new.AD_MODULE_ID
      AND instr(upper(new.javapackage), upper(M.javapackage)) = 1
      AND instr(upper(new.javapackage), upper(M.javapackage)) = 1;

     IF v_Aux = 0 THEN
       RAISE EXCEPTION '%', 'The java package of the Data Package must be within the java package of its module.' ; --OBTG:-20102--
     END IF;
  IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_package_jp_trg() OWNER TO tad;

--
-- Name: ad_package_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_package_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;  
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Package_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Package_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.JavaPackage , '.') != COALESCE(OLD.JavaPackage , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        COALESCE(NEW.Isactive , '.') != COALESCE(OLD.Isactive , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_package_mod_trg() OWNER TO tad;

--
-- Name: ad_parent_menu_element(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_parent_menu_element(p_nodeid character varying, p_clientid character varying, p_language character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Title: Return 'Org Level' if orgID is a leaf of the org tree
*    where parentOrgID is the root. Else return -1
************************************************************************/
  v_treeID VARCHAR(32) ; --OBTG:varchar2--
  v_Parent varchar(32) ; --OBTG:varchar2--
  v_Name   VARCHAR(1000) ; --OBTG:VARCHAR2--
BEGIN
  SELECT MAX(AD_TREE_MENU_ID)
  INTO v_treeID
  FROM AD_CLIENTINFO
  WHERE AD_CLIENT_ID=p_clientID;

  SELECT MAX(PARENT_ID), MAX(case when AD_MENU_TRL.NAME IS NULL then AD_MENU.NAME else AD_MENU_TRL.NAME end)
  INTO v_Parent, v_Name
  FROM AD_TREENODE, AD_MENU
    left join AD_MENU_TRL on AD_MENU.AD_MENU_ID = AD_MENU_TRL.AD_MENU_ID
                            AND AD_MENU_TRL.AD_LANGUAGE = p_Language
  WHERE AD_TREE_ID = v_TreeID
  AND NODE_ID = p_NodeID
  AND NODE_ID = AD_MENU.AD_MENU_ID;

  WHILE v_Parent IS NOT NULL
  LOOP
    IF v_Parent = '0' THEN
        RETURN v_Name;
    END IF;

    SELECT MAX(PARENT_ID), MAX(case when AD_MENU_TRL.NAME IS NULL then AD_MENU.NAME else AD_MENU_TRL.NAME end) || '  ||  ' || v_Name
      INTO v_Parent, v_Name
      FROM AD_TREENODE, AD_MENU
        left join AD_MENU_TRL on AD_MENU.AD_MENU_ID = AD_MENU_TRL.AD_MENU_ID
                            AND AD_MENU_TRL.AD_LANGUAGE = p_Language
      WHERE AD_TREE_ID = v_TreeID
      AND NODE_ID = v_Parent
      AND NODE_ID = AD_MENU.AD_MENU_ID;
  END LOOP;
  RETURN(v_Name) ;
END ; $$;


ALTER FUNCTION public.ad_parent_menu_element(p_nodeid character varying, p_clientid character varying, p_language character varying) OWNER TO tad;

--
-- Name: ad_parent_tree(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_parent_tree(p_tree_id character varying, p_node_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
p VARCHAR(32767); --OBTG:VARCHAR2--
  vp VARCHAR(32); --OBTG:VARCHAR2--
BEGIN

  SELECT parent_id
    INTO vp
    FROM ad_treenode
   WHERE node_id = p_node_id
     AND ad_tree_id = p_tree_id;


    p := ad_parent_tree(p_tree_id, vp);
    IF p != ' ' THEN
      RETURN '|'||vp||'|'||p;
    END IF;
    RETURN '|'||vp||'|';
  EXCEPTION WHEN OTHERS THEN RETURN ' ';
END ; $$;


ALTER FUNCTION public.ad_parent_tree(p_tree_id character varying, p_node_id character varying) OWNER TO tad;

--
-- Name: ad_process_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_process_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;
    
  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Process_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Process_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Value , '.') != COALESCE(OLD.Value , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.Help , '.') != COALESCE(OLD.Help , '.') OR
        COALESCE(NEW.AccessLevel , '.') != COALESCE(OLD.AccessLevel , '.') OR
        COALESCE(NEW.IsUserStartable , '.') != COALESCE(OLD.IsUserStartable , '.') OR
        COALESCE(NEW.ProcedureName , '.') != COALESCE(OLD.ProcedureName , '.') OR
        COALESCE(NEW.IsReport , '.') != COALESCE(OLD.IsReport , '.') OR
        COALESCE(NEW.IsDirectPrint , '.') != COALESCE(OLD.IsDirectPrint , '.') OR
        COALESCE(NEW.Classname , '.') != COALESCE(OLD.Classname , '.') OR
        COALESCE(NEW.IsBackground , '.') != COALESCE(OLD.IsBackground , '.') OR
        COALESCE(NEW.IsJasper , '.') != COALESCE(OLD.IsJasper , '.') OR
        COALESCE(NEW.Jrname , '.') != COALESCE(OLD.Jrname , '.') OR
        COALESCE(NEW.Service_Type , '.') != COALESCE(OLD.Service_Type , '.') OR
        COALESCE(NEW.Isexternalservice , '.') != COALESCE(OLD.Isexternalservice , '.') OR
        COALESCE(NEW.Service_Source , '.') != COALESCE(OLD.Service_Source , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_process_mod_trg() OWNER TO tad;

--
-- Name: ad_process_para_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_process_para_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
         
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Process_ID;
  ELSE
    cuerrentID := old.AD_Process_ID;
  END IF;

  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M, AD_PROCESS T
   WHERE M.AD_MODULE_ID = T.AD_MODULE_ID
     AND T.AD_PROCESS_ID = cuerrentID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate='0' AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.Help , '.') != COALESCE(OLD.Help , '.') OR
        COALESCE(NEW.AD_Process_ID , '.') != COALESCE(OLD.AD_Process_ID , '.') OR
        COALESCE(NEW.SeqNo , 0) != COALESCE(OLD.SeqNo , 0) OR
        COALESCE(NEW.AD_Reference_ID , '.') != COALESCE(OLD.AD_Reference_ID , '.') OR
        COALESCE(NEW.AD_Reference_Value_ID , '.') != COALESCE(OLD.AD_Reference_Value_ID , '.') OR
        COALESCE(NEW.AD_Val_Rule_ID , '.') != COALESCE(OLD.AD_Val_Rule_ID , '.') OR
        COALESCE(NEW.ColumnName , '.') != COALESCE(OLD.ColumnName , '.') OR
        COALESCE(NEW.IsCentrallyMaintained , '.') != COALESCE(OLD.IsCentrallyMaintained , '.') OR
        COALESCE(NEW.FieldLength , 0) != COALESCE(OLD.FieldLength , 0) OR
        COALESCE(NEW.IsMandatory , '.') != COALESCE(OLD.IsMandatory , '.') OR
        COALESCE(NEW.IsRange , '.') != COALESCE(OLD.IsRange , '.') OR
        COALESCE(NEW.DefaultValue , '.') != COALESCE(OLD.DefaultValue , '.') OR
        COALESCE(NEW.DefaultValue2 , '.') != COALESCE(OLD.DefaultValue2 , '.') OR
        COALESCE(NEW.VFormat , '.') != COALESCE(OLD.VFormat , '.') OR
        COALESCE(NEW.ValueMin , '.') != COALESCE(OLD.ValueMin , '.') OR
        COALESCE(NEW.ValueMax , '.') != COALESCE(OLD.ValueMax , '.') OR
        COALESCE(NEW.AD_Element_ID , '.') != COALESCE(OLD.AD_Element_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_process_para_mod_trg() OWNER TO tad;


--
-- Name: ad_process_request_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_process_request_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


IF (OLD.STATUS = 'Scheduled') THEN
  RAISE EXCEPTION '%','Unable to delete Process Request whilst still scheduled.'; --OBTG:-20630--
END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_process_request_trg() OWNER TO tad;

--
-- Name: ad_process_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: ad_ref_list_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_ref_list_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Value , '.') != COALESCE(OLD.Value , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.AD_Reference_ID , '.') != COALESCE(OLD.AD_Reference_ID , '.') OR
        COALESCE(NEW.ValidFrom , TO_DATE('01-01-1900', 'DD-MM-YYYY')) != COALESCE(OLD.ValidFrom , TO_DATE('01-01-1900', 'DD-MM-YYYY')) OR
        COALESCE(NEW.ValidTo , TO_DATE('01-01-1900', 'DD-MM-YYYY')) != COALESCE(OLD.ValidTo , TO_DATE('01-01-1900', 'DD-MM-YYYY')) OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_ref_list_mod_trg() OWNER TO tad;

--
-- Name: ad_ref_list_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: ad_ref_search_column_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_ref_search_column_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Ref_Search_Column_ID;
    cuerrentModuleID := new.AD_Ref_Search_ID;
  ELSE
    cuerrentID := old.AD_Ref_Search_Column_ID;
    cuerrentModuleID := OLD.AD_Ref_Search_ID;
  END IF;
  
   SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M, AD_REFERENCE T, AD_REF_SEARCH T1
   WHERE M.AD_MODULE_ID = T.AD_MODULE_ID
     AND T.AD_REFERENCE_ID = T1.AD_REFERENCE_ID
     AND T1.AD_REF_SEARCH_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.AD_Ref_Search_ID , '.') != COALESCE(OLD.AD_Ref_Search_ID , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.ColumnName , '.') != COALESCE(OLD.ColumnName , '.') OR
        COALESCE(NEW.Columntype , '.') != COALESCE(OLD.Columntype , '.') OR
        COALESCE(NEW.Column_Suffix , '.') != COALESCE(OLD.Column_Suffix , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_ref_search_column_mod_trg() OWNER TO tad;

--
-- Name: ad_ref_search_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_ref_search_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Ref_Search_ID;
    cuerrentModuleID := new.AD_Reference_ID;
  ELSE
    cuerrentID := old.AD_Ref_Search_ID;
    cuerrentModuleID := old.AD_Reference_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M, AD_REFERENCE T
   WHERE M.AD_MODULE_ID = T.AD_MODULE_ID
     AND T.AD_REFERENCE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.AD_Reference_ID , '.') != COALESCE(OLD.AD_Reference_ID , '.') OR
        COALESCE(NEW.AD_Table_ID , '.') != COALESCE(OLD.AD_Table_ID , '.') OR
        COALESCE(NEW.AD_Column_ID , '.') != COALESCE(OLD.AD_Column_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_ref_search_mod_trg() OWNER TO tad;

--
-- Name: ad_ref_table_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_ref_table_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Reference_ID;
    cuerrentModuleID := NEW.AD_Reference_ID;
  ELSE
    cuerrentID := old.AD_Reference_ID;
    cuerrentModuleID := old.AD_Reference_ID;
  END IF;
  
    SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M, AD_REFERENCE T
   WHERE M.AD_MODULE_ID = T.AD_MODULE_ID
     AND T.AD_REFERENCE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.AD_Table_ID , '.') != COALESCE(OLD.AD_Table_ID , '.') OR
        COALESCE(NEW.AD_Key , '.') != COALESCE(OLD.AD_Key , '.') OR
        COALESCE(NEW.AD_Display , '.') != COALESCE(OLD.AD_Display , '.') OR
        COALESCE(NEW.IsValueDisplayed , '.') != COALESCE(OLD.IsValueDisplayed , '.') OR
        COALESCE(NEW.WhereClause , '.') != COALESCE(OLD.WhereClause , '.') OR
        COALESCE(NEW.OrderByClause , '.') != COALESCE(OLD.OrderByClause , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_ref_table_mod_trg() OWNER TO tad;

--
-- Name: ad_reference_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_reference_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Reference_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Reference_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.Help , '.') != COALESCE(OLD.Help , '.') OR
        COALESCE(NEW.ValidationType , '.') != COALESCE(OLD.ValidationType , '.') OR
        COALESCE(NEW.VFormat , '.') != COALESCE(OLD.VFormat , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_reference_mod_trg() OWNER TO tad;


--
-- Name: ad_reference_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ad_reference_trg2() OWNER TO tad;

--
-- Name: ad_reference_trg3(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_reference_trg3() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
 
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


 IF new.AD_Module_ID != '0' AND new.ValidationType = 'D' THEN
    RAISE EXCEPTION '%', 'New datatype references are not allowed in modules.'; --OBTG:-20535--
 END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_reference_trg3() OWNER TO tad;

--
-- Name: ad_registration_info_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_registration_info_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_Count NUMERIC:= 0;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;



  SELECT COUNT(*) INTO v_Count FROM AD_REGISTRATION_INFO;
  IF (v_Count <> 0) THEN
    RAISE EXCEPTION '%','Only one registration permitted.'; --OBTG:-20528--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_registration_info_trg() OWNER TO tad;

--
-- Name: ad_role_orgaccess_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.ad_role_orgaccess_trg() OWNER TO tad;

--
-- Name: ad_role_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.ad_role_trg() OWNER TO tad;

--
-- Name: ad_script_disable_constraints(numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_script_disable_constraints(p_seqnostart numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
 v_seqNo      NUMERIC := p_seqNoStart;
 Cur_Constraints RECORD;
BEGIN
 RAISE NOTICE '%','ad_script_disable_constraints';
 FOR Cur_Constraints IN  (SELECT TABLE_NAME, CONSTRAINT_NAME
                          FROM USER_CONSTRAINTS C1
                          WHERE CONSTRAINT_TYPE IN ('P','U','R')
                          --AND DELETE_RULE NOT LIKE 'C'
                          ORDER BY (CASE CONSTRAINT_TYPE WHEN 'R' THEN 1 WHEN 'U' THEN 2 WHEN 'P' THEN 3 END), TABLE_NAME, CONSTRAINT_NAME) LOOP
   v_seqNo := v_seqNo + 1;
   --INSERT INTO AD_SCRIPT_SQL VALUES (v_seqNo, 'ALTER TABLE '||Cur_Constraints.TABLE_NAME||' DISABLE CONSTRAINT '||Cur_Constraints.CONSTRAINT_NAME);
  INSERT INTO AD_SCRIPT_SQL VALUES (v_seqNo, 'ALTER TABLE '||Cur_Constraints.TABLE_NAME||' DROP CONSTRAINT '||Cur_Constraints.CONSTRAINT_NAME);
 END LOOP;
 RETURN v_seqNo+1;
END;   $$;


ALTER FUNCTION public.ad_script_disable_constraints(p_seqnostart numeric) OWNER TO tad;

--
-- Name: ad_script_disable_triggers(numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_script_disable_triggers(p_seqnostart numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
 v_seqNo      NUMERIC := p_seqNoStart;
 Cur_Triggers RECORD;
BEGIN
 FOR Cur_Triggers IN (SELECT OBJECT_NAME AS NAME, TABLE_NAME
                      FROM USER_OBJECTS
                      WHERE OBJECT_TYPE = 'TRIGGER'
                      ORDER BY OBJECT_NAME) LOOP
    v_seqNo := v_seqNo + 1;
  --      INSERT INTO AD_SCRIPT_SQL VALUES (v_seqNo, 'ALTER TRIGGER '||Cur_Triggers.NAME||' DISABLE');
    INSERT INTO AD_SCRIPT_SQL VALUES (v_seqNo, 'ALTER TABLE  '||Cur_Triggers.TABLE_NAME||' DISABLE TRIGGER '||Cur_Triggers.NAME);
 END LOOP;
 RETURN v_seqNo;
END;   $$;


ALTER FUNCTION public.ad_script_disable_triggers(p_seqnostart numeric) OWNER TO tad;

--
-- Name: ad_script_drop_recreate_index(numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_script_drop_recreate_index(p_seqnostart numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
 v_seqNo      NUMERIC := p_seqNoStart;
 v_strTemp VARCHAR(4000):='';
 v_strSql VARCHAR(4000):='';

 Cur_UniqueIndex RECORD;
 Cur_IndexColumns RECORD;
BEGIN
    FOR Cur_UniqueIndex IN (SELECT i.INDEX_NAME, i.TABLE_NAME, i.TABLESPACE_NAME, CONSTRAINT_TYPE
                 FROM USER_INDEXES I left join USER_CONSTRAINTS C1 on c1.INDEX_NAME=I.INDEX_NAME
                 WHERE UNIQUENESS='UNIQUE' AND INDEX_TYPE='NORMAL' AND TABLE_TYPE='TABLE'
               --AND CONSTRAINT_TYPE != 'U'
               ORDER BY INDEX_NAME)

    LOOP
      v_seqNo:=v_seqNo + 1;
      INSERT INTO AD_SCRIPT_SQL VALUES (v_seqNo, 'DROP INDEX '||Cur_UniqueIndex.INDEX_NAME) ;

      IF Cur_UniqueIndex.CONSTRAINT_TYPE != 'P' THEN
           v_strSql:='CREATE INDEX '||Cur_UniqueIndex.INDEX_NAME||' ON '||Cur_UniqueIndex.TABLE_NAME||'(';
           v_strTemp:='';
           FOR Cur_IndexColumns IN
             (SELECT COLUMN_NAME
           FROM USER_IND_COLUMNS
           WHERE INDEX_NAME=Cur_UniqueIndex.INDEX_NAME
           ORDER BY COLUMN_POSITION)
           LOOP
             v_strTemp:=v_strTemp ||','|| Cur_IndexColumns.COLUMN_NAME;
           END LOOP;
           v_strSql:=v_strSql || SUBSTR(v_strTemp, 2, 4000) || ') ';
           INSERT INTO AD_SCRIPT_SQL VALUES(v_seqNo+150000, v_strSql) ;
       END IF;
    END LOOP;
 RETURN v_seqNo;
END;   $$;


ALTER FUNCTION public.ad_script_drop_recreate_index(p_seqnostart numeric) OWNER TO tad;

--
-- Name: ad_script_enable_constraints(numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_script_enable_constraints(p_seqnostart numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
 v_seqNo      NUMERIC := p_seqNoStart;
 Cur_Constraints RECORD;
BEGIN
-- Make sure all foreign keys are satisfied
  FOR Cur_Constraints IN  (SELECT TABLE_NAME, CONSTRAINT_NAME, CONSTRAINT_TYPE, DELETE_RULE, COLUMN_NAMES, FK_TABLE, FK_COLUMN_NAMES, FK_MATCHTYPE
                           FROM USER_CONSTRAINTS C1
                           WHERE CONSTRAINT_TYPE = 'R'
                           --AND DELETE_RULE = 'C'
            ) LOOP
    v_seqNo := v_seqNo + 1;
    INSERT INTO AD_SCRIPT_SQL VALUES (v_seqNo+100000, 'DELETE FROM '||Cur_Constraints.TABLE_NAME||' WHERE '||Cur_Constraints.COLUMN_NAMES|| 
                    ' IS NOT NULL AND ' ||Cur_Constraints.COLUMN_NAMES|| 
                    ' IN (' ||
			' SELECT ' ||Cur_Constraints.COLUMN_NAMES || ' FROM ' || Cur_Constraints.TABLE_NAME || ' EXCEPT ' ||
			' SELECT ' ||Cur_Constraints.FK_COLUMN_NAMES || ' FROM ' || Cur_Constraints.FK_TABLE || ')'
                    );
  END LOOP;
 
 FOR Cur_Constraints IN  (SELECT TABLE_NAME, CONSTRAINT_NAME, CONSTRAINT_TYPE, DELETE_RULE, COLUMN_NAMES, FK_TABLE, FK_COLUMN_NAMES, FK_MATCHTYPE
                           FROM USER_CONSTRAINTS C1
                           WHERE CONSTRAINT_TYPE IN ('P','U','R')
                           --AND DELETE_RULE NOT LIKE 'C'
                           ORDER BY (CASE CONSTRAINT_TYPE WHEN 'R' THEN 3 WHEN 'U' THEN 2 WHEN 'P' THEN 1 END), TABLE_NAME, CONSTRAINT_NAME) LOOP
    v_seqNo := v_seqNo + 1;
   INSERT INTO AD_SCRIPT_SQL VALUES (v_seqNo+100000, 'ALTER TABLE '||Cur_Constraints.TABLE_NAME||' ADD CONSTRAINT '||Cur_Constraints.CONSTRAINT_NAME|| (CASE Cur_Constraints.CONSTRAINT_TYPE
     WHEN 'P' THEN '  PRIMARY KEY ('||Cur_Constraints.COLUMN_NAMES||')'
     WHEN 'U' THEN '  UNIQUE ('||Cur_Constraints.COLUMN_NAMES||')'
     WHEN 'R' THEN '  FOREIGN KEY ('||Cur_Constraints.COLUMN_NAMES||') REFERENCES '||Cur_Constraints.FK_TABLE||' ('||Cur_Constraints.FK_COLUMN_NAMES||') '||
                                (CASE Cur_Constraints.FK_MATCHTYPE WHEN 'f' THEN ' MATCH FULL' WHEN 'p' THEN ' MATCH PARTIAL' ELSE '' END) ||
                                (CASE Cur_Constraints.DELETE_RULE WHEN 'N' THEN ' ON DELETE SET NULL' WHEN 'D' THEN ' ON DELETE SET DEFAULT' WHEN 'C' THEN ' ON DELETE CASCADE' ELSE '' END)

     END));
  END LOOP;
  RETURN v_seqNo + 100001;
END;   $$;


ALTER FUNCTION public.ad_script_enable_constraints(p_seqnostart numeric) OWNER TO tad;

--
-- Name: ad_script_enable_triggers(numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_script_enable_triggers(p_seqnostart numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
 v_seqNo      NUMERIC := p_seqNoStart;
 Cur_Triggers RECORD;
BEGIN
 FOR Cur_Triggers IN (SELECT OBJECT_NAME AS NAME, TABLE_NAME
                      FROM USER_OBJECTS
                      WHERE OBJECT_TYPE = 'TRIGGER'
                      ORDER BY OBJECT_NAME) LOOP
      v_seqNo := v_seqNo + 1;
--    INSERT INTO AD_SCRIPT_SQL VALUES (v_seqNo, 'ALTER TRIGGER '||Cur_Triggers.NAME||' ENABLE');
    INSERT INTO AD_SCRIPT_SQL VALUES (v_seqNo+100000, 'ALTER TABLE  '||Cur_Triggers.TABLE_NAME||' ENABLE TRIGGER '||Cur_Triggers.NAME);
 END LOOP;
 RETURN v_seqNo;
END;   $$;


ALTER FUNCTION public.ad_script_enable_triggers(p_seqnostart numeric) OWNER TO tad;

--
-- Name: ad_script_execute(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_script_execute(param_message character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
 v_Message       VARCHAR(4000) := '';
 v_ResultStr     VARCHAR(2000) := '';
 Cur_Script RECORD;
BEGIN
 v_Message := param_Message;
 FOR Cur_Script IN (SELECT STRSQL FROM AD_SCRIPT_SQL ORDER BY SEQNO) LOOP
  BEGIN
    RAISE NOTICE '%', Cur_Script.STRSQL;
    EXECUTE(Cur_Script.STRSQL);
  EXCEPTION
     WHEN OTHERS THEN
        IF (LENGTH(v_ResultStr || ': ' || SQLERRM || ' - ' ) < 1980) THEN
          v_ResultStr := v_ResultStr || ': ' || SQLERRM || ' - ';
        END IF;
       RAISE NOTICE '%',SQLERRM;
  END;
 END LOOP;
 IF( LENGTH(v_ResultStr) > 0 ) THEN
    RAISE NOTICE '%', 'Script errors: ' || v_ResultStr;
 END IF;
 return substr(coalesce(v_ResultStr,'') || coalesce(v_Message,''), 1, 2000);
END;   $$;


ALTER FUNCTION public.ad_script_execute(param_message character varying) OWNER TO tad;

--
-- Name: ad_sequence_doc(character varying, character varying, character); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.ad_sequence_doc(p_sequencename character varying, p_ad_client_id character varying, p_update_next character, OUT p_documentno character varying) OWNER TO tad;

--
-- Name: ad_sequence_doctype(character varying, character varying, character); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ad_sequence_doctype(p_doctype_id character varying, p_id character varying, p_update_next character, OUT p_documentno character varying) OWNER TO tad;

--
-- Name: ad_sequence_next(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_sequence_next(p_tablename character varying, p_id character varying, OUT p_nextno character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: AD_Sequence_Next.sql,v 1.5 2003/08/06 06:51:27 jjanke Exp $
  ***
  * Title: Get the next sequence number of TableName
  * This procedure is mantained only for backwards compatibility purposes:
  * use instead get_uuid() function
  ************************************************************************/
BEGIN
   p_NextNo := get_uuid();
END ; $_$;


ALTER FUNCTION public.ad_sequence_next(p_tablename character varying, p_id character varying, OUT p_nextno character varying) OWNER TO tad;

--
-- Name: ad_sequence_nextno(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_sequence_nextno(p_tablename character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/******************************************************************************
* The contents of this file are subject to the   Compiere License  Version 1.1
* ("License"); You may not use this file except in compliance with the License
* You may obtain a copy of the License at http://www.compiere.org/license.html
* Software distributed under the License is distributed on an  "AS IS"  basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
* the specific language governing rights and limitations under the License.
* The Original Code is                  Compiere  ERP &  Business Solution
* The Initial Developer of the Original Code is Jorg Janke  and ComPiere, Inc.
* Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke, parts
* created by ComPiere are Copyright (C) ComPiere, Inc.;   All Rights Reserved.
* Contributor(s): Openbravo SL
* Contributions are Copyright (C) 2001-2008 Openbravo S.L.
******************************************************************************/
BEGIN
  RETURN get_uuid();
END ; $$;


ALTER FUNCTION public.ad_sequence_nextno(p_tablename character varying) OWNER TO tad;

--
-- Name: ad_shortname(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_shortname(p_name character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Title: AD_ShortName
************************************************************************/
  v_RetValue VARCHAR(2000) ; --OBTG:NVARCHAR2--
  v_pos NUMERIC:=1;
BEGIN
  v_RetValue:=SUBSTR(p_Name, 1, 1) ;
  WHILE(INSTR(REPLACE(p_Name, '.', ' '), ' ', v_pos+1) > 0)
  LOOP
    v_pos:=INSTR(REPLACE(p_Name, '.', ' '), ' ', v_pos+1) ;
    v_RetValue:=v_RetValue || SUBSTR(p_Name, v_pos+1, 1) ;
  END LOOP;
  RETURN v_RetValue;
EXCEPTION
WHEN OTHERS THEN
  RETURN TO_CHAR(v_pos) ;
END ; $$;


ALTER FUNCTION public.ad_shortname(p_name character varying) OWNER TO tad;

--
-- Name: FUNCTION ad_shortname(p_name character varying); Type: COMMENT; Schema: public; Owner: tad
--

COMMENT ON FUNCTION ad_shortname(p_name character varying) IS '--OBTG:AD_SHORTNAMEfunc=NVARCHAR,p_name=NVARCHAR--';


--
-- Name: ad_synchronize(character varying); Type: FUNCTION; Schema: public; Owner: tad
--


-- Name: ad_system_info_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_system_info_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_Count NUMERIC:= 0;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;



  SELECT COUNT(*) INTO v_Count FROM AD_SYSTEM_INFO;
  IF (v_Count <> 0) THEN
    RAISE EXCEPTION '%','Only one configuration permitted.'; --OBTG:-20529--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_system_info_trg() OWNER TO tad;

--
-- Name: ad_system_info_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_system_info_trg2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

exist NUMERIC:= 0;
indTempName VARCHAR(50) := 'System Customization'; --OBTG:NVARCHAR2--
indTempPackage VARCHAR(50) := 'mySystem.CustomizationTemplate'; --OBTG:NVARCHAR2--

    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  If old.customization_Allowed='N' and new.customization_Allowed='Y' then
  
    select count(*) into exist
    from AD_MODULE
    where TYPE = 'T'
    and ISINDEVELOPMENT = 'Y';
    
    if (exist > 0) then
      RAISE EXCEPTION '%','There is already an active Industry Template.'; --OBTG:-20631--
    else
      Insert into AD_MODULE (
        AD_MODULE_ID,AD_CLIENT_ID,AD_ORG_ID,ISACTIVE,CREATED,CREATEDBY,UPDATED,UPDATEDBY,
        NAME,VERSION,DESCRIPTION,
        HELP,
        URL,TYPE,LICENSE,
        ISINDEVELOPMENT,ISDEFAULT,SEQNO,JAVAPACKAGE,
        LICENSETYPE,AUTHOR,STATUS,UPDATE_AVAILABLE,ISTRANSLATIONREQUIRED,AD_LANGUAGE,HASCHARTOFACCOUNTS,
        ISTRANSLATIONMODULE,HASREFERENCEDATA,ISREGISTERED,UPDATEINFO,UPDATE_VER_ID) 
      values (
        get_uuid(),'0','0','Y',TO_DATE(NOW()),'0',TO_DATE(NOW()),'0',
        to_char(indTempName),'1.0.0', to_char(indTempName) || ' is an autogenerated industry template to store all the customizations made to module core.',
        to_char(indTempName) || ' is an autogenerated industry template to store all the customizations made to module core. Only one industry template can be active at the same time.',
        null,'T','The Openbravo Public License Version 1.1 ("OBPL") consists of the Mozilla Public License Version 1.1, modified to be specific to Openbravo, with the Additional Terms in Exhibit B. The original Mozilla Public License 1.1 can be found at: http://www.mozilla.org/MPL/MPL-1.1.html',
        'Y','N',null,to_char(indTempPackage),
        'OtherOS',null,null,null,'Y','en_US','N',
        'N','N',null,null,null);
    end if;
  end if;
  
  If (old.customization_Allowed='Y' and new.customization_Allowed='N') then
    delete from AD_MODULE
    where name = indTempName;
  end if;

IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_system_info_trg2() OWNER TO tad;


--
-- Name: ad_tab_import(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.ad_tab_import(p_pinstance_id character varying, p_ad_tab_id character varying) OWNER TO tad;

--
-- Name: ad_tab_import0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_tab_import0(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: AD_Tab_Import0.sql,v 1.2 2002/10/21 04:49:46 jjanke Exp $
  ***
  * Title: Import Field Definitions
  * Description:
  ************************************************************************/
BEGIN
 PERFORM AD_TAB_IMPORT(p_PInstance_ID, NULL);
END ; $_$;


ALTER FUNCTION public.ad_tab_import0(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ad_tab_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_tab_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Tab_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Tab_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.Help , '.') != COALESCE(OLD.Help , '.') OR
        COALESCE(NEW.AD_Table_ID , '.') != COALESCE(OLD.AD_Table_ID , '.') OR
        COALESCE(NEW.AD_Window_ID , '.') != COALESCE(OLD.AD_Window_ID , '.') OR
        COALESCE(NEW.SeqNo , 0) != COALESCE(OLD.SeqNo , 0) OR
        COALESCE(NEW.TabLevel , 0) != COALESCE(OLD.TabLevel , 0) OR
        COALESCE(NEW.IsSingleRow , '.') != COALESCE(OLD.IsSingleRow , '.') OR
        COALESCE(NEW.IsInfoTab , '.') != COALESCE(OLD.IsInfoTab , '.') OR
        COALESCE(NEW.IsTranslationTab , '.') != COALESCE(OLD.IsTranslationTab , '.') OR
        COALESCE(NEW.IsReadOnly , '.') != COALESCE(OLD.IsReadOnly , '.') OR
        COALESCE(NEW.AD_Column_ID , '.') != COALESCE(OLD.AD_Column_ID , '.') OR
        COALESCE(NEW.HasTree , '.') != COALESCE(OLD.HasTree , '.') OR
        COALESCE(NEW.WhereClause , '.') != COALESCE(OLD.WhereClause , '.') OR
        COALESCE(NEW.OrderByClause , '.') != COALESCE(OLD.OrderByClause , '.') OR
        COALESCE(NEW.CommitWarning , '.') != COALESCE(OLD.CommitWarning , '.') OR
        COALESCE(NEW.AD_Process_ID , '.') != COALESCE(OLD.AD_Process_ID , '.') OR
        COALESCE(NEW.Processing , '.') != COALESCE(OLD.Processing , '.') OR
        COALESCE(NEW.AD_Image_ID , '.') != COALESCE(OLD.AD_Image_ID , '.') OR
        COALESCE(NEW.ImportFields , '.') != COALESCE(OLD.ImportFields , '.') OR
        COALESCE(NEW.AD_ColumnSortOrder_ID , '.') != COALESCE(OLD.AD_ColumnSortOrder_ID , '.') OR
        COALESCE(NEW.AD_ColumnSortYesNo_ID , '.') != COALESCE(OLD.AD_ColumnSortYesNo_ID , '.') OR
        COALESCE(NEW.IsSortTab , '.') != COALESCE(OLD.IsSortTab , '.') OR
        COALESCE(NEW.Included_Tab_ID , '.') != COALESCE(OLD.Included_Tab_ID , '.') OR
        COALESCE(NEW.FilterClause , '.') != COALESCE(OLD.FilterClause , '.') OR
        COALESCE(NEW.EditReference , '.') != COALESCE(OLD.EditReference , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_tab_mod_trg() OWNER TO tad;

--
-- Name: ad_tab_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: ad_tab_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--


ALTER FUNCTION public.ad_tab_trg2() OWNER TO tad;

--
-- Name: ad_table_import(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--


ALTER FUNCTION public.ad_table_import(p_pinstance_id character varying, p_ad_table_id character varying) OWNER TO tad;

--
-- Name: ad_table_import0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_table_import0(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: AD_Table_Import0.sql,v 1.2 2002/10/21 04:49:46 jjanke Exp $
  ***
  * Title: Import Table Column Definition
  * Description:
  ************************************************************************/
BEGIN
  PERFORM AD_TABLE_IMPORT(p_PInstance_ID, NULL) ;
END ; $_$;


ALTER FUNCTION public.ad_table_import0(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ad_table_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_table_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Package_ID , '.') != COALESCE(OLD.AD_Package_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE M, AD_PACKAGE P
       WHERE M.AD_MODULE_ID = P.AD_Module_ID
        AND old.AD_Package_ID = p.ad_package_id
        AND M.isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Table_ID;
    cuerrentModuleID := new.AD_Package_ID;
  ELSE
    cuerrentID := old.AD_Table_ID;
    cuerrentModuleID := old.AD_Package_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M, AD_PACKAGE P
   WHERE M.AD_MODULE_ID = P.AD_MODULE_ID
     AND P.AD_PACKAGE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.Help , '.') != COALESCE(OLD.Help , '.') OR
        COALESCE(NEW.TableName , '.') != COALESCE(OLD.TableName , '.') OR
        COALESCE(NEW.IsView , '.') != COALESCE(OLD.IsView , '.') OR
        COALESCE(NEW.AccessLevel , '.') != COALESCE(OLD.AccessLevel , '.') OR
        COALESCE(NEW.AD_Window_ID , '.') != COALESCE(OLD.AD_Window_ID , '.') OR
        COALESCE(NEW.IsSecurityEnabled , '.') != COALESCE(OLD.IsSecurityEnabled , '.') OR
        COALESCE(NEW.IsDeleteable , '.') != COALESCE(OLD.IsDeleteable , '.') OR
        COALESCE(NEW.IsHighVolume , '.') != COALESCE(OLD.IsHighVolume , '.') OR
        COALESCE(NEW.ImportTable , '.') != COALESCE(OLD.ImportTable , '.') OR
        COALESCE(NEW.IsChangeLog , '.') != COALESCE(OLD.IsChangeLog , '.') OR
        COALESCE(NEW.PO_Window_ID , '.') != COALESCE(OLD.PO_Window_ID , '.') OR
        COALESCE(NEW.IsDefaultAcct , '.') != COALESCE(OLD.IsDefaultAcct , '.') OR
        COALESCE(NEW.Developmentstatus , '.') != COALESCE(OLD.Developmentstatus , '.') OR
        COALESCE(NEW.AD_Package_ID , '.') != COALESCE(OLD.AD_Package_ID , '.') 
        
        --SQL_Record_Identifier is not going to be exported
        ) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_table_mod_trg() OWNER TO tad;

--
-- Name: ad_table_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ad_table_trg() OWNER TO tad;


--
-- Name: ad_task_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_task_trg2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  v_ID_MAP     VARCHAR(32) ; --OBTG:VARCHAR2--
  v_WindowName VARCHAR(60):='ad_tasks'; --OBTG:VARCHAR2--
  v_ClassName  VARCHAR(60) ; --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF(TG_OP = 'UPDATE') THEN
    IF NOT((COALESCE(old.CLASSNAME, '.') <> COALESCE(NEW.CLASSNAME, '.')
   OR COALESCE(old.IsActive, '.') <> COALESCE(NEW.IsActive, '.')))
  THEN
      IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;
  END IF;
  IF(TG_OP = 'DELETE' OR TG_OP = 'UPDATE') THEN
    IF OLD.ISACTIVE='Y' AND OLD.CLASSNAME IS NOT NULL THEN
      DELETE
      FROM AD_MODEL_OBJECT_MAPPING
      WHERE AD_MODEL_OBJECT_ID IN
        (
        SELECT AD_MODEL_OBJECT_ID
        FROM AD_MODEL_OBJECT
        WHERE AD_MODEL_OBJECT.AD_TASK_ID=old.AD_TASK_ID
          AND ACTION='T'
        )
        ;
      DELETE
      FROM AD_MODEL_OBJECT
      WHERE ACTION='T'
        AND AD_MODEL_OBJECT.AD_TASK_ID=OLD.AD_TASK_ID;
    END IF;
  END IF;
  IF(TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
    IF NEW.ISACTIVE='Y' AND NEW.CLASSNAME IS NOT NULL THEN
      v_ClassName:=new.CLASSNAME;
      SELECT * INTO  v_ID FROM Ad_Sequence_Next('AD_Model_Object', new.AD_Client_ID) ;
      INSERT
      INTO AD_MODEL_OBJECT
        (
          AD_MODEL_OBJECT_ID, AD_CLIENT_ID, AD_ORG_ID,
          ISACTIVE, CREATED, CREATEDBY,
          UPDATED, UPDATEDBY, ACTION,
          AD_TASK_ID, CLASSNAME, ISDEFAULT
        )
        VALUES
        (
          v_ID, new.AD_CLIENT_ID, new.AD_ORG_ID,
           'Y', TO_DATE(NOW()), new.CREATEDBY,
          TO_DATE(NOW()), new.UPDATEDBY, 'T',
          new.AD_TASK_ID,  'org.openbravo.erpCommon.' || v_WindowName || '.' || v_ClassName, 'Y'
        )
        ;
      SELECT * INTO  v_ID_MAP FROM Ad_Sequence_Next('AD_Model_Object_Mapping', new.AD_Client_ID) ;
      INSERT
      INTO AD_MODEL_OBJECT_MAPPING
        (
          AD_MODEL_OBJECT_MAPPING_ID, AD_CLIENT_ID, AD_ORG_ID,
          ISACTIVE, CREATED, CREATEDBY,
          UPDATED, UPDATEDBY, AD_MODEL_OBJECT_ID,
          MAPPINGNAME, ISDEFAULT
        )
        VALUES
        (
          v_ID_MAP, new.AD_CLIENT_ID, new.AD_ORG_ID,
           'Y', TO_DATE(NOW()), new.CREATEDBY,
          TO_DATE(NOW()), new.UPDATEDBY, v_ID,
          ('/' || v_WindowName || '/' || v_ClassName || '.html'),
           'Y'
        )
        ;
    END IF;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_task_trg2() OWNER TO tad;

--
-- Name: ad_textinterfaces_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_textinterfaces_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;
    
  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Textinterfaces_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Textinterfaces_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Text , '.') != COALESCE(OLD.Text , '.') OR
        COALESCE(NEW.Filename , '.') != COALESCE(OLD.Filename , '.') OR
        COALESCE(NEW.Isused , '.') != COALESCE(OLD.Isused , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_textinterfaces_mod_trg() OWNER TO tad;

--
-- Name: ad_textinterfaces_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: ad_translate_id(character varying, numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_translate_id(p_id character varying, p_offset numeric, p_tablename character varying, p_columnname character varying, p_clientid character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Title: Return the value of the ID selected in the new client
************************************************************************/
  v_ID VARCHAR(32); --OBTG:VARCHAR2--
BEGIN
  IF(p_ID IS NOT NULL) THEN
    EXECUTE 'SELECT MAX('||p_columnName||') FROM '||p_tableName||' WHERE '||p_columnName||'='||p_ID||' AND AD_CLIENT_ID  ='||p_clientID INTO v_ID;
    IF(v_ID IS NULL) THEN
      v_ID:=p_ID;
    ELSE
      v_ID:=v_ID + p_offset;
    END IF;
  END IF;
  RETURN v_ID;
END ; $$;


ALTER FUNCTION public.ad_translate_id(p_id character varying, p_offset numeric, p_tablename character varying, p_columnname character varying, p_clientid character varying) OWNER TO tad;

--
-- Name: ad_tree_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ad_tree_trg() OWNER TO tad;

--
-- Name: ad_treenode_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_treenode_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  currentTree VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;



--Take into account just updates, because insertions and deletions are done
--by automatic processes

 
 
  IF currentTree='10' THEN --Check just for menu tree
    cuerrentID := new.AD_TreeNode_ID;
    currentTree := new.AD_Tree_ID;
 
    SELECT COUNT(*)
      INTO devTemplate
      FROM AD_MODULE
     WHERE IsInDevelopment = 'Y'
       AND Type = 'T';
       
  
    SELECT M.IsInDevelopment
      INTO devModule
      FROM AD_MODULE M, AD_MENU T
     WHERE M.AD_MODULE_ID = T.AD_MODULE_ID
       AND T.AD_MENU_ID = cuerrentModuleID;
       
    IF (devTemplate=0 AND devModule='N') THEN
      IF (
          COALESCE(NEW.AD_Tree_ID , '.') != COALESCE(OLD.AD_Tree_ID , '.') OR
          COALESCE(NEW.Node_ID , '.') != COALESCE(OLD.Node_ID , '.') OR
          COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
          COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
          COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
          COALESCE(NEW.Parent_ID , '.') != COALESCE(OLD.Parent_ID , '.') OR
          COALESCE(NEW.SeqNo , 0) != COALESCE(OLD.SeqNo , 0) OR
          1=2) THEN
        RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
      END IF;
    END IF;
  END IF;

IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_treenode_mod_trg() OWNER TO tad;

--
-- Name: ad_treenode_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_treenode_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 




/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
    /*************************************************************************
    * Title: Check in tg_op = 'INSERT' and tg_op = 'UPDATE' Accounting Report correction
    ************************************************************************/
  v_EqualAcctSchema NUMERIC;
  v_TreeType VARCHAR(60); --OBTG:VARCHAR2--
  v_IsReady AD_ORG.ISREADY%TYPE;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  --  Verify correct Account Schema for Accounting Reports
  IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN

    SELECT TREETYPE INTO v_TreeType
    FROM AD_TREE
    WHERE AD_TREE_ID = new.AD_TREE_ID;

    IF (v_TreeType='AR' AND new.parent_id<>'0') THEN

      SELECT COUNT(*) INTO v_EqualAcctSchema
      FROM AD_ACCOUNTINGRPT_ELEMENT parent, AD_ACCOUNTINGRPT_ELEMENT node
      WHERE parent.AD_ACCOUNTINGRPT_ELEMENT_ID = new.parent_id
      AND node.AD_ACCOUNTINGRPT_ELEMENT_ID = new.node_id
      AND parent.C_ACCTSCHEMA_ID = node.C_ACCTSCHEMA_ID;

      IF (v_EqualAcctSchema=0) THEN
        RAISE EXCEPTION '%','Wrong account schema parent'; --OBTG:-20517--
      END IF;
    END IF;
  END IF;
  
  IF (TG_OP = 'UPDATE' AND v_TreeType='OO' AND (old.parent_id <> new.parent_id)) THEN
    SELECT AD_Org.IsReady
    INTO v_IsReady
    FROM AD_Org
    WHERE AD_Org.AD_Org_ID=new.NODE_ID;
    
    IF (v_IsReady='Y') THEN
        RAISE EXCEPTION '%','A ready organization can not be moved into the tree structure'; --OBTG:-20543--
    END IF;
    
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_treenode_trg() OWNER TO tad;

--
-- Name: ad_update_access(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_update_access() RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2007-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
--AD_FORM_ACCESS
  INSERT INTO AD_Form_Access
    (
      AD_Form_Access_ID, AD_Form_ID, AD_Role_ID, AD_Client_ID,
      AD_Org_ID, IsActive, Created,
      CreatedBy, Updated, UpdatedBy, IsReadWrite
    )
  SELECT get_uuid(), AD_FORM.AD_FORM_ID, AD_ROLE.AD_ROLE_ID, AD_ROLE.AD_CLIENT_ID,
    AD_ROLE.AD_ORG_ID, 'Y', TO_DATE(NOW()),
    '0', TO_DATE(NOW()), '0', 'Y'
  FROM AD_FORM, AD_ROLE
  WHERE AD_ROLE.ISMANUAL = 'N'
    AND (
      (AD_ROLE.USERLEVEL = 'S' AND AD_FORM.ACCESSLEVEL IN ('4','7','6'))
      OR
      (AD_ROLE.USERLEVEL IN (' CO', ' C') AND AD_FORM.ACCESSLEVEL IN ('7','6','3','1'))
      OR
      (AD_ROLE.USERLEVEL = '  O' AND AD_FORM.ACCESSLEVEL IN ('3','1','7'))
    )
    AND NOT EXISTS (SELECT 1
                     FROM AD_FORM_ACCESS
                    WHERE AD_FORM_ID = AD_FORM.AD_FORM_ID
                      AND AD_ROLE_ID = AD_ROLE.AD_ROLE_ID);

--AD_PROCESS_ACCESS
  INSERT INTO AD_Process_Access
    (AD_Process_Access_ID, AD_Process_ID, AD_Role_ID, AD_Client_ID,
     AD_Org_ID, IsActive, Created,
     CreatedBy, Updated, UpdatedBy, IsReadWrite)
  SELECT get_uuid(), AD_PROCESS.AD_PROCESS_ID, AD_ROLE.AD_ROLE_ID, AD_ROLE.AD_CLIENT_ID,
    AD_ROLE.AD_ORG_ID, 'Y', TO_DATE(NOW()),
    '0', TO_DATE(NOW()), '0', 'Y'
  FROM AD_PROCESS, AD_ROLE
  WHERE AD_ROLE.ISMANUAL = 'N'
    AND (
      (AD_ROLE.USERLEVEL = 'S' AND AD_PROCESS.ACCESSLEVEL IN ('4','7','6'))
      OR
      (AD_ROLE.USERLEVEL IN (' CO', ' C') AND AD_PROCESS.ACCESSLEVEL IN ('7','6','3','1'))
      OR
      (AD_ROLE.USERLEVEL = '  O' AND AD_PROCESS.ACCESSLEVEL IN ('3','1','7'))
    )
    AND NOT EXISTS (SELECT 1 
                      FROM AD_PROCESS_ACCESS
                     WHERE AD_PROCESS_ID = AD_PROCESS.AD_PROCESS_ID
                       AND AD_ROLE_ID    = AD_ROLE.AD_ROLE_ID);

 --Add org 0 to role 0                
 INSERT INTO AD_Role_OrgAccess
    (
       AD_Role_OrgAccess_ID, AD_Role_ID, AD_Client_ID, AD_Org_ID,
      IsActive, Created, CreatedBy,
      Updated, UpdatedBy
    )
  SELECT get_uuid(), AD_ROLE.AD_ROLE_ID, AD_ORG.AD_CLIENT_ID, AD_ORG.AD_ORG_ID,
    'Y', TO_DATE(NOW()), '0',
    TO_DATE(NOW()), '0'
  FROM AD_ROLE, AD_ORG
  WHERE AD_ROLE.AD_ROLE_ID = '0'
    AND AD_ROLE.AD_CLIENT_ID = AD_ORG.AD_CLIENT_ID
    AND AD_ORG.AD_ORG_ID ='0'
    AND NOT EXISTS (SELECT 1 FROM AD_ROLE_ORGACCESS
                    WHERE AD_ROLE_ID = AD_ROLE.AD_ROLE_ID
                      AND AD_ORG_ID = AD_ORG.AD_ORG_ID);                      

--AD_TASK_ACCESS
  INSERT INTO AD_TASK_Access
    (AD_TASK_Access_ID, AD_TASK_ID, AD_Role_ID, AD_Client_ID,
     AD_Org_ID, IsActive, Created,
     CreatedBy, Updated, UpdatedBy, IsReadWrite)
  SELECT get_uuid(), AD_TASK.AD_TASK_ID, AD_ROLE.AD_ROLE_ID, AD_ROLE.AD_CLIENT_ID,
    AD_ROLE.AD_ORG_ID, 'Y', TO_DATE(NOW()),
    '0', TO_DATE(NOW()), '0', 'Y'
  FROM AD_TASK, AD_ROLE
  WHERE AD_ROLE.ISMANUAL = 'N'
    AND (
      (AD_ROLE.USERLEVEL = 'S' AND AD_TASK.ACCESSLEVEL IN ('4','7','6'))
      OR
      (AD_ROLE.USERLEVEL IN (' CO', ' C') AND AD_TASK.ACCESSLEVEL IN ('7','6','3','1'))
      OR
      (AD_ROLE.USERLEVEL = '  O' AND AD_TASK.ACCESSLEVEL IN ('3','1','7'))
    )
    AND NOT EXISTS (SELECT 1 
                       FROM AD_TASK_ACCESS
                      WHERE AD_TASK_ID = AD_TASK.AD_TASK_ID
                       AND AD_ROLE_ID = AD_ROLE.AD_ROLE_ID);

--AD_WINDOW_ACCESS
  INSERT INTO aD_Window_Access
    (
      aD_Window_Access_ID, AD_Window_ID, AD_Role_ID, AD_Client_ID,
      AD_Org_ID, IsActive, Created,
      CreatedBy, Updated, UpdatedBy, IsReadWrite
    )
  SELECT DISTINCT get_uuid(), AD_WINDOW.AD_WINDOW_ID, AD_ROLE.AD_ROLE_ID, AD_ROLE.AD_CLIENT_ID,
    AD_ROLE.AD_ORG_ID, 'Y', TO_DATE(NOW()),
    '0', TO_DATE(NOW()), '0', 'Y'
  FROM AD_WINDOW, AD_ROLE, AD_TAB, AD_TABLE
  WHERE AD_ROLE.ISMANUAL = 'N'
    AND AD_WINDOW.AD_WINDOW_ID = AD_TAB.AD_WINDOW_ID
    AND AD_TAB.AD_TABLE_ID = AD_TABLE.AD_TABLE_ID
    AND (
      (AD_ROLE.USERLEVEL = 'S' AND AD_TABLE.ACCESSLEVEL IN ('4','7','6'))
      OR
      (AD_ROLE.USERLEVEL IN (' CO', ' C') AND AD_TABLE.ACCESSLEVEL IN ('7','6','3','1'))
      OR
      (AD_ROLE.USERLEVEL = '  O' AND AD_TABLE.ACCESSLEVEL IN ('3','1','7'))
    )
    AND AD_TAB.SEQNO = (SELECT MIN(SEQNO) FROM AD_TAB t WHERE t.AD_WINDOW_ID = AD_WINDOW.AD_WINDOW_ID)
    AND NOT EXISTS (SELECT 1 
                       FROM AD_WINDOW_ACCESS
                      WHERE AD_WINDOW_ID = AD_WINDOW.AD_WINDOW_ID
                        AND AD_ROLE_ID = AD_ROLE.AD_ROLE_ID);

--AD_WORKFLOW_ACCESS
  INSERT INTO AD_WorkFlow_Access
    (
      AD_WorkFlow_Access_ID, AD_WorkFlow_ID, AD_Role_ID, AD_Client_ID,
      AD_Org_ID, IsActive, Created,
      CreatedBy, Updated, UpdatedBy,
      IsReadWrite
    )
  SELECT get_uuid(), AD_WORKFLOW.AD_WORKFLOW_ID, AD_ROLE.AD_ROLE_ID, AD_ROLE.AD_CLIENT_ID,
    AD_ROLE.AD_ORG_ID, 'Y', TO_DATE(NOW()),
    '0', TO_DATE(NOW()), '0', 'Y'
  FROM AD_WORKFLOW, AD_ROLE
  WHERE AD_ROLE.ISMANUAL = 'N'
    AND (
      (AD_ROLE.USERLEVEL = 'S' AND AD_WORKFLOW.ACCESSLEVEL IN ('4','7','6'))
      OR
      (AD_ROLE.USERLEVEL IN (' CO', ' C') AND AD_WORKFLOW.ACCESSLEVEL IN ('7','6','3','1'))
      OR
      (AD_ROLE.USERLEVEL = '  O' AND AD_WORKFLOW.ACCESSLEVEL IN ('3','1','7'))
    )
    AND NOT EXISTS (SELECT 1
                       FROM AD_WORKFLOW_ACCESS
                      WHERE AD_WORKFLOW_ID = AD_WORKFLOW.AD_WORKFLOW_ID
                        AND AD_ROLE_ID    = AD_ROLE.AD_ROLE_ID);
                        
  --Add role 0 to user 100 (Openbravo)
  INSERT INTO AD_USER_ROLES
    (AD_USER_ROLES_ID , AD_USER_ID , AD_ROLE_ID, 
     AD_CLIENT_ID     , AD_ORG_ID  , ISACTIVE  , 
     CREATED          , CREATEDBY  , UPDATED   , 
     UPDATEDBY) 
    SELECT get_uuid(), AD_USER_ID, '0',
           '0', '0', 'Y',
           TO_DATE(NOW()), '0', TO_DATE(NOW()),
           '0'
      FROM AD_USER
    WHERE AD_USER_ID IN ('0', '100')
    AND NOT EXISTS (SELECT 1
			FROM AD_USER_ROLES
			WHERE AD_USER_ID = AD_USER.AD_USER_ID
			AND AD_ROLE_ID = '0');
END ; $$;


ALTER FUNCTION public.ad_update_access() OWNER TO tad;

--
-- Name: ad_update_pinstance(character varying, character varying, character, numeric, character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: ad_update_sequence(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_update_sequence() RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
 BEGIN
   NULL;
   
   --do nothing, just maintained for bacward compatibility
END ; $$;


ALTER FUNCTION public.ad_update_sequence() OWNER TO tad;

--
-- Name: ad_update_table_identifier(character varying, character); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_update_table_identifier(p_pinstance_id character varying, quick character) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; -- 0=failure
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_count NUMERIC:=0;
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    v_sql VARCHAR(4000):=''; --OBTG:VARCHAR2--
    Cur_Tables RECORD;
  BEGIN
    --  Update AD_PInstance
    IF(p_PInstance_ID IS NOT NULL) THEN
      RAISE NOTICE '%','AD_Update_Table_Identifier - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
        FROM AD_PINSTANCE i
        LEFT JOIN AD_PINSTANCE_PARA p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_AD_User_ID:=Cur_Parameter.AD_User_ID;
        -- IF (Cur_Parameter.ParameterName = 'xx') THEN
        --  p_xx := Cur_Parameter.P_String;
        --  DBMS_OUTPUT.PUT_LINE('  xx=' || p_xx);
        -- ELSE
        --  DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName);
        --  END IF;
      END LOOP; -- Get Parameter
    END IF;
  BEGIN --BODY
    v_ResultStr:='ExecutingUpdates';
    FOR Cur_Tables IN
      (SELECT TABLENAME 
      FROM AD_TABLE t, 
           AD_SYSTEM_INFO SI
      WHERE EXISTS (SELECT 1 
                      FROM AD_COLUMN C 
                     WHERE T.AD_TABLE_ID = C.AD_TABLE_ID 
                       AND (C.UPDATED > SI.LAST_BUILD
                       OR COALESCE(QUICK,'N')='N')))
    LOOP
      v_sql:= Ad_Column_Identifier_Sql(Cur_Tables.TABLENAME) ;
      UPDATE AD_TABLE
        SET SQL_RECORD_IDENTIFIER=v_sql
      WHERE TABLENAME=Cur_Tables.TABLENAME;
      v_count:=v_count + 1;
    END LOOP;
    v_Message:='@Updated@: ' || v_count;
    ---- <<FINISH_PROCESS>>
    RAISE NOTICE '%','AD_Update_Table_Identifier - Finished ' || v_Message ;
    --  Update AD_PInstance
    IF(p_PInstance_ID IS NOT NULL) THEN
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
  RETURN;
END ; $$;


ALTER FUNCTION public.ad_update_table_identifier(p_pinstance_id character varying, quick character) OWNER TO tad;

--
-- Name: ad_val_rule_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_val_rule_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;
    
  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Val_Rule_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Val_Rule_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.Type , '.') != COALESCE(OLD.Type , '.') OR
        COALESCE(NEW.Code , '.') != COALESCE(OLD.Code , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_val_rule_mod_trg() OWNER TO tad;

--
-- Name: ad_wf_node_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_wf_node_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_WF_Node_ID;
    cuerrentModuleID := new.AD_WorkFlow_ID;
  ELSE
    cuerrentID := old.AD_WF_Node_ID;
    cuerrentModuleID := old.AD_WorkFlow_ID;
  END IF;
  
    SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M, AD_WORKFLOW T
   WHERE M.AD_MODULE_ID = T.AD_MODULE_ID
     AND T.AD_WORKFLOW_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.Help , '.') != COALESCE(OLD.Help , '.') OR
        COALESCE(NEW.AD_Workflow_ID , '.') != COALESCE(OLD.AD_Workflow_ID , '.') OR
        COALESCE(NEW.IsCentrallyMaintained , '.') != COALESCE(OLD.IsCentrallyMaintained , '.') OR
        COALESCE(NEW.Action , '.') != COALESCE(OLD.Action , '.') OR
        COALESCE(NEW.AD_Window_ID , '.') != COALESCE(OLD.AD_Window_ID , '.') OR
        COALESCE(NEW.Workflow_ID , '.') != COALESCE(OLD.Workflow_ID , '.') OR
        COALESCE(NEW.AD_Task_ID , '.') != COALESCE(OLD.AD_Task_ID , '.') OR
        COALESCE(NEW.AD_Process_ID , '.') != COALESCE(OLD.AD_Process_ID , '.') OR
        COALESCE(NEW.AD_Form_ID , '.') != COALESCE(OLD.AD_Form_ID , '.') OR
        COALESCE(NEW.Xposition , 0) != COALESCE(OLD.Xposition , 0) OR
        COALESCE(NEW.Yposition , 0) != COALESCE(OLD.Yposition , 0) OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_wf_node_mod_trg() OWNER TO tad;


--
-- Name: ad_wf_nodenext_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_wf_nodenext_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_WF_NodeNext_ID;
    cuerrentModuleID := old.AD_WF_NODE_ID;
  ELSE
    cuerrentID := old.AD_WF_NodeNext_ID;
    cuerrentModuleID := NEW.AD_WF_NODE_ID;
  END IF;
  
      SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M, AD_WORKFLOW T, AD_WF_NODE T1
   WHERE M.AD_MODULE_ID = T.AD_MODULE_ID
     AND T.AD_WORKFLOW_ID = T1.AD_WORKFLOW_ID
     AND T1.AD_WF_NODE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_WF_Node_ID , '.') != COALESCE(OLD.AD_WF_Node_ID , '.') OR
        COALESCE(NEW.AD_WF_Next_ID , '.') != COALESCE(OLD.AD_WF_Next_ID , '.') OR
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Condition , '.') != COALESCE(OLD.Condition , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_wf_nodenext_mod_trg() OWNER TO tad;

--
-- Name: ad_window_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_window_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
  
  --Check if trying to move object from module not in dev   
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Window_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Window_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.Help , '.') != COALESCE(OLD.Help , '.') OR
        COALESCE(NEW.WindowType , '.') != COALESCE(OLD.WindowType , '.') OR
        COALESCE(NEW.IsSOTrx , '.') != COALESCE(OLD.IsSOTrx , '.') OR
        COALESCE(NEW.Processing , '.') != COALESCE(OLD.Processing , '.') OR
        COALESCE(NEW.AD_Image_ID , '.') != COALESCE(OLD.AD_Image_ID , '.') OR
        COALESCE(NEW.IsDefault , '.') != COALESCE(OLD.IsDefault , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_window_mod_trg() OWNER TO tad;


--
-- Name: ad_window_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_window_trg2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
    --TYPE RECORD IS REFCURSOR;
  CUR_DATA RECORD;
  v_JavaPackage VARCHAR(260); --OBTG:VARCHAR2--
  v_ModuleMapping VARCHAR(260); --OBTG:VARCHAR2--
  v_TabName VARCHAR(260); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF((COALESCE(old.Name, '.') <> COALESCE(NEW.Name, '.')
  OR COALESCE(old.IsActive, '.') <> COALESCE(NEW.IsActive, '.')
  OR COALESCE(old.AD_Module_ID,'.') <> COALESCE(new.AD_Module_ID,'.')))
 THEN
    SELECT (CASE WHEN M.AD_MODULE_ID ='0' THEN NULL ELSE JavaPackage END)
      INTO  v_JavaPackage
      FROM AD_MODULE M
     WHERE AD_MODULE_ID = New.AD_Module_ID;
 

    IF v_JavaPackage IS NOT NULL THEN
      v_ModuleMapping := '/'||v_JavaPackage||'.';
      v_JavaPackage := v_JavaPackage||'.'||AD_MAPPING_FORMAT(TO_CHAR(NEW.NAME));
    ELSE
      v_ModuleMapping := '/';
      v_JavaPackage := AD_MAPPING_FORMAT(TO_CHAR(NEW.NAME));
    END IF;
    
    FOR CUR_DATA IN
      (
      SELECT MO.AD_MODEL_OBJECT_ID,
        AD_MAPPING_FORMAT(TO_CHAR(NEW.NAME)) AS WINDOWNAME,
        AD_MAPPING_FORMAT(TO_CHAR(T.NAME))  AS TABNAME,
        t.AD_Module_ID,
        t.AD_Tab_ID
      FROM AD_MODEL_OBJECT MO,
        AD_TAB T
      WHERE MO.AD_TAB_ID=T.AD_TAB_ID
        AND MO.ACTION='W'
        AND T.AD_WINDOW_ID=NEW.AD_WINDOW_ID
      )
    LOOP
      --Add tab's uuid to name for non-core tabs
      v_TabName := CUR_DATA.TABNAME;
      IF (CUR_DATA.AD_MODULE_ID!='0') THEN
        v_TabName := v_TabName||CUR_DATA.AD_Tab_ID;
      END IF;
      
      UPDATE AD_MODEL_OBJECT
        SET CLASSNAME=('org.openbravo.erpWindows.' || v_JavaPackage || '.' || CUR_DATA.TABNAME),
        ISACTIVE=NEW.ISACTIVE
      WHERE AD_MODEL_OBJECT_ID=CUR_DATA.AD_MODEL_OBJECT_ID
        and classname not like '%ComboReload%';
      UPDATE AD_MODEL_OBJECT_MAPPING
        SET MAPPINGNAME=(v_ModuleMapping || CUR_DATA.WINDOWNAME || '/' || CUR_DATA.TABNAME || '_Relation.html'),
        ISACTIVE=NEW.ISACTIVE
      WHERE AD_MODEL_OBJECT_ID=CUR_DATA.AD_MODEL_OBJECT_ID
        AND MAPPINGNAME LIKE '%_Relation.html';
      UPDATE AD_MODEL_OBJECT_MAPPING
        SET MAPPINGNAME=(v_ModuleMapping || CUR_DATA.WINDOWNAME || '/' || CUR_DATA.TABNAME || '_Edition.html'),
        ISACTIVE=NEW.ISACTIVE
      WHERE AD_MODEL_OBJECT_ID=CUR_DATA.AD_MODEL_OBJECT_ID
        AND MAPPINGNAME LIKE '%_Edition.html';
      UPDATE AD_MODEL_OBJECT_MAPPING
        SET MAPPINGNAME=(v_ModuleMapping || CUR_DATA.WINDOWNAME || '/' || CUR_DATA.TABNAME || '_Excel.xls'),
        ISACTIVE=NEW.ISACTIVE
      WHERE AD_MODEL_OBJECT_ID=CUR_DATA.AD_MODEL_OBJECT_ID
        AND MAPPINGNAME LIKE '%_Excel.xls';
    END LOOP;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_window_trg2() OWNER TO tad;


--
-- Name: ad_workflow_mod_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ad_workflow_mod_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMERIC;
  devModule   CHAR(1);
  cuerrentID  VARCHAR(32); --OBTG:VARCHAR2--
  cuerrentModuleID  VARCHAR(32); --OBTG:VARCHAR2--
  vAux NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  --Check if trying to move object from module not in dev
  IF (TG_OP = 'UPDATE') THEN
    IF (COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.')) THEN
      SELECT COUNT(*) 
        INTO vAux
        FROM AD_MODULE
       WHERE AD_MODULE_ID = old.AD_Module_ID
        AND isindevelopment = 'N';
      IF (vAux!=0) THEN
        RAISE EXCEPTION '%', '@ChangeNotInDevModule@'; --OBTG:-20000--
      END IF;
    END IF;
  END IF;

  SELECT COUNT(*)
    INTO devTemplate
    FROM AD_MODULE
   WHERE IsInDevelopment = 'Y'
     AND Type = 'T';
     
  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    cuerrentID := new.AD_Workflow_ID;
    cuerrentModuleID := new.AD_Module_ID;
  ELSE
    cuerrentID := old.AD_Workflow_ID;
    cuerrentModuleID := old.AD_Module_ID;
  END IF;
  
  SELECT M.IsInDevelopment
    INTO devModule
    FROM AD_MODULE M
   WHERE M.AD_MODULE_ID = cuerrentModuleID;
     
  IF (TG_OP = 'UPDATE' AND devTemplate=0 AND devModule='N') THEN
    IF (
        COALESCE(NEW.AD_Client_ID , '.') != COALESCE(OLD.AD_Client_ID , '.') OR
        COALESCE(NEW.AD_Org_ID , '.') != COALESCE(OLD.AD_Org_ID , '.') OR
        COALESCE(NEW.IsActive , '.') != COALESCE(OLD.IsActive , '.') OR
        COALESCE(NEW.Name , '.') != COALESCE(OLD.Name , '.') OR
        COALESCE(NEW.Description , '.') != COALESCE(OLD.Description , '.') OR
        COALESCE(NEW.Help , '.') != COALESCE(OLD.Help , '.') OR
        COALESCE(NEW.AccessLevel , '.') != COALESCE(OLD.AccessLevel , '.') OR
        COALESCE(NEW.AD_WF_Node_ID , '.') != COALESCE(OLD.AD_WF_Node_ID , '.') OR
        COALESCE(NEW.AD_Module_ID , '.') != COALESCE(OLD.AD_Module_ID , '.') OR
        1=2) THEN
      RAISE EXCEPTION '%', 'Cannot update an object in a module not in developement and without an active template'; --OBTG:-20532--
    END IF;
  END IF;
  
  IF ((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND devModule='N') THEN
    RAISE EXCEPTION '%', 'Cannot insert/delete objects in a module not in development.'; --OBTG:-20533--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.ad_workflow_mod_trg() OWNER TO tad;


--
-- Name: add_days(timestamp with time zone, integer); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION add_days(timestamp with time zone, integer) RETURNS date
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN cast($1 AS date) + $2 ;
END;
$_$;


ALTER FUNCTION public.add_days(timestamp with time zone, integer) OWNER TO tad;

--
-- Name: add_days(date, numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION add_days(date, numeric) RETURNS date
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN $1 + cast($2 AS INTEGER) ;
END;
$_$;


ALTER FUNCTION public.add_days(date, numeric) OWNER TO tad;

--
-- Name: add_days(timestamp with time zone, numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION add_days(timestamp with time zone, numeric) RETURNS date
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN cast($1 AS date) + cast($2 AS integer) ;
END;
$_$;


ALTER FUNCTION public.add_days(timestamp with time zone, numeric) OWNER TO tad;

--
-- Name: add_months(timestamp with time zone, integer); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION add_months(timestamp with time zone, integer) RETURNS timestamp with time zone
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
begin
    return $1 + to_interval($2,to_char('months'));

END;
$_$;


ALTER FUNCTION public.add_months(timestamp with time zone, integer) OWNER TO tad;

--
-- Name: add_months(date, numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION add_months(date, numeric) RETURNS timestamp with time zone
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
    return $1 + to_interval($2::INTEGER,to_char('months'));
END;
$_$;


ALTER FUNCTION public.add_months(date, numeric) OWNER TO tad;

--
-- Name: add_months(timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION add_months(timestamp without time zone, integer) RETURNS timestamp with time zone
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
    return $1 + to_interval($2,to_char('months'));
END;
$_$;


ALTER FUNCTION public.add_months(timestamp without time zone, integer) OWNER TO tad;

--
-- Name: add_months(timestamp without time zone, numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION add_months(timestamp without time zone, numeric) RETURNS timestamp with time zone
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
    return $1 + to_interval($2::INTEGER,to_char('months'));
END;
$_$;


ALTER FUNCTION public.add_months(timestamp without time zone, numeric) OWNER TO tad;

--
-- Name: at_command_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: at_test_copy(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION at_test_copy(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_AT_Test_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_NextNo VARCHAR(32); --OBTG:VARCHAR2--
    v_NoOfLines NUMERIC:=0;
    v_MaxSeqNo NUMERIC;
    Cur_Lines RECORD;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      IF(Cur_Parameter.ParameterName='AT_Test_ID') THEN
        v_AT_Test_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  AT_Test_ID=' || v_AT_Test_ID ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    SELECT CASE WHEN max(SeqNo) is NULL THEN 0 ELSE max(SeqNo)
      END
    INTO v_MaxSeqNo
    FROM AT_Line
    WHERE AT_Test_ID=v_Record_ID;
    -- Record_ID is the Test_ID to copy to
    v_ResultStr:='InsertLines';
    FOR Cur_Lines IN
      (SELECT *  FROM AT_LINE  WHERE AT_Test_ID=v_AT_Test_ID)
    LOOP
      -- Get next no
      SELECT * INTO  v_NextNo FROM AD_Sequence_Next('AT_Line', Cur_Lines.AD_Client_ID) ;
      -- Insert
      INSERT
      INTO AT_Line
        (
          AT_LINE_ID, AT_TEST_ID, AD_CLIENT_ID, AD_ORG_ID,
          ISACTIVE, CREATED, CREATEDBY, UPDATED, UPDATEDBY,
          AT_COMMAND_ID, SEQNO, ARG1, ARG2,
          ARG3, TYPE, CHILD_TEST, ARGNO,
          ARGHELP1, ARGHELP2, ARGHELP3
        )
        VALUES
        (v_NextNo, v_Record_ID, Cur_Lines.AD_CLIENT_ID, Cur_Lines.AD_ORG_ID,
        Cur_Lines.ISACTIVE, TO_DATE(NOW()), Cur_Lines.CREATEDBY, TO_DATE(NOW()),
        Cur_Lines.UPDATEDBY, Cur_Lines.AT_COMMAND_ID, Cur_Lines.SEQNO + v_MaxSeqNo, Cur_Lines.ARG1,
        Cur_Lines.ARG2, Cur_Lines.ARG3, Cur_Lines.TYPE, Cur_Lines.CHILD_TEST,
        Cur_Lines.ARGNO, Cur_Lines.ARGHELP1, Cur_Lines.ARGHELP2, Cur_Lines.ARGHELP3) ;
      v_NoOfLines:=v_NoOfLines + 1;
    END LOOP; -- Line
    v_Message:='@Copied@=' || v_NoOfLines || ' lines';
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $$;


ALTER FUNCTION public.at_test_copy(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: at_test_delete(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION at_test_delete(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_NoOfLines NUMERIC:=0;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    --Count number of lines
    SELECT count(*)
    INTO v_NoOfLines
    FROM AT_LINE
    WHERE AT_TEST_ID=v_Record_ID
    GROUP BY AT_TEST_ID;
    --Delete lines
    DELETE FROM AT_LINE  WHERE AT_TEST_ID=v_Record_ID;
    v_Message:='@Deleted@=' || v_NoOfLines || ' lines';
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $$;


ALTER FUNCTION public.at_test_delete(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_acctschema_default_copy(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_acctschema_default_copy(p_pinstance_id character varying, p_client_id character varying, p_acctschema_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_AcctSchema_Default_Copy.sql,v 1.2 2001/11/26 05:25:18 jjanke Exp $
  ***
  * Title: Copy Accounting Schema information to elements
  * Description:
  *   Existing entities are overwritten) cascade all!
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
 
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --
    v_AD_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_C_AcctSchema_ID VARCHAR(32); --OBTG:VARCHAR2--
    --
    Cur_Acct RECORD;
    --
    v_Updated NUMERIC:=0;
    v_Created NUMERIC:=0;
    v_Updated_Total NUMERIC:=0;
    v_Created_Total NUMERIC:=0;
    v_rowcount NUMERIC;
    v_count  NUMERIC;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      IF(Cur_Parameter.ParameterName='AD_Client_ID') THEN
        v_AD_Client_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  AD_Client_ID=' || v_AD_Client_ID ;
      ELSIF(Cur_Parameter.ParameterName='C_AcctSchema_ID') THEN
        v_C_AcctSchema_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  C_ACCTSCHEMA_ID=' || v_C_AcctSchema_ID ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    -- Direct Calls
    IF(p_Client_ID IS NOT NULL) THEN
      v_AD_Client_ID:=p_Client_ID;
      RAISE NOTICE '%','  AD_Client_ID=' || v_AD_Client_ID ;
    ELSIF(p_AcctSchema_ID IS NOT NULL) THEN
      v_C_AcctSchema_ID:=p_AcctSchema_ID;
      RAISE NOTICE '%','  C_ACCTSCHEMA_ID=' || v_C_AcctSchema_ID ;
    END IF;
    /**
    * For all Accounting Schema
    */
    FOR Cur_Acct IN
      (SELECT * FROM C_AcctSchema_Default WHERE AD_Client_ID=v_AD_Client_ID
      AND (C_AcctSchema_ID = v_C_AcctSchema_ID OR v_C_AcctSchema_ID IS NULL))
    LOOP
      -- Update existing Product Category
      UPDATE M_Product_Category_Acct
        SET P_Revenue_Acct=Cur_Acct.P_Revenue_Acct,
        P_Expense_Acct=Cur_Acct.P_Expense_Acct,
        P_Asset_Acct=Cur_Acct.P_Asset_Acct,
        P_CoGs_Acct=Cur_Acct.P_CoGs_Acct,
        P_PurchasePriceVariance_Acct=Cur_Acct.P_PurchasePriceVariance_Acct,
        P_InvoicePriceVariance_Acct=Cur_Acct.P_InvoicePriceVariance_Acct,
        P_TradeDiscountRec_Acct=Cur_Acct.P_TradeDiscountRec_Acct,
        P_TradeDiscountGrant_Acct=Cur_Acct.P_TradeDiscountGrant_Acct,
        Updated=TO_DATE(NOW()),
        UpdatedBy='0'
      WHERE M_Product_Category_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        AND EXISTS
        (SELECT *
        FROM M_Product_Category p
        WHERE p.M_Product_Category_ID=M_Product_Category_Acct.M_Product_Category_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Updated:=v_rowcount;
      -- Insert new Product Category
      INSERT
      INTO M_Product_Category_Acct
        (
          M_Product_Category_Acct_ID, M_Product_Category_ID, C_AcctSchema_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, P_Revenue_Acct, P_Expense_Acct, P_Asset_Acct,
          P_CoGs_Acct, P_PurchasePriceVariance_Acct, P_InvoicePriceVariance_Acct,
          P_TradeDiscountRec_Acct, P_TradeDiscountGrant_Acct
        )
      SELECT get_uuid(), p.M_Product_Category_ID, Cur_Acct.C_AcctSchema_ID, p.AD_Client_ID, p.AD_Org_ID,
        'Y', TO_DATE(NOW()), '0', TO_DATE(NOW()),
        '0', Cur_Acct.P_Revenue_Acct, Cur_Acct.P_Expense_Acct,
        Cur_Acct.P_Asset_Acct, Cur_Acct.P_CoGs_Acct, Cur_Acct.P_PurchasePriceVariance_Acct,
        Cur_Acct.P_InvoicePriceVariance_Acct, Cur_Acct.P_TradeDiscountRec_Acct, Cur_Acct.P_TradeDiscountGrant_Acct
      FROM M_Product_Category p
      WHERE AD_Client_ID=Cur_Acct.AD_Client_ID
        AND NOT EXISTS
        (SELECT *
        FROM M_Product_Category_Acct pa
        WHERE pa.M_Product_Category_ID=p.M_Product_Category_ID
          AND pa.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Created:=v_rowcount;
      RAISE NOTICE '%','Product Category = ' || v_Updated || ' / ' || v_Created ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
      -- Business Partner Group
      UPDATE C_BP_Group_Acct
        SET C_Receivable_Acct=Cur_Acct.C_Receivable_Acct,
        C_PrePayment_Acct=Cur_Acct.C_PrePayment_Acct,
        V_Liability_Acct=Cur_Acct.V_Liability_Acct,
        V_Liability_Services_Acct=Cur_Acct.V_Liability_Services_Acct,
        V_PrePayment_Acct=Cur_Acct.V_PrePayment_Acct,
        PayDiscount_Exp_Acct=Cur_Acct.PayDiscount_Exp_Acct,
        PayDiscount_Rev_Acct=Cur_Acct.PayDiscount_Rev_Acct,
        WriteOff_Acct=Cur_Acct.WriteOff_Acct,
        UnRealizedGain_Acct=Cur_Acct.UnRealizedGain_Acct,
        UnRealizedLoss_Acct=Cur_Acct.UnRealizedLoss_Acct,
        RealizedGain_Acct=Cur_Acct.RealizedGain_Acct,
        RealizedLoss_Acct=Cur_Acct.RealizedLoss_Acct,
        NotInvoicedReceipts_Acct=Cur_Acct.NotInvoicedReceipts_Acct,
        UnEarnedRevenue_Acct=Cur_Acct.UnEarnedRevenue_Acct,
        NotInvoicedRevenue_Acct=Cur_Acct.NotInvoicedRevenue_Acct,
        NotInvoicedReceivables_Acct=Cur_Acct.NotInvoicedReceivables_Acct,
        Updated=TO_DATE(NOW()),
        UpdatedBy='0'
      WHERE C_BP_Group_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        AND EXISTS
        (SELECT *
        FROM C_BP_Group_Acct x
        WHERE x.C_BP_Group_ID=C_BP_Group_Acct.C_BP_Group_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Updated:=v_rowcount;
      -- Insert new
      INSERT
      INTO C_BP_Group_Acct
        (
          C_BP_Group_Acct_ID, C_BP_Group_ID, C_AcctSchema_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, C_Receivable_Acct, C_PrePayment_Acct, V_Liability_Acct,
          V_Liability_Services_Acct, V_PrePayment_Acct, PayDiscount_Exp_Acct, PayDiscount_Rev_Acct,
          WriteOff_Acct, UnRealizedGain_Acct, UnRealizedLoss_Acct, RealizedGain_Acct,
          RealizedLoss_Acct, NotInvoicedReceipts_Acct, UnEarnedRevenue_Acct, NotInvoicedRevenue_Acct,
          NotInvoicedReceivables_Acct
        )
      SELECT get_uuid(), x.C_BP_Group_ID,
        Cur_Acct.C_AcctSchema_ID, x.AD_Client_ID, x.AD_Org_ID, 'Y',
        TO_DATE(NOW()), '0', TO_DATE(NOW()), '0',
        Cur_Acct.C_Receivable_Acct, Cur_Acct.C_PrePayment_Acct, Cur_Acct.V_Liability_Acct, Cur_Acct.V_Liability_Services_Acct,
        Cur_Acct.V_PrePayment_Acct, Cur_Acct.PayDiscount_Exp_Acct, Cur_Acct.PayDiscount_Rev_Acct, Cur_Acct.WriteOff_Acct,
        Cur_Acct.UnRealizedGain_Acct, Cur_Acct.UnRealizedLoss_Acct, Cur_Acct.RealizedGain_Acct, Cur_Acct.RealizedLoss_Acct,
        Cur_Acct.NotInvoicedReceipts_Acct, Cur_Acct.UnEarnedRevenue_Acct, Cur_Acct.NotInvoicedRevenue_Acct, Cur_Acct.NotInvoicedReceivables_Acct
      FROM C_BP_Group x
      WHERE AD_Client_ID=Cur_Acct.AD_Client_ID
        AND NOT EXISTS
        (SELECT *
        FROM C_BP_Group_Acct a
        WHERE a.C_BP_Group_ID=x.C_BP_Group_ID
          AND a.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Created:=v_rowcount;
      RAISE NOTICE '%','Business Group = ' || v_Updated || ' / ' || v_Created ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
      -- Business Partner - Employee
      UPDATE C_BP_Employee_Acct
        SET E_Expense_Acct=Cur_Acct.E_Expense_Acct,
        E_PrePayment_Acct=Cur_Acct.E_PrePayment_Acct,
        Updated=TO_DATE(NOW()),
        UpdatedBy='0'
      WHERE C_BP_Employee_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        AND EXISTS
        (SELECT *
        FROM C_BP_Employee_Acct x
        WHERE x.C_BPartner_ID=C_BP_Employee_Acct.C_BPartner_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Updated:=v_rowcount;
      -- Insert new
      INSERT
      INTO C_BP_Employee_Acct
        (
          C_BP_Employee_Acct_Id, C_BPartner_ID, C_AcctSchema_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, E_Expense_Acct, E_PrePayment_Acct
        )
      SELECT get_uuid(), x.C_BPartner_ID,
        Cur_Acct.C_AcctSchema_ID, x.AD_Client_ID, x.AD_Org_ID, 'Y',
        TO_DATE(NOW()), '0', TO_DATE(NOW()), '0',
        Cur_Acct.E_Expense_Acct, Cur_Acct.E_PrePayment_Acct
      FROM C_BPartner x
      WHERE AD_Client_ID=Cur_Acct.AD_Client_ID
        AND NOT EXISTS
        (SELECT *
        FROM C_BP_Employee_Acct a
        WHERE a.C_BPartner_ID=x.C_BPartner_ID
          AND a.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Created:=v_rowcount;
      RAISE NOTICE '%','Employees = ' || v_Updated || ' / ' || v_Created ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
      -- Warehouse
      UPDATE M_Warehouse_Acct
        SET W_Inventory_Acct=Cur_Acct.W_Inventory_Acct,
        W_Differences_Acct=Cur_Acct.W_Differences_Acct,
        W_Revaluation_Acct=Cur_Acct.W_Revaluation_Acct,
        W_InvActualAdjust_Acct=Cur_Acct.W_InvActualAdjust_Acct,
        Updated=TO_DATE(NOW()),
        UpdatedBy='0'
      WHERE M_Warehouse_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        AND EXISTS
        (SELECT *
        FROM M_Warehouse_Acct x
        WHERE x.M_Warehouse_ID=M_Warehouse_Acct.M_Warehouse_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Updated:=v_rowcount;
      -- Insert new
      INSERT
      INTO M_Warehouse_Acct
        (
          M_Warehouse_Acct_ID, M_Warehouse_ID, C_AcctSchema_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, W_Inventory_Acct, W_Differences_Acct, W_Revaluation_Acct,
          W_InvActualAdjust_Acct
        )
      SELECT get_uuid(), x.M_Warehouse_ID,
        Cur_Acct.C_AcctSchema_ID, x.AD_Client_ID, x.AD_Org_ID, 'Y',
        TO_DATE(NOW()), '0', TO_DATE(NOW()), '0',
        Cur_Acct.W_Inventory_Acct, Cur_Acct.W_Differences_Acct, Cur_Acct.W_Revaluation_Acct, Cur_Acct.W_InvActualAdjust_Acct
      FROM M_Warehouse x
      WHERE AD_Client_ID=Cur_Acct.AD_Client_ID
        AND NOT EXISTS
        (SELECT *
        FROM M_Warehouse_Acct a
        WHERE a.M_Warehouse_ID=x.M_Warehouse_ID
          AND a.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Created:=v_rowcount;
      RAISE NOTICE '%','Warehouse = ' || v_Updated || ' / ' || v_Created ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
      -- Project
      UPDATE C_Project_Acct
        SET PJ_Asset_Acct=Cur_Acct.PJ_Asset_Acct,
        PJ_WIP_Acct=Cur_Acct.PJ_Asset_Acct,
        Updated=TO_DATE(NOW()),
        UpdatedBy='0'
      WHERE C_Project_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        AND EXISTS
        (SELECT *
        FROM C_Project_Acct x
        WHERE x.C_Project_ID=C_Project_Acct.C_Project_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Updated:=v_rowcount;
      -- Insert new
      INSERT
      INTO C_Project_Acct
        (
          C_Project_Acct_ID, C_Project_ID, C_AcctSchema_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, PJ_Asset_Acct, PJ_WIP_Acct
        )
      SELECT get_uuid(), x.C_Project_ID,
        Cur_Acct.C_AcctSchema_ID, x.AD_Client_ID, x.AD_Org_ID, 'Y',
        TO_DATE(NOW()), '0', TO_DATE(NOW()), '0',
        Cur_Acct.PJ_Asset_Acct, Cur_Acct.PJ_WIP_Acct
      FROM C_Project x
      WHERE AD_Client_ID=Cur_Acct.AD_Client_ID
        AND NOT EXISTS
        (SELECT *
        FROM C_Project_Acct a
        WHERE a.C_Project_ID=x.C_Project_ID
          AND a.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Created:=v_rowcount;
      RAISE NOTICE '%','Project = ' || v_Updated || ' / ' || v_Created ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
      -- Tax
      UPDATE C_Tax_Acct
        SET T_Due_Acct=Cur_Acct.T_Due_Acct,
        T_Liability_Acct=Cur_Acct.T_Liability_Acct,
        T_Credit_Acct=Cur_Acct.T_Credit_Acct,
        T_Receivables_Acct=Cur_Acct.T_Receivables_Acct,
        T_Expense_Acct=Cur_Acct.T_Expense_Acct,
        Updated=TO_DATE(NOW()),
        UpdatedBy='0'
      WHERE C_Tax_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        AND EXISTS
        (SELECT * FROM C_Tax_Acct x WHERE x.C_Tax_ID=C_Tax_Acct.C_Tax_ID)
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Updated:=v_rowcount;
      -- Insert new
      INSERT
      INTO C_Tax_Acct
        (
          C_Tax_Acct_ID, C_Tax_ID, C_AcctSchema_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, T_Due_Acct, T_Liability_Acct, T_Credit_Acct,
          T_Receivables_Acct, T_Expense_Acct
        )
      SELECT get_uuid(), x.C_Tax_ID, Cur_Acct.C_AcctSchema_ID, x.AD_Client_ID, x.AD_Org_ID,
        'Y', TO_DATE(NOW()), '0', TO_DATE(NOW()), '0',
        Cur_Acct.T_Due_Acct, Cur_Acct.T_Liability_Acct, Cur_Acct.T_Credit_Acct, Cur_Acct.T_Receivables_Acct,
        Cur_Acct.T_Expense_Acct
      FROM C_Tax x
      WHERE AD_Client_ID=Cur_Acct.AD_Client_ID
        AND NOT EXISTS
        (SELECT *
        FROM C_Tax_Acct a
        WHERE a.C_Tax_ID=x.C_Tax_ID
          AND a.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Created:=v_rowcount;
      RAISE NOTICE '%','Tax = ' || v_Updated || ' / ' || v_Created ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
      -- BankAccount
      UPDATE C_BankAccount_Acct
        SET B_InTransit_Acct=Cur_Acct.B_InTransit_Acct,
        B_Asset_Acct=Cur_Acct.B_Asset_Acct,
        B_Expense_Acct=Cur_Acct.B_Expense_Acct,
        B_InterestRev_Acct=Cur_Acct.B_InterestRev_Acct,
        B_InterestExp_Acct=Cur_Acct.B_InterestExp_Acct,
        B_UnIdentified_Acct=Cur_Acct.B_UnIdentified_Acct,
        B_UnAllocatedCash_Acct=Cur_Acct.B_UnAllocatedCash_Acct,
        B_PaymentSelect_Acct=Cur_Acct.B_PaymentSelect_Acct,
        B_SettlementGain_Acct=Cur_Acct.B_SettlementGain_Acct,
        B_SettlementLoss_Acct=Cur_Acct.B_SettlementLoss_Acct,
        B_RevaluationGain_Acct=Cur_Acct.B_RevaluationGain_Acct,
        B_RevaluationLoss_Acct=Cur_Acct.B_RevaluationLoss_Acct,
        Updated=TO_DATE(NOW()),
        UpdatedBy='0'
      WHERE C_BankAccount_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        AND EXISTS
        (SELECT *
        FROM C_BankAccount_Acct x
        WHERE x.C_BankAccount_ID=C_BankAccount_Acct.C_BankAccount_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Updated:=v_rowcount;
      -- Insert new
      INSERT
      INTO C_BankAccount_Acct
        (
          C_BankAccount_Acct_ID, C_BankAccount_ID, C_AcctSchema_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated, UpdatedBy,
          B_InTransit_Acct, B_Asset_Acct, B_Expense_Acct, B_InterestRev_Acct,
          B_InterestExp_Acct, B_UnIdentified_Acct, B_UnAllocatedCash_Acct, B_PaymentSelect_Acct,
          B_SettlementGain_Acct, B_SettlementLoss_Acct, B_RevaluationGain_Acct, B_RevaluationLoss_Acct
        )
      SELECT get_uuid(), x.C_BankAccount_ID, Cur_Acct.C_AcctSchema_ID, x.AD_Client_ID, x.AD_Org_ID,
        'Y', TO_DATE(NOW()), '0', TO_DATE(NOW()),
        '0', Cur_Acct.B_InTransit_Acct, Cur_Acct.B_Asset_Acct, Cur_Acct.B_Expense_Acct,
        Cur_Acct.B_InterestRev_Acct, Cur_Acct.B_InterestExp_Acct, Cur_Acct.B_UnIdentified_Acct, Cur_Acct.B_UnAllocatedCash_Acct,
        Cur_Acct.B_PaymentSelect_Acct, Cur_Acct.B_SettlementGain_Acct, Cur_Acct.B_SettlementLoss_Acct, Cur_Acct.B_RevaluationGain_Acct,
        Cur_Acct.B_RevaluationLoss_Acct
      FROM C_BankAccount x
      WHERE AD_Client_ID=Cur_Acct.AD_Client_ID
        AND NOT EXISTS
        (SELECT *
        FROM C_BankAccount_Acct a
        WHERE a.C_BankAccount_ID=x.C_BankAccount_ID
          AND a.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Created:=v_rowcount;
      RAISE NOTICE '%','Bank Account = ' || v_Updated || ' / ' || v_Created ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
      -- Withholding
      UPDATE C_Withholding_Acct
        SET Withholding_Acct=Cur_Acct.Withholding_Acct,
        Updated=TO_DATE(NOW()),
        UpdatedBy='0'
      WHERE C_Withholding_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        AND EXISTS
        (SELECT *
        FROM C_Withholding_Acct x
        WHERE x.C_Withholding_ID=C_Withholding_Acct.C_Withholding_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Updated:=v_rowcount;
      -- Insert new
      INSERT
      INTO C_Withholding_Acct
        (
          C_Withholding_Acct_ID, C_Withholding_ID, C_AcctSchema_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, Withholding_Acct
        )
      SELECT get_uuid(), x.C_Withholding_ID, Cur_Acct.C_AcctSchema_ID, x.AD_Client_ID, x.AD_Org_ID,
        'Y', TO_DATE(NOW()), '0', TO_DATE(NOW()),
        '0', Cur_Acct.Withholding_Acct
      FROM C_Withholding x
      WHERE AD_Client_ID=Cur_Acct.AD_Client_ID
        AND NOT EXISTS
        (SELECT *
        FROM C_Withholding_Acct a
        WHERE a.C_Withholding_ID=x.C_Withholding_ID
          AND a.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Created:=v_rowcount;
      RAISE NOTICE '%','Withholding = ' || v_Updated || ' / ' || v_Created ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
      -- Charge
      UPDATE C_Charge_Acct
        SET Ch_Expense_Acct=Cur_Acct.Ch_Expense_Acct,
        Ch_Revenue_Acct=Cur_Acct.Ch_Revenue_Acct,
        Updated=TO_DATE(NOW()),
        UpdatedBy='0'
      WHERE C_Charge_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        AND EXISTS
        (SELECT * FROM C_Charge_Acct x WHERE x.C_Charge_ID=C_Charge_Acct.C_Charge_ID)
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Updated:=v_rowcount;
      -- Insert new
      INSERT
      INTO C_Charge_Acct
        (
          C_Charge_Acct_ID, C_Charge_ID, C_AcctSchema_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, Ch_Expense_Acct, Ch_Revenue_Acct
        )
      SELECT get_uuid(), x.C_Charge_ID,
        Cur_Acct.C_AcctSchema_ID, x.AD_Client_ID, x.AD_Org_ID, 'Y',
        TO_DATE(NOW()), '0', TO_DATE(NOW()), '0',
        Cur_Acct.Ch_Expense_Acct, Cur_Acct.Ch_Revenue_Acct
      FROM C_Charge x
      WHERE AD_Client_ID=Cur_Acct.AD_Client_ID
        AND NOT EXISTS
        (SELECT *
        FROM C_Charge_Acct a
        WHERE a.C_Charge_ID=x.C_Charge_ID
          AND a.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Created:=v_rowcount;
      RAISE NOTICE '%','Charge = ' || v_Updated || ' / ' || v_Created ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
      -- Cashbook
      UPDATE C_Cashbook_Acct
        SET CB_Asset_Acct=Cur_Acct.CB_Asset_Acct,
        CB_Differences_Acct=Cur_Acct.CB_Differences_Acct,
        CB_CashTransfer_Acct=Cur_Acct.CB_CashTransfer_Acct,
        CB_Expense_Acct=Cur_Acct.CB_Expense_Acct,
        CB_Receipt_Acct=Cur_Acct.CB_Receipt_Acct,
        Updated=TO_DATE(NOW()),
        UpdatedBy='0'
      WHERE C_Cashbook_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        AND EXISTS
        (SELECT *
        FROM C_Cashbook_Acct x
        WHERE x.C_Cashbook_ID=C_Cashbook_Acct.C_Cashbook_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Updated:=v_rowcount;
      -- Insert new
      INSERT
      INTO C_Cashbook_Acct
        (
          C_Cashbook_Acct_ID, C_Cashbook_ID, C_AcctSchema_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, CB_Asset_Acct, CB_Differences_Acct, CB_CashTransfer_Acct,
          CB_Expense_Acct, CB_Receipt_Acct
        )
      SELECT get_uuid(), x.C_Cashbook_ID,
        Cur_Acct.C_AcctSchema_ID, x.AD_Client_ID, x.AD_Org_ID, 'Y',
        TO_DATE(NOW()), '0', TO_DATE(NOW()), '0',
        Cur_Acct.CB_Asset_Acct, Cur_Acct.CB_Differences_Acct, Cur_Acct.CB_CashTransfer_Acct, Cur_Acct.CB_Expense_Acct,
        Cur_Acct.CB_Receipt_Acct
      FROM C_Cashbook x
      WHERE AD_Client_ID=Cur_Acct.AD_Client_ID
        AND NOT EXISTS
        (SELECT *
        FROM C_Cashbook_Acct a
        WHERE a.C_Cashbook_ID=x.C_Cashbook_ID
          AND a.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        )
        ;
      GET DIAGNOSTICS v_rowcount:=ROW_COUNT;
      v_Created:=v_rowcount;
      RAISE NOTICE '%','Cashbook = ' || v_Updated || ' / ' || v_Created ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
    END LOOP;
    v_Message:='@Created@=' || v_Created_Total || ', @Updated@=' || v_Updated_Total;
    ---- <<FINISH_PROCESS>>
    --Extension point for Transitory Account
    SELECT count(*) INTO v_count
   FROM DUAL
   where exists (select 1 from ad_ep_procedures where ad_extension_points_id = 'C13A8C820A9E437CA970FF46D6E00580');
         IF (v_count=1) THEN
                        DECLARE
                                v_ep_instance VARCHAR(32);        
                                v_extension_point_id VARCHAR(32) := 'C13A8C820A9E437CA970FF46D6E00580';
                         BEGIN
                                v_ep_instance := get_uuid();
                                PERFORM AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'AD_Client_ID',
                                v_AD_Client_ID, NULL, NULL, NULL, NULL, NULL, NULL); 
                                PERFORM AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'C_AcctSchema_ID',
                                v_C_AcctSchema_ID, NULL, NULL, NULL, NULL, NULL, NULL);
                                PERFORM AD_EXTENSION_POINT_HANDLER(v_ep_instance, v_extension_point_id);
                                DELETE FROM ad_ep_instance_para
                                WHERE ad_ep_instance_id = v_ep_instance;
                        END;
          END IF;
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $_$;


ALTER FUNCTION public.c_acctschema_default_copy(p_pinstance_id character varying, p_client_id character varying, p_acctschema_id character varying) OWNER TO tad;

--
-- Name: c_acctschema_default_copy(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_acctschema_default_copy(p_pinstance_id character varying, p_client_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 PERFORM C_ACCTSCHEMA_DEFAULT_COPY($1, $2, NULL);
END
; $_$;


ALTER FUNCTION public.c_acctschema_default_copy(p_pinstance_id character varying, p_client_id character varying) OWNER TO tad;

--
-- Name: c_acctschema_default_copy(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_acctschema_default_copy(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 PERFORM C_ACCTSCHEMA_DEFAULT_COPY($1, NULL);
END
; $_$;


ALTER FUNCTION public.c_acctschema_default_copy(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_acctschema_element_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_acctschema_element_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * Update Valid Combination
    * when element becomes mandatory
    **/
    v_UpdateIt BOOLEAN:=FALSE;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  -- Do we have to update
  IF(TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
    IF(new.IsMandatory='Y') THEN
      v_UpdateIt:=TRUE;
    END IF;
  END IF;
  --
  IF(v_UpdateIt) THEN
    IF(new.ElementType IN('OO', 'AC')) THEN
      NULL;
      -- Mandatory - no need
    ELSIF(new.ElementType='PR' AND new.M_Product_ID IS NOT NULL) THEN
      UPDATE C_ValidCombination
        SET M_Product_ID=new.M_Product_ID
      WHERE M_Product_ID IS NULL;
    ELSIF(new.ElementType='BP' AND new.C_BPartner_ID IS NOT NULL) THEN
      UPDATE C_ValidCombination
        SET C_BPartner_ID=new.C_BPartner_ID
      WHERE C_BPartner_ID IS NULL;
    ELSIF(new.ElementType='PJ' AND new.C_Project_ID IS NOT NULL) THEN
      UPDATE C_ValidCombination
        SET C_Project_ID=new.C_Project_ID
      WHERE C_Project_ID IS NULL;
    ELSIF(new.ElementType='OT' AND new.Org_ID IS NOT NULL) THEN
      UPDATE C_ValidCombination
        SET AD_OrgTrx_ID=new.Org_ID
      WHERE AD_OrgTrx_ID IS NULL;
    ELSIF(new.ElementType='LT' AND new.C_Location_ID IS NOT NULL) THEN
      UPDATE C_ValidCombination
        SET C_LocTo_ID=new.C_Location_ID
      WHERE C_LocTo_ID IS NULL;
    ELSIF(new.ElementType='LF' AND new.C_Location_ID IS NOT NULL) THEN
      UPDATE C_ValidCombination
        SET C_LocFrom_ID=new.C_Location_ID
      WHERE C_LocFrom_ID IS NULL;
    ELSIF(new.ElementType='SR' AND new.C_SalesRegion_ID IS NOT NULL) THEN
      UPDATE C_ValidCombination
        SET C_SalesRegion_ID=new.C_SalesRegion_ID
      WHERE C_SalesRegion_ID IS NULL;
    ELSIF(new.ElementType='MC' AND new.C_Campaign_ID IS NOT NULL) THEN
      UPDATE C_ValidCombination
        SET C_Campaign_ID=new.C_Campaign_ID
      WHERE C_Campaign_ID IS NULL;
    ELSIF(new.ElementType='AY' AND new.C_Activity_ID IS NOT NULL) THEN
      UPDATE C_ValidCombination
        SET C_Activity_ID=new.C_Activity_ID
      WHERE C_Activity_ID IS NULL;
    ELSIF(new.ElementType='U1' AND new.C_ElementValue_ID IS NOT NULL) THEN
      UPDATE C_ValidCombination
        SET User1_ID=new.C_ElementValue_ID
      WHERE User1_ID IS NULL;
    ELSIF(new.ElementType='U2' AND new.C_ElementValue_ID IS NOT NULL) THEN
      UPDATE C_ValidCombination
        SET User2_ID=new.C_ElementValue_ID
      WHERE User2_ID IS NULL;
    END IF;
  END IF;
  --
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_acctschema_element_trg() OWNER TO tad;

--
-- Name: c_acctschema_process_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_acctschema_process_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

  v_Count NUMERIC;
  v_Count2 NUMERIC;
  --TYPE RECORD IS REFCURSOR;
  cur_AcctSchemas RECORD;
  v_c_ACCTSCHEMA_ID c_acctschema.c_acctschema_id%type;
  
BEGIN
 
IF (NEW.ISDATASET='Y') THEN
  -- Present trigger manages the issue of inserting a row in c_acctschema_process
  --table with no value for the c_acctschema_id column. In that case, one row will
  --be inserted for each accounting schema of the client or organization.
  -- Main scenario for this situation is that a dataset of a module tries to 
  --insert a process for the accounting schema that is being created during an
  --initial client/organization setup.

  IF (NEW.C_ACCTSCHEMA_ID IS NULL) THEN
    SELECT COUNT(1)
    INTO v_Count
    FROM AD_ORG_ACCTSCHEMA
    WHERE AD_CLIENT_ID = NEW.AD_CLIENT_ID AND AD_ORG_ID = NEW.AD_ORG_ID;
    -- If there exists just one accounting schema for the organization, means trigger
    --is launched due to a initial organization setup, or entity module management
    IF (v_Count=1) THEN
      SELECT C_ACCTSCHEMA_ID
      INTO v_c_ACCTSCHEMA_ID
      FROM AD_ORG_ACCTSCHEMA
      WHERE AD_CLIENT_ID = NEW.AD_CLIENT_ID AND AD_ORG_ID = NEW.AD_ORG_ID;
    ELSIF (v_Count=0) THEN
      SELECT COUNT(1)
      INTO v_Count2
      FROM AD_ORG_ACCTSCHEMA
      WHERE AD_CLIENT_ID=NEW.AD_CLIENT_ID AND AD_ORG_ID='0';
      -- If there exists just one schema for the client, means trigger was launched
      --due to an initial client setup.
      IF (v_Count2=1) THEN
        SELECT C_ACCTSCHEMA_ID
        INTO v_c_ACCTSCHEMA_ID
        FROM AD_ORG_ACCTSCHEMA
        WHERE AD_CLIENT_ID = NEW.AD_CLIENT_ID AND AD_ORG_ID = NEW.AD_ORG_ID;
      ELSE
        -- No accounting schema was found!
        RAISE EXCEPTION '%','@NoAcctSchema@'; --OBTG:-20000--
      END IF;
    ELSIF (v_Count>1) THEN
      -- If there exists more than one accounting schema for the organization then
      --one row is inserted in c_acctschema_process for each schema of the organization
      --in except of one, which c_acctschema_id is assigned to the :new.c_acctschema_id
      SELECT MAX(C_ACCTSCHEMA_ID)
      INTO v_c_ACCTSCHEMA_ID
      FROM AD_ORG_ACCTSCHEMA
      WHERE AD_CLIENT_ID=NEW.AD_CLIENT_ID AND AD_ORG_ID=NEW.AD_ORG_ID;
      FOR cur_AcctSchemas IN
      (
      SELECT C_ACCTSCHEMA_ID
      FROM AD_ORG_ACCTSCHEMA
      WHERE AD_CLIENT_ID=NEW.AD_CLIENT_ID AND AD_ORG_ID=NEW.AD_ORG_ID
      )
      LOOP
        IF (cur_AcctSchemas.C_ACCTSCHEMA_ID <> v_c_ACCTSCHEMA_ID) THEN
          INSERT INTO C_ACCTSCHEMA_PROCESS (C_ACCTSCHEMA_PROCESS_ID, 
                                            C_ACCTSCHEMA_ID, 
                                            AD_CLIENT_ID, 
                                            AD_ORG_ID,
                                            ISACTIVE,
                                            AD_ACCTPROCESS_ID,
                                            SEQNO)
          VALUES (GET_UUID(),
                  cur_AcctSchemas.C_ACCTSCHEMA_ID,
                  NEW.AD_CLIENT_ID,
                  NEW.AD_ORG_ID,
                  NEW.ISACTIVE,
                  NEW.AD_ACCTPROCESS_ID,
                  NEW.SEQNO);
        END IF;
      END LOOP;
    END IF;
    NEW.C_ACCTSCHEMA_ID := v_c_ACCTSCHEMA_ID;
  END IF;
END IF;
  
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_acctschema_process_trg() OWNER TO tad;

--
-- Name: c_acctschema_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_acctschema_trg() OWNER TO tad;

--
-- Name: c_acctschemadel_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_acctschemadel_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 




    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2006 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/

    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  DELETE FROM C_ACCTSCHEMA_TABLE WHERE C_ACCTSCHEMA_ID=old.C_ACCTSCHEMA_ID;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_acctschemadel_trg() OWNER TO tad;

--
-- Name: c_add_months2(timestamp without time zone, numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_add_months2(pdate timestamp without time zone, pmonths numeric) RETURNS timestamp without time zone
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2007 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Description: This function is is similar to oracle's add_months function
*  In case the TIMESTAMP is i.e. 28/02/2007 this function will return 28/03/2007
*  while add_moths returns 31/03/2007
************************************************************************/
  pDateAux TIMESTAMP;
BEGIN
  if (last_day(pDate)!=pDate) then
    return add_months(pdate, pMonths);
  else
    pDateAux := add_months(pDate, pMonths);
    if (to_number(to_char(pDateAux,'DD'))>to_number(to_char(pDate,'DD'))) then
      return TO_DATE(to_char(pDate,'DD')||to_char(pDateAux,'-MM-YYYY'),'DD-MM-YYYY');
    else
      return pDateAux;
    end if;
  end if;
END ; $$;


ALTER FUNCTION public.c_add_months2(pdate timestamp without time zone, pmonths numeric) OWNER TO tad;

--
-- Name: c_aging_get_scope(timestamp without time zone, numeric, numeric, numeric, numeric); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_aging_get_scope(pdate timestamp without time zone, pcol1 numeric, pcol2 numeric, pcol3 numeric, pcol4 numeric) OWNER TO tad;

--
-- Name: c_bankaccount_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_bankaccount_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: C_BankAccount_Trg.sql,v 1.2 2002/01/04 04:29:54 jjanke Exp $
    ***
    * Title: New Accounting Defaults
    * Description:
    ************************************************************************/
    --TYPE RECORD IS REFCURSOR;
  Cur_Defaults RECORD;

BEGIN

    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF(TG_OP = 'INSERT') THEN
    FOR Cur_Defaults IN
      (
      SELECT *
      FROM C_AcctSchema_Default d
      WHERE EXISTS
        (
      SELECT 1
      FROM AD_Org_AcctSchema
      WHERE (AD_IsOrgIncluded(AD_Org_ID, new.AD_ORG_ID, new.AD_Client_ID)<>-1
          or AD_IsOrgIncluded(new.AD_ORG_ID, AD_Org_ID, new.AD_Client_ID)<>-1)
      AND IsActive = 'Y'
      AND AD_Org_AcctSchema.C_AcctSchema_ID = d.C_AcctSchema_ID
        )
      AND D.AD_CLIENT_ID = new.AD_Client_ID
      )
    LOOP
      INSERT
      INTO C_BankAccount_Acct
        (
          C_BankAccount_Acct_ID, C_BankAccount_ID, C_AcctSchema_ID, AD_Client_ID,
          AD_Org_ID, IsActive, Created,
          CreatedBy, Updated, UpdatedBy,
          B_InTransit_Acct, B_Asset_Acct, B_Expense_Acct,
          B_InterestRev_Acct, B_InterestExp_Acct, B_UnIdentified_Acct,
          B_SettlementGain_Acct, B_SettlementLoss_Acct, B_RevaluationGain_Acct,
          B_RevaluationLoss_Acct, B_PaymentSelect_Acct, B_UnallocatedCash_Acct
        )
        VALUES
        (
          get_uuid(), new.C_BankAccount_ID, Cur_Defaults.C_AcctSchema_ID, new.AD_Client_ID,
          new.AD_ORG_ID,  'Y', TO_DATE(NOW()),
          new.CreatedBy, TO_DATE(NOW()), new.UpdatedBy,
          Cur_Defaults.B_InTransit_Acct, Cur_Defaults.B_Asset_Acct, Cur_Defaults.B_Expense_Acct,
          Cur_Defaults.B_InterestRev_Acct, Cur_Defaults.B_InterestExp_Acct, Cur_Defaults.B_UnIdentified_Acct,
          Cur_Defaults.B_SettlementGain_Acct, Cur_Defaults.B_SettlementLoss_Acct, Cur_Defaults.B_RevaluationGain_Acct,
          Cur_Defaults.B_RevaluationLoss_Acct, Cur_Defaults.B_PaymentSelect_Acct, Cur_Defaults.B_UnallocatedCash_Acct
        )
        ;
    END LOOP;
  ELSIF (TG_OP = 'UPDATE') THEN
    UPDATE C_BANKACCOUNT_ACCT SET AD_ORG_ID = new.AD_ORG_ID
    WHERE C_BANKACCOUNT_ID = new.C_BANKACCOUNT_ID;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.c_bankaccount_trg() OWNER TO tad;

--
-- Name: c_bankaccountiban_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.c_bankaccountiban_trg() OWNER TO tad;

--
-- Name: c_bankcountry_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_bankcountry_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

  /*************************************************************************
  * The contents of this file are subject to the Openbravo  Public  License
  * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
  * Version 1.1  with a permitted attribution clause; you may not  use this
  * file except in compliance with the License. You  may  obtain  a copy of
  * the License at http://www.openbravo.com/legal/license.html
  * Software distributed under the License  is  distributed  on  an "AS IS"
  * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  * License for the specific  language  governing  rights  and  limitations
  * under the License.
  * The Original Code is Openbravo ERP.
  * The Initial Developer of the Original Code is Openbravo SL
  * All portions are Copyright (C) 2001-2008 Openbravo SL
  * All Rights Reserved.
  * Contributor(s):  ______________________________________.
  ************************************************************************/
  v_Count NUMERIC;
  v_OldCountry VARCHAR(32); --OBTG:NVARCHAR2--
  v_NewCountry VARCHAR(32); --OBTG:NVARCHAR2--
BEGIN
  IF AD_isTriggerEnabled()='N' THEN
    IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
  END IF;
  --  Default Accounts for all AcctSchema
  IF(TG_OP = 'UPDATE') THEN
    -- If Bank information is modified, must be checked that:
    -- 1: If a IBAN account was declared into this bank, the country of the bank still the same
    SELECT COUNT(IBAN)
    INTO v_Count
    FROM C_BANKACCOUNT
    WHERE C_BANK_ID=NEW.C_BANK_ID;
    
    IF (v_Count <> 0) THEN
      IF (NEW.C_LOCATION_ID IS NULL) THEN
        RAISE EXCEPTION '%', 'An IBAN account is defined for this bank. Country must not be changed.' ; --OBTG:-20259--
      END IF;
      SELECT C_COUNTRY_ID
      INTO v_OldCountry
      FROM C_LOCATION
      WHERE C_LOCATION_ID = OLD.C_LOCATION_ID;

      SELECT C_COUNTRY_ID
      INTO v_NewCountry
      FROM C_LOCATION
      WHERE C_LOCATION_ID = NEW.C_LOCATION_ID;
      
      IF (v_OldCountry <> v_NewCountry) THEN
        RAISE EXCEPTION '%', 'An IBAN account is defined for this bank. Country must not be changed.' ; --OBTG:-20259--
      END IF;
    END IF;

    -- 2: If an Spanish bank account was declared into this bank, nor bank code, nor branch code, nor digit control are null
    IF ((NEW.CODEBANK IS NULL) OR (NEW.CODEBRANCH IS NULL) OR (NEW.DIGITCONTROL IS NULL)) THEN
      SELECT COUNT(CODEACCOUNT)
      INTO v_Count
      FROM C_BANKACCOUNT
      WHERE C_BANK_ID=NEW.C_BANK_ID;
      IF (v_Count   <> 0) THEN
        RAISE EXCEPTION '%', 'An Spanish account is defined for this bank. Bank Code, Branch Code and Control Digit must be defined' ; --OBTG:-20265--
      END IF;
    END IF;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_bankcountry_trg() OWNER TO tad;


--
-- Name: c_bankstatement_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_bankstatement_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: C_BankStatement_Trg.sql,v 1.2 2003/01/27 06:22:11 jjanke Exp $
    ***
    * Title: RO check
    * Description:
    ************************************************************************/
        
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  IF(old.Processed='Y')
    THEN  RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.c_bankstatement_trg() OWNER TO tad;

--
-- Name: c_bankstatementline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


ALTER FUNCTION public.c_bankstatementline_trg() OWNER TO tad;

--
-- Name: c_base_convert(numeric, character varying, character varying, timestamp without time zone, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_base_convert(p_amount numeric, p_curfrom_id character varying, p_client_id character varying, p_convdate timestamp without time zone, p_org_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Compiere Public
* License 1.1 ("License"); You may not use this file except in
* compliance with the License. You may obtain a copy of the License in
* the legal folder of your Openbravo installation.
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing rights
* and limitations under the License.
* The Original Code is  Compiere  ERP &  Business Solution
* The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
* Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
* parts created by ComPiere are Copyright (C) ComPiere, Inc.;
* All Rights Reserved.
* Contributor(s): Openbravo SL
* Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
*
* Specifically, this derivative work is based upon the following Compiere
* file and version.
*************************************************************************
* $Id: C_Base_Convert.sql,v 1.6 2003/03/18 07:08:06 jjanke Exp $
***
* Title: Convert Amount to Base Currency of Client
* Description:
*  Get CurrencyTo from Client
*  Returns NULL, if conversion not found
*  Standard Rounding
* Test:
*  SELECT C_Base_Convert(100,116,11,null) FROM DUAL => 64.72
************************************************************************/
    v_CurTo_ID VARCHAR(32); --OBTG:VARCHAR2--
  BEGIN
    -- Get Currency
     SELECT c.C_Currency_ID
    INTO v_CurTo_ID
    FROM AD_Client c
    WHERE c.AD_Client_ID=p_Client_ID;
    -- Same as Currency_Conversion - if currency/rate not found - return 0
    IF(v_CurTo_ID IS NULL) THEN
      RETURN NULL;
    END IF;
    -- Same currency
    IF(p_CurFrom_ID=v_CurTo_ID) THEN
      RETURN p_Amount;
    END IF;
    RETURN C_Currency_Round(  C_Currency_Convert(p_Amount, p_CurFrom_ID, v_CurTo_ID, p_ConvDate, null, p_Client_ID, p_Org_ID), v_CurTo_ID, null) ;
END ; $_$;


ALTER FUNCTION public.c_base_convert(p_amount numeric, p_curfrom_id character varying, p_client_id character varying, p_convdate timestamp without time zone, p_org_id character varying) OWNER TO tad;

--
-- Name: c_base_convert(numeric, character varying, character varying, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_base_convert(p_amount numeric, p_curfrom_id character varying, p_client_id character varying, p_convdate timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
RETURN C_BASE_CONVERT ($1, $2, $3, $4, '0');
END
; $_$;


ALTER FUNCTION public.c_base_convert(p_amount numeric, p_curfrom_id character varying, p_client_id character varying, p_convdate timestamp without time zone) OWNER TO tad;

--
-- Name: c_bp_bankaccountiban_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_bp_bankaccountiban_trg() OWNER TO tad;

--
-- Name: c_bp_group_acct_copy(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_bp_group_acct_copy(p_pinstance_id character varying, p_bp_group_id character varying, p_c_acctschema_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2009 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_BP_Group_Acct_Copy.sql,v 1.4 2002/09/27 04:54:37 jjanke Exp $
  ***
  * Title: Copy Acct Info
  * Description:
  *  Copy Accounting Info to all Business Partner Account Info elements
  *  (existing entries are overwritten)
  ************************************************************************/
  -- Logistics
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_IsProcessing CHAR(1) ;
  v_IsProcessed VARCHAR(60) ;
  v_myResult NUMERIC:=1; -- Success
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --
    v_C_BP_Group_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_C_AcctSchema_ID VARCHAR(32); --OBTG:VARCHAR2--
    -- A Group can only have one client
    Cur_Acct RECORD;
    Cur_BPartner RECORD;
    Cur_BP RECORD;
    --
    v_Deleted NUMERIC:=0;
    v_Created NUMERIC:=0;
    rowcount NUMERIC;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, p.ParameterName, p.P_String,
        p.P_Number, P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      IF(Cur_Parameter.ParameterName='C_BP_Group_ID') THEN
        v_C_BP_Group_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  C_BP_Group_ID=' || v_C_BP_Group_ID ;
      ELSIF(Cur_Parameter.ParameterName='C_AcctSchema_ID') THEN
        v_C_AcctSchema_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  C_AcctSchema_ID=' || v_C_AcctSchema_ID ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    -- Direct Call
    IF(p_BP_Group_ID IS NOT NULL) THEN
      v_C_BP_Group_ID:=p_BP_Group_ID;
      RAISE NOTICE '%','  C_BP_Group_ID=' || v_C_BP_Group_ID ;
    ELSIF(p_C_AcctSchema_ID IS NOT NULL) THEN
      v_C_AcctSchema_ID:=p_C_AcctSchema_ID;
      RAISE NOTICE '%','  C_AcctSchema_ID=' || v_C_AcctSchema_ID ;
    END IF;

   DELETE FROM C_BP_Customer_Acct
    WHERE EXISTS (SELECT 1
                    FROM C_BPartner P
                   WHERE P.C_BPartner_ID = C_BP_Customer_Acct.C_BPartner_ID
                     AND P.C_BP_Group_ID = v_C_BP_Group_ID)
	AND (C_BP_Customer_Acct.C_AcctSchema_ID = v_C_AcctSchema_ID OR v_C_AcctSchema_ID IS NULL);
  GET DIAGNOSTICS  rowcount:=ROW_COUNT;
   v_Deleted := rowcount;

   DELETE FROM C_BP_Vendor_Acct
    WHERE EXISTS (SELECT 1
                    FROM C_BPartner P
                   WHERE P.C_BPartner_ID = C_BP_Vendor_Acct.C_BPartner_ID
                     AND P.C_BP_Group_ID = v_C_BP_Group_ID)
	AND (C_BP_Vendor_Acct.C_AcctSchema_ID = v_C_AcctSchema_ID OR v_C_AcctSchema_ID IS NULL);
  GET DIAGNOSTICS  rowcount:=ROW_COUNT;
   v_Deleted := v_Deleted + rowcount;

   FOR Cur_BP IN (SELECT P.C_BPartner_ID, P.AD_Client_ID, A.C_AcctSchema_ID,
                         P.AD_Org_ID, C_Receivable_Acct, C_PrePayment_Acct, A.Status
                    FROM C_BPARTNER P,
                         C_BP_GROUP_ACCT A
                   WHERE A.C_BP_GROUP_ID = P.C_BP_GROUP_ID
                     AND P.C_BP_Group_ID = v_C_BP_Group_ID
		     AND (A.C_AcctSchema_ID = v_C_AcctSchema_ID OR v_C_AcctSchema_ID IS NULL)
	             AND EXISTS (SELECT 1 FROM AD_Org_AcctSchema oa
			WHERE a.C_AcctSchema_ID = oa.C_AcctSchema_ID
			AND (AD_IsOrgIncluded(oa.AD_Org_ID, P.AD_Org_ID, P.AD_Client_ID)<>-1
			OR AD_IsOrgIncluded(P.AD_Org_ID, oa.AD_Org_ID, P.AD_Client_ID)<>-1))
		) LOOP
     INSERT INTO C_BP_Customer_Acct
           (C_BP_Customer_Acct_ID, C_BPartner_ID, C_AcctSchema_ID, AD_Client_ID,
            AD_Org_ID, IsActive, Created, CreatedBy,
            Updated, UpdatedBy, C_Receivable_Acct, C_PrePayment_Acct,
            Status)
       VALUES
           (get_uuid(), Cur_BP.C_BPartner_ID, Cur_BP.C_AcctSchema_ID, Cur_BP.AD_Client_ID,
            Cur_BP.AD_Org_ID,'Y', TO_DATE(NOW()), '0',
            TO_DATE(NOW()), '0', Cur_BP.C_Receivable_Acct, Cur_BP.C_PrePayment_Acct,
            Cur_BP.Status);
      GET DIAGNOSTICS  rowcount:=ROW_COUNT;
       v_Created := rowcount;
   END LOOP;


   FOR Cur_BP IN (SELECT P.C_BPartner_ID, P.AD_Client_ID, A.C_AcctSchema_ID,
                         P.AD_Org_ID, V_Liability_Acct, V_Liability_Services_Acct,
                         V_PrePayment_Acct, Status
                    FROM C_BPARTNER P,
                         C_BP_GROUP_ACCT A
                   WHERE A.C_BP_GROUP_ID = P.C_BP_GROUP_ID
                     AND P.C_BP_Group_ID = v_C_BP_Group_ID
		     AND (A.C_AcctSchema_ID = v_C_AcctSchema_ID OR v_C_AcctSchema_ID IS NULL)
	             AND EXISTS (SELECT 1 FROM AD_Org_AcctSchema oa
			WHERE a.C_AcctSchema_ID = oa.C_AcctSchema_ID
			AND (AD_IsOrgIncluded(oa.AD_Org_ID, P.AD_Org_ID, P.AD_Client_ID)<>-1
			OR AD_IsOrgIncluded(P.AD_Org_ID, oa.AD_Org_ID, P.AD_Client_ID)<>-1))
		) LOOP
     INSERT INTO C_BP_Vendor_Acct
           (C_BP_Vendor_Acct_ID, C_BPartner_ID, C_AcctSchema_ID, AD_Client_ID,
            AD_Org_ID, IsActive, Created, CreatedBy,
            Updated, UpdatedBy, V_Liability_Acct, V_Liability_Services_Acct,
            V_PrePayment_Acct, Status)
       VALUES
           (get_uuid(), Cur_BP.C_BPartner_ID, Cur_BP.C_AcctSchema_ID, Cur_BP.AD_Client_ID,
            Cur_BP.AD_Org_ID,'Y', TO_DATE(NOW()), '0',
            TO_DATE(NOW()), '0', Cur_BP.V_Liability_Acct, Cur_BP.V_Liability_Services_Acct,
            Cur_BP.V_PrePayment_Acct, Cur_BP.Status);
      GET DIAGNOSTICS  rowcount:=ROW_COUNT;
       v_Created := v_Created + rowcount;
   END LOOP;

    v_Message:='@Deleted@=' || v_Deleted || ', @Updated@=' || v_Created;
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished - ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_myResult, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $_$;


ALTER FUNCTION public.c_bp_group_acct_copy(p_pinstance_id character varying, p_bp_group_id character varying, p_c_acctschema_id character varying) OWNER TO tad;

--
-- Name: c_bp_group_acct_copy(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_bp_group_acct_copy(p_pinstance_id character varying, p_bp_group_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 PERFORM C_BP_GROUP_ACCT_COPY($1, $2, NULL);
END
; $_$;


ALTER FUNCTION public.c_bp_group_acct_copy(p_pinstance_id character varying, p_bp_group_id character varying) OWNER TO tad;

--
-- Name: c_bp_group_acct_copy(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_bp_group_acct_copy(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 PERFORM C_BP_GROUP_ACCT_COPY($1, NULL);
END
; $_$;


ALTER FUNCTION public.c_bp_group_acct_copy(p_pinstance_id character varying) OWNER TO tad;


--
-- Name: c_bp_salcategory_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: c_bp_salcategory_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_bp_salcategory_trg2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 


/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_count NUMERIC;
  v_dateFrom TIMESTAMP;
  v_cBPSalCategory VARCHAR(32); --OBTG:varchar2--

  --TYPE RECORD IS REFCURSOR;
  Cur_Employees RECORD;

    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;




  IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT' OR TG_OP = 'DELETE')  THEN

    FOR Cur_Employees IN (SELECT C_BPARTNER_ID
                          FROM C_BPARTNER
                          WHERE ISEMPLOYEE = 'Y') LOOP

    SELECT MAX(DATEFROM)
    INTO v_dateFrom
    FROM C_BP_SALCATEGORY
    WHERE C_BP_SALCATEGORY.C_BPARTNER_ID = Cur_Employees.C_BPARTNER_ID;

    v_cBPSalCategory := null;

    SELECT COUNT(*) INTO v_count
    FROM C_BP_SALCATEGORY
    WHERE C_BP_SALCATEGORY.C_BPARTNER_ID = Cur_Employees.C_BPARTNER_ID
    AND DATEFROM = v_dateFrom;

    IF (v_count<>0) THEN

      SELECT C_SALARY_CATEGORY_ID INTO v_cBPSalCategory
      FROM C_BP_SALCATEGORY
      WHERE C_BP_SALCATEGORY.C_BPARTNER_ID = Cur_Employees.C_BPARTNER_ID
      AND DATEFROM = v_dateFrom;

    END IF;

    UPDATE C_BPARTNER SET
    C_SALARY_CATEGORY_ID = v_cBPSalCategory
    WHERE C_BPARTNER.C_BPARTNER_ID = Cur_Employees.C_BPARTNER_ID;

    END LOOP;
  END IF;


IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_bp_salcategory_trg2() OWNER TO tad;

--
-- Name: c_bp_socreditused_refresh(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_bp_socreditused_refresh(p_bpartner_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
  UPDATE C_BPARTNER
    SET SO_CreditUsed=
    (SELECT  COALESCE(SUM(C_Base_Convert((Amount - WriteOffAmt), C_Currency_ID, AD_Client_ID, DocDate, AD_Org_ID)), 0) AS TOTAL
    FROM C_DEBT_PAYMENT_V
    WHERE C_BPartner_ID=p_BPartner_ID
      AND C_DEBT_PAYMENT_STATUS(C_SETTLEMENT_CANCEL_ID, Cancel_Processed, Generate_Processed, IsPaid, IsValid, C_CashLine_ID, C_BankStatementLine_ID)='P'
    )
  WHERE C_BPartner_ID=p_BPartner_ID;
END ; $$;


ALTER FUNCTION public.c_bp_socreditused_refresh(p_bpartner_id character varying) OWNER TO tad;

--
-- Name: c_bpartner_location_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



--
-- Name: c_bpartner_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: c_bstmt_chk_restrictions_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


ALTER FUNCTION public.c_bstmt_chk_restrictions_trg() OWNER TO tad;

--
-- Name: c_bstmtline_chk_restrict_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_bstmtline_chk_restrict_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 






    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2006 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
  v_Processed VARCHAR(60) ;
  v_Posted    VARCHAR(60) ;
  v_C_BANKSTATEMENT_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  v_DateNull TIMESTAMP := TO_DATE('01-01-1900', 'DD-MM-YYYY');
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF TG_OP = 'INSERT' THEN
    v_C_BANKSTATEMENT_ID:=NEW.C_BANKSTATEMENT_ID;
  ELSE
    v_C_BANKSTATEMENT_ID:=OLD.C_BANKSTATEMENT_ID;
  END IF;
  SELECT PROCESSED,
    POSTED
  INTO v_Processed,
    v_Posted
  FROM C_BANKSTATEMENT
  WHERE C_BANKSTATEMENT_ID=v_C_BANKSTATEMENT_ID;
  IF TG_OP = 'UPDATE' THEN
    IF(v_Processed='Y'
      AND ((COALESCE(OLD.LINE, 0) <> COALESCE(NEW.LINE, 0))
      OR(COALESCE(OLD.C_CHARGE_ID, '0') <> COALESCE(NEW.C_CHARGE_ID, '0'))
      OR(COALESCE(OLD.CHARGEAMT, 0) <> COALESCE(NEW.CHARGEAMT, 0))
      OR(COALESCE(OLD.STMTAMT, 0) <> COALESCE(NEW.STMTAMT, 0))
      OR(COALESCE(OLD.TRXAMT, 0) <> COALESCE(NEW.TRXAMT, 0))
      OR(COALESCE(OLD.C_DEBT_PAYMENT_ID, '0') <> COALESCE(NEW.C_DEBT_PAYMENT_ID, '0'))
      OR(COALESCE(old.AD_ORG_ID, '0') <> COALESCE(new.AD_ORG_ID, '0'))
      OR(COALESCE(old.AD_CLIENT_ID, '0') <> COALESCE(new.AD_CLIENT_ID, '0')) )) THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
    IF(v_Posted='Y' AND ((COALESCE(OLD.DATEACCT, v_DateNull) <> COALESCE(NEW.DATEACCT, v_DateNull)))) THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
  END IF;
  IF((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND v_Processed='Y') THEN
    RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_bstmtline_chk_restrict_trg() OWNER TO tad;

--
-- Name: c_budget_copy(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_budget_copy(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; --  Success
  v_BudgetFrom_ID VARCHAR(32); --OBTG:VARCHAR2--
  --  Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --  Record Info
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_User_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_BudgetLine_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Period_ID VARCHAR(32); --OBTG:VARCHAR2--
    Cur_BudgetLine RECORD;
  BEGIN
    v_Result:=1;
    --  Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String,
        p.P_Number, p.P_Date, p.AD_Org_ID, p.AD_Client_ID
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.AD_User_ID;
      v_Org_ID:=Cur_Parameter.AD_Org_ID;
      v_Client_ID:=Cur_Parameter.AD_Client_ID;
      IF(Cur_Parameter.ParameterName='C_Budget_ID') THEN
        v_BudgetFrom_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  BudgetFrom_ID=' || v_BudgetFrom_ID ;
      END IF;
    END LOOP; --  Get Parameter
    RAISE NOTICE '%','  v_Record_ID=' || v_Record_ID ;
    FOR Cur_BudgetLine IN
      (SELECT *  FROM C_BudgetLine  WHERE C_Budget_ID=v_BudgetFrom_ID)
    LOOP
      SELECT p1.C_Period_ID
      INTO v_Period_ID
      FROM C_Period p1,
        C_Period p2,
        C_Budget b
      WHERE p1.C_Year_ID=b.C_Year_ID
        AND b.C_Budget_ID=v_Record_ID
        AND p1.PeriodNo=p2.PeriodNo
        AND p2.C_Period_ID=Cur_BudgetLine.C_Period_ID;
      v_ResultStr:='InsertBudgetLines';
      SELECT * INTO  v_BudgetLine_ID FROM Ad_Sequence_Next('C_BudgetLine', v_Client_ID) ;
      INSERT
      INTO C_BudgetLine
        (
          C_Budgetline_ID, AD_Client_ID,
     AD_Org_ID, Isactive,
          Created, Createdby,
     Updated, Updatedby,
          C_ElementValue_ID, C_Period_ID,
          C_Currency_ID, C_Uom_ID,
          Qty, M_Product_ID,
          C_Bpartner_ID, AD_Orgtrx_ID,
          C_Salesregion_ID, C_Project_ID,
          C_Campaign_ID, C_Activity_ID,
          User1_ID, User2_ID,
          Description, Seqno,
          C_Bp_Group_ID, M_Product_Category_ID,
          C_Budget_ID, Amount,
          Price
        )
        VALUES
        (
          v_BudgetLine_ID, v_Client_ID,
          v_Org_ID, 'Y',
          TO_DATE(NOW()), v_User_ID,
          TO_DATE(NOW()), v_User_ID,
          Cur_BudgetLine.C_ElementValue_ID, v_Period_ID,
          Cur_BudgetLine.C_Currency_ID, Cur_BudgetLine.C_Uom_ID,
          Cur_BudgetLine.Qty, Cur_BudgetLine.M_Product_ID,
          Cur_BudgetLine.C_Bpartner_ID, Cur_BudgetLine.AD_Orgtrx_ID,
          Cur_BudgetLine.C_Salesregion_ID, Cur_BudgetLine.C_Project_ID,
          Cur_BudgetLine.C_Campaign_ID, Cur_BudgetLine.C_Activity_ID,
          Cur_BudgetLine.User1_ID, Cur_BudgetLine.User2_ID,
          Cur_BudgetLine.Description, Cur_BudgetLine.Seqno,
          Cur_BudgetLine.C_Bp_Group_ID, Cur_BudgetLine.M_Product_Category_ID,
          v_Record_ID, Cur_BudgetLine.Amount,
          Cur_BudgetLine.Price
        )
        ;
    END LOOP;
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished - ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, v_User_ID, 'N', v_Result, v_Message) ;
    RETURN;
EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    RAISE NOTICE '%',v_ResultStr ;
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END ; $$;


ALTER FUNCTION public.c_budget_copy(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_budgetline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_budgetline_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2009 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: A_ASSET_Trg.sql,v 1.4 2002/10/23 03:16:57 jjanke Exp $
    ***
    * Title: Asset new necord
    * Description:
    *    - create default Account records
    ************************************************************************/
  v_Type VARCHAR(60);
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF(TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
    SELECT BUDGET_TYPE
    INTO v_Type
    FROM C_BUDGET
    WHERE C_BUDGET_ID=NEW.C_BUDGET_ID;
    IF (v_Type ='F' AND (NEW.C_ACCTSCHEMA_ID IS NULL OR NEW.C_ELEMENTVALUE_ID IS NULL)) THEN
      RAISE EXCEPTION '%', 'Accounting information missing.'; --OBTG:-20270--
    END IF;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

EXCEPTION WHEN DATA_EXCEPTION THEN
  RAISE EXCEPTION '%', 'Accounting information missing.' ; --OBTG:-20270--
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.c_budgetline_trg() OWNER TO tad;

--
-- Name: c_calculate_catsalary(character varying, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_calculate_catsalary(pcbpartner character varying, pdate timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

vResult VARCHAR(32);
BEGIN

 SELECT c_salary_category_id INTO vResult
 FROM  c_bp_salcategory, (SELECT MAX(datefrom) AS datefrom
                          from c_bp_salcategory
                          where c_bpartner_id= pCBPartner
                          and datefrom<=pDate
                          order by datefrom desc ) AAA
 WHERE c_bp_salcategory.c_bpartner_id= pCBPartner
 AND c_bp_salcategory.datefrom = aaa.datefrom;

 RETURN vResult;
END ; $$;


ALTER FUNCTION public.c_calculate_catsalary(pcbpartner character varying, pdate timestamp without time zone) OWNER TO tad;

--
-- Name: c_calculatecost_catsalary(character varying, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_calculatecost_catsalary(pcatsal character varying, pdate timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

vResult NUMERIC;
BEGIN

 SELECT COST into vResult
         FROM  c_salary_category_cost, (SELECT MAX(datefrom) AS datefrom
		                                from c_salary_category_cost
										where c_salary_category_id= pCatSal
                                        and datefrom<=pDate
										order by datefrom desc ) AAA
 WHERE c_salary_category_cost.c_salary_category_id = pCatSal
 AND c_salary_category_cost.datefrom = aaa.datefrom;

 RETURN vResult;
END ; $$;


ALTER FUNCTION public.c_calculatecost_catsalary(pcatsal character varying, pdate timestamp without time zone) OWNER TO tad;

--
-- Name: c_cash_chk_restrictions_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_cash_chk_restrictions_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 






    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2006 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
    v_DateNull TIMESTAMP := TO_DATE('01-01-1900','DD-MM-YYYY');
        
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  IF TG_OP = 'UPDATE'
      THEN  IF(old.Processed='Y'
        AND ((COALESCE(old.STATEMENTDATE, v_DateNull) <> COALESCE(new.STATEMENTDATE, v_DateNull))
        OR(COALESCE(old.AD_ORGTRX_ID, '0') <> COALESCE(new.AD_ORGTRX_ID, '0'))
        OR(COALESCE(old.USER1_ID, '0') <> COALESCE(new.USER1_ID, '0'))
        OR(COALESCE(old.USER2_ID, '0') <> COALESCE(new.USER2_ID, '0'))
        OR(COALESCE(old.AD_ORG_ID, '0') <> COALESCE(new.AD_ORG_ID, '0'))
        OR(COALESCE(old.AD_CLIENT_ID, '0') <> COALESCE(new.AD_CLIENT_ID, '0')))) THEN
          RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
      END IF;
      IF(old.Posted='Y'
        AND ((COALESCE(old.DATEACCT, v_DateNull) <> COALESCE(new.DATEACCT, v_DateNull))
        OR(COALESCE(old.C_CAMPAIGN_ID, '0') <> COALESCE(new.C_CAMPAIGN_ID, '0'))
        OR(COALESCE(old.C_PROJECT_ID, '0') <> COALESCE(new.C_PROJECT_ID, '0'))
        OR(COALESCE(old.C_ACTIVITY_ID, '0') <> COALESCE(new.C_ACTIVITY_ID, '0')))) THEN
          RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
      END IF;
    END IF;

   IF(TG_OP = 'DELETE') THEN
    IF(old.Processed='Y') THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
   END IF;
   IF(TG_OP = 'INSERT') THEN
    IF(NEW.Processed='Y') THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
   END IF;
  IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_cash_chk_restrictions_trg() OWNER TO tad;

--
-- Name: c_cash_post(character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: c_cash_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_cash_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: C_Cash_Trg.sql,v 1.2 2002/07/06 03:01:56 jjanke Exp $
    ***
    * Title: Cash Trigger
    * Description:
    *  Truncate Statement Date
    *  Update Statement Balances when Beginning Balance chages
    ************************************************************************/
        
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


    -- Truncate Statement Date
    new.StatementDate:=TRUNC(new.StatementDate) ;
  -- Update StatementDifference
  IF TG_OP = 'UPDATE' THEN
    IF NEW.BeginningBalance <> OLD.BeginningBalance THEN
      SELECT COALESCE(SUM(Amount), 0)
      INTO new.StatementDifference
      FROM C_CashLine
      WHERE C_Cash_ID=new.C_Cash_ID;
      -- Update Ending Balance
      new.EndingBalance:=new.BeginningBalance + new.StatementDifference;
    END IF;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.c_cash_trg() OWNER TO tad;

--
-- Name: c_cashbook_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_cashbook_trg() OWNER TO tad;

--
-- Name: c_cashline_chk_restrict_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_cashline_chk_restrict_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 






    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2009 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
  v_Processed VARCHAR(60) ;
  v_C_CASH_ID VARCHAR(32) ; --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF TG_OP = 'INSERT' THEN
    v_C_CASH_ID:=NEW.C_CASH_ID;
  ELSE
    v_C_CASH_ID:=OLD.C_CASH_ID;
  END IF;
  SELECT PROCESSED INTO v_Processed FROM C_CASH WHERE C_CASH_ID=v_C_CASH_ID;
  IF TG_OP = 'UPDATE' THEN
    IF(v_Processed='Y'
      AND (
        (COALESCE(OLD.LINE, 0) <> COALESCE(NEW.LINE, 0))
        OR(COALESCE(OLD.C_CHARGE_ID, '0') <> COALESCE(NEW.C_CHARGE_ID, '0'))
        OR(COALESCE(OLD.CASHTYPE, '.') <> COALESCE(NEW.CASHTYPE, '.'))
        OR(COALESCE(OLD.AMOUNT, 0) <> COALESCE(NEW.AMOUNT, 0))
        OR(COALESCE(OLD.DISCOUNTAMT, 0) <> COALESCE(NEW.DISCOUNTAMT, 0))
        OR(COALESCE(OLD.WRITEOFFAMT, 0) <> COALESCE(NEW.WRITEOFFAMT, 0))
        OR(
          COALESCE(OLD.C_DEBT_PAYMENT_ID, '0') <> COALESCE(NEW.C_DEBT_PAYMENT_ID, '0')
          AND(OLD.C_ORDER_ID IS NULL))
        OR(COALESCE(OLD.C_ORDER_ID, '0') <> COALESCE(NEW.C_ORDER_ID, '0'))
        OR(COALESCE(old.AD_CLIENT_ID, '0') <> COALESCE(new.AD_CLIENT_ID, '0')))) THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
  END IF;
  IF((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND v_Processed='Y') THEN
    RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_cashline_chk_restrict_trg() OWNER TO tad;

--
-- Name: c_cashline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_cashline_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

  /*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_CashLine_Trg.sql,v 1.18 2003/03/17 20:32:24 jjanke Exp $
  ***
  * Title:  Manage Allocations
  * Description:
  *  Prevent changing invoice lines
  *  When Inserting and we have an invoice
  *   Create Allocation Line (Trigger updates C_BPartner.SO_CreditUsed)
  *  Update C_Currency_ID of line
  *  Update Cash Balance (Header)
  ****
 UPDATE C_CashLine cl SET C_Currency_ID = (SELECT C_Currency_ID FROM C_Invoice i WHERE i.C_Invoice_ID=cl.C_Invoice_ID) WHERE C_Currency_ID IS NULL AND C_Invoice_ID IS NOT NULL;
 UPDATE C_CashLine cl SET C_Currency_ID = (SELECT C_Currency_ID FROM C_BankAccount b WHERE b.C_BankAccount_ID=cl.C_BankAccount_ID) WHERE C_Currency_ID IS NULL AND C_BankAccount_ID IS NOT NULL;
 UPDATE C_CashLine cl SET C_Currency_ID = (SELECT b.C_Currency_ID FROM C_Cash c, C_CashBook b WHERE c.C_Cash_ID=cl.C_Cash_ID AND c.C_CashBook_ID=b.C_CashBook_ID) WHERE C_Currency_ID IS NULL;
 ************************************************************************/

 v_NextNo    VARCHAR(32); --OBTG:VARCHAR2--
 v_Currency_ID   VARCHAR(32) := NULL; --OBTG:varchar2--
 -- CashBook
 v_CB_Currency_ID  VARCHAR(32); --OBTG:varchar2--
 v_CB_Date    TIMESTAMP;
 --
 v_Difference NUMERIC:= 0;
 v_Client_ID   VARCHAR(32); --OBTG:varchar2--
 v_Org_ID    VARCHAR(32); --OBTG:varchar2--
 v_Cash_ID    VARCHAR(32); --OBTG:varchar2--
 v_Debt_Payment_ID  VARCHAR(32) := NULL; --OBTG:varchar2--
 v_RO     NUMERIC;
 --
 v_Trace     VARCHAR(2000) := 'CashLine: '; --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


 /** Cannot change generated invoice data  */
 /* Correction by I. Ciordia: tg_op = 'DELETE' and tg_op = 'UPDATE' generated cashlines is allowed. Control is transfered to cashPost
 IF (TG_OP = 'DELETE') THEN
   IF (old.C_Debt_Payment_ID IS NOT NULL
   AND old.IsGenerated = 'Y') THEN
  RAISE EXCEPTION '%', 'Cannot delete line with generated Invoice'; --OBTG:-20102--
 END IF;
 END IF;
 IF (TG_OP = 'UPDATE') THEN
   IF (old.C_Invoice_ID IS NOT NULL
   AND old.IsGenerated='Y' AND new.IsGenerated='Y') THEN
  RAISE EXCEPTION '%', 'Cannot change line with generated Invoice'; --OBTG:-20102--
 END IF;
 END IF;
 End correction ICiordia*/

 /**
  * Fill Variables
  */
 IF (TG_OP = 'DELETE' OR TG_OP = 'UPDATE') THEN
  v_Difference := v_Difference - old.Amount;
  v_Client_ID := old.AD_Client_ID;
  v_Org_ID := old.AD_Org_ID;
  v_Cash_ID := old.C_Cash_ID;
  v_Debt_Payment_ID := old.C_Debt_Payment_ID;
 END IF;
 IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
  v_Difference := v_Difference + new.Amount;
  v_Client_ID := new.AD_Client_ID;
  v_Org_ID := new.AD_Org_ID;
  v_Cash_ID := new.C_Cash_ID;
  v_Debt_Payment_ID := new.C_Debt_Payment_ID;
 END IF;


 -- Get CashBook Currenncy, Date
 SELECT cb.C_Currency_ID, c.DateAcct
   INTO v_CB_Currency_ID, v_CB_Date
 FROM C_CashBook cb, C_Cash c
 WHERE cb.C_CashBook_ID=c.C_CashBook_ID
   AND c.C_Cash_ID=v_Cash_ID;
 -- Get Invoice Currency
 IF (v_Debt_Payment_ID IS NOT NULL) THEN
  SELECT C_Currency_ID
    INTO v_Currency_ID
  FROM C_Debt_Payment
  WHERE C_Debt_Payment_ID = v_Debt_Payment_ID;
 END IF;

 -- Assume CashBook Currency for Charge
 IF (v_Currency_ID IS NULL) THEN
  v_Currency_ID := v_CB_Currency_ID;
 END IF;

-- v_Trace := v_Trace || ' Difference=' || v_Difference || ', Cash_ID=' || v_Cash_ID || ', Invoice_ID=' || v_Invoice_ID || ', Currency_ID=' || v_Currency_ID || ', CB_Currency_ID=' || v_CB_Currency_ID;
 /**
  * Update CashBook Line
  */
 IF (NOT TG_OP = 'DELETE') THEN
  new.C_Currency_ID := v_CB_Currency_ID;
 END IF;

 /**
  * Update CashBook Header
  */
 -- Convert to CashBook Currency
 IF (v_Currency_ID <> v_CB_Currency_ID) THEN
  v_Difference := C_Currency_Convert(v_Difference, v_Currency_ID, v_CB_Currency_ID, v_CB_Date, null, v_Client_ID, v_Org_ID);
 END IF;
 -- Update header
 UPDATE C_Cash
   SET StatementDifference = StatementDifference + v_Difference,
   EndingBalance = EndingBalance + v_Difference
 WHERE C_Cash_ID = v_Cash_ID;

-- v_Trace := v_Trace || ' > ' || SQL%ROWCOUNT || ' < Difference=' || v_Difference;
-- INSERT INTO AD_TRACE (What) VALUES (v_Trace);

IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.c_cashline_trg() OWNER TO tad;

--
-- Name: c_charge_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_charge_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * New Accounting Defaults
    */
    --TYPE RECORD IS REFCURSOR;
    Cur_Defaults RECORD;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF (TG_OP = 'INSERT') THEN
    FOR Cur_Defaults IN
      (
      SELECT *
      FROM C_AcctSchema_Default d
      WHERE EXISTS
        (
      SELECT 1 
      FROM AD_Org_AcctSchema
      WHERE AD_IsOrgIncluded(AD_Org_ID, new.AD_ORG_ID, new.AD_Client_ID)<>-1
      AND IsActive = 'Y'
      AND AD_Org_AcctSchema.C_AcctSchema_ID = d.C_AcctSchema_ID
        )
      )
    LOOP
      INSERT
      INTO C_Charge_Acct
        (
          C_Charge_ID, C_AcctSchema_ID, AD_Client_ID,
          AD_Org_ID, IsActive, Created,
          CreatedBy, Updated, UpdatedBy,
          CH_Expense_Acct, CH_Revenue_Acct
        )
        VALUES
        (
          new.C_Charge_ID, Cur_Defaults.C_AcctSchema_ID, new.AD_Client_ID,
          new.AD_ORG_ID,  'Y', TO_DATE(NOW()),
          new.CreatedBy, TO_DATE(NOW()), new.UpdatedBy,
          Cur_Defaults.CH_Expense_Acct, Cur_Defaults.CH_Revenue_Acct
        )
        ;
    END LOOP;
  ELSIF (TG_OP = 'UPDATE') THEN
    UPDATE C_CHARGE_ACCT SET AD_ORG_ID = new.AD_ORG_ID
    WHERE C_CHARGE_ID = new.C_CHARGE_ID;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_charge_trg() OWNER TO tad;

--
-- Name: c_chk_open_period(character varying, timestamp without time zone, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_chk_open_period(p_orgid character varying, p_date timestamp without time zone, p_doctype character varying, p_doctype_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Returns 1 if the period is opened for the selected organization, TIMESTAMP and doctype
************************************************************************/
  v_available_period NUMERIC:=0;
BEGIN
  -- Check the period control is opened
  
  IF (p_doctype_id IS NOT NULL) THEN
    SELECT COUNT(C_Period_ID)
    INTO v_available_period
    FROM C_Period
    WHERE p_date>=STARTDATE AND p_date<ENDDATE+1
    AND EXISTS (SELECT 1
                FROM C_PeriodControl
                WHERE C_PeriodControl.C_Period_ID=C_Period.C_Period_ID
                AND DocBaseType=(SELECT DocBaseType FROM C_DocType WHERE C_DocType_ID=p_doctype_id)
                AND AD_Org_ID=AD_ORG_GETPERIODCONTROLALLOW(p_orgid)
                AND PeriodStatus='O'
                );
  ELSIF (p_doctype IS NOT NULL) THEN
    SELECT COUNT(C_Period_ID)
    INTO v_available_period
    FROM C_Period
    WHERE p_date>=STARTDATE AND p_date<ENDDATE+1
    AND EXISTS (SELECT 1
                FROM C_PeriodControl
                WHERE C_PeriodControl.C_Period_ID=C_Period.C_Period_ID
                AND DocBaseType=p_doctype
                AND AD_Org_ID=AD_ORG_GETPERIODCONTROLALLOW(p_orgid)
                AND PeriodStatus='O'
                );
  ELSE 
    v_available_period:=0;
  END IF;
   
  RETURN v_available_period;
END ; $$;


ALTER FUNCTION public.c_chk_open_period(p_orgid character varying, p_date timestamp without time zone, p_doctype character varying, p_doctype_id character varying) OWNER TO tad;

--
-- Name: c_commission_copy(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_commission_copy(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_Commission_Copy.sql,v 1.2 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: Copy lines from another Commission
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    p_C_Commission_ID VARCHAR(32); --OBTG:VARCHAR2--
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      IF(Cur_Parameter.ParameterName='C_Commission_ID') THEN
        p_C_Commission_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  C_Commission_ID=' || p_C_Commission_ID ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    -- Copy Lines from p_C_Commission_ID to Record_ID
    DECLARE
      CUR_Commission RECORD;
      v_NextNo VARCHAR(32); --OBTG:VARCHAR2--
    BEGIN
      FOR CUR_Commission IN
        (SELECT *
        FROM C_CommissionLine
        WHERE C_Commission_ID=p_C_Commission_ID
          AND IsActive='Y'
        )
      LOOP
        v_ResultStr:='CopyLines';
        -- Get SeqNo
        SELECT * INTO  v_NextNo FROM AD_Sequence_Next('C_CommissionLine', CUR_Commission.AD_Client_ID) ;
        -- Insert
        INSERT
        INTO C_CommissionLine
          (
            C_CommissionLine_ID, C_Commission_ID,
            AD_Client_ID, AD_Org_ID,
            IsActive, Created,
            CreatedBy, Updated,
            UpdatedBy, Line,
            Description, AmtSubtract,
            AmtMultiplier, QtySubtract,
            QtyMultiplier, IsPositiveOnly,
            M_Product_Category_ID, M_Product_ID,
            C_BP_Group_ID, C_BPartner_ID,
            C_SalesRegion_ID
          )
          VALUES
          (
            v_NextNo, v_Record_ID,
            CUR_Commission.AD_Client_ID, CUR_Commission.AD_Org_ID,
             'Y', TO_DATE(NOW()),
            '0', TO_DATE(NOW()),
            '0', CUR_Commission.Line,
            CUR_Commission.Description, CUR_Commission.AmtSubtract,
            CUR_Commission.AmtMultiplier, CUR_Commission.QtySubtract,
            CUR_Commission.QtyMultiplier, CUR_Commission.IsPositiveOnly,
            CUR_Commission.M_Product_Category_ID, CUR_Commission.M_Product_ID,
            CUR_Commission.C_BP_Group_ID, CUR_Commission.C_BPartner_ID,
            CUR_Commission.C_SalesRegion_ID
          )
          ;
      END LOOP;
    END;
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $_$;


ALTER FUNCTION public.c_commission_copy(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_commission_process(character varying); Type: FUNCTION; Schema: public; Owner: tad
-- --> commission.sql

-- ALTER FUNCTION public.c_commission_process(p_pinstance_id character varying) OWNER TO tad;
-- --> commission.sql

--
-- Name: c_commissionamt_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_commissionamt_trg() OWNER TO tad;

--
-- Name: c_commissiondetail_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_commissiondetail_trg() OWNER TO tad;

--
-- Name: c_commissionrun_process(character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_commissionrun_process(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_conversion_rate_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_conversion_rate_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: C_Conversion_Rate_Trg.sql,v 1.3 2002/10/08 13:25:46 jjanke Exp $
    ***
    * Title: Set ToDate
    * Description:
    * If there is no valid ToDate set it to arbitrary end date
    ************************************************************************/
      v_Count NUMERIC;
      
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  --RAISE_APPLICATION_ERROR (-20506, 'Cannot modify used rate');
  IF(new.ValidTo IS NULL) THEN
    -- If there is no end date, set it to X
      new.ValidTo:=TO_DATE('31-12-9999', 'DD-MM-YYYY') ;
  END IF;
  --Check for invalid dates
  IF new.ValidTo < new.ValidFrom THEN
    RAISE EXCEPTION '%', 'Date To is lower than Date From'; --OBTG:-20505--
  END IF;

  IF TG_OP = 'UPDATE' THEN
     --Check for changes of used rates
    /*select count(*)
      into v_Count
      from c_bankstatement     b,
          c_bankstatementline bs,
          c_debt_payment      p
     where bs.c_debt_payment_id = p.c_debt_payment_id
       and b.c_bankstatement_id = bs.c_bankstatement_id
       and p.C_currency_id  = old.C_Currency_ID
      and bs.C_currency_id = old.C_Currency_ID_TO
      and b.StatementDate between old.ValidFrom and old.ValidTo
      and ((not (b.StatementDate between new.ValidFrom and new.ValidTo))
          or (new.C_Currency_ID    != old.C_Currency_ID)
        or (new.C_Currency_ID_To != old.C_Currency_ID_To)
        or (new.MultiplyRate     != old.MultiplyRate)
      )
      and processed ='Y';*/

    select count(*)
    into v_count
     from fact_acct    f,
         c_acctschema s
    where f.c_acctschema_id = s.c_acctschema_id
      and f.c_currency_id = old.C_Currency_ID
     and s.c_currency_id = old.C_Currency_ID_TO
     and f.dateacct between old.ValidFrom and old.ValidTo
     and ((not (f.dateacct between new.ValidFrom and new.ValidTo))
          or (new.C_Currency_ID    != old.C_Currency_ID)
        or (new.C_Currency_ID_To != old.C_Currency_ID_To)
        or (new.MultiplyRate     != old.MultiplyRate)
      );

    IF v_count>0 THEN
      RAISE EXCEPTION '%', 'Cannot modify used rate'; --OBTG:-20506--
    END IF;
  END IF;
  IF TG_OP = 'DELETE' THEN
    /*select count(*)
      into v_Count
      from c_bankstatement     b,
          c_bankstatementline bs,
          c_debt_payment      p
     where bs.c_debt_payment_id = p.c_debt_payment_id
       and b.c_bankstatement_id = bs.c_bankstatement_id
       and p.C_currency_id  = old.C_Currency_ID
      and bs.C_currency_id = old.C_Currency_ID_TO
      and b.StatementDate between old.ValidFrom and old.ValidTo
      and processed ='Y';*/
   select count(*)
    into v_count
     from fact_acct    f,
         c_acctschema s
    where f.c_acctschema_id = s.c_acctschema_id
      and f.c_currency_id = old.C_Currency_ID
     and s.c_currency_id = old.C_Currency_ID_TO
     and f.dateacct between old.ValidFrom and old.ValidTo;
    IF v_count>0 THEN
      RAISE EXCEPTION '%', 'Cannot modify used rate'; --OBTG:-20506--
    END IF;
  END IF;

IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.c_conversion_rate_trg() OWNER TO tad;

--
-- Name: c_conversion_rate_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_conversion_rate_trg2() OWNER TO tad;

--
-- Name: c_copy_project_lines(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_copy_project_lines(pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_NoOfLines NUMERIC:=0;
    v_NextNo VARCHAR(32); --OBTG:VARCHAR2--
    -- Copy
    Cur_ProjectLine RECORD;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    -- Record_ID is the Tab_ID to copy to
    v_ResultStr:='Copying';
    FOR Cur_ProjectLine IN
      (SELECT C_ProjectLine.*
      FROM C_ProjectLine,
        C_Project,
        C_ProjectProposal
      WHERE C_Project.C_PROJECT_ID=C_ProjectLine.C_PROJECT_ID
        AND C_Project.C_PROJECT_ID=C_ProjectProposal.C_PROJECT_ID
        AND C_ProjectProposal.C_PROJECTPROPOSAL_ID=v_Record_ID
      )
    LOOP
      -- Get next no
      SELECT * INTO  v_NextNo FROM AD_Sequence_Next('C_ProjectProposalLine', Cur_ProjectLine.AD_Client_ID) ;
      -- Insert
      INSERT
      INTO C_PROJECTPROPOSALLINE
        (
          C_PROJECTPROPOSALLINE_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE,
          CREATED, CREATEDBY, UPDATED, UPDATEDBY,
          C_PROJECTPROPOSAL_ID, LINENO, M_PRODUCT_ID, QTY,
          PRICE, DESCRIPTION, PRODUCT_VALUE, PRODUCT_NAME,
          PRODUCT_DESCRIPTION
        )
        VALUES
        (
          v_NextNo, Cur_ProjectLine.AD_Client_ID, Cur_ProjectLine.AD_Org_ID, Cur_ProjectLine.IsActive,
          TO_DATE(NOW()), '0', TO_DATE(NOW()), '0',
          v_Record_ID, Cur_ProjectLine.Line, Cur_ProjectLine.M_Product_ID, Cur_ProjectLine.PlannedQty,
          Cur_ProjectLine.PlannedPrice, Cur_ProjectLine.Description, Cur_ProjectLine.Product_Value, Cur_ProjectLine.Product_Name,
          Cur_ProjectLine.Product_Description
        )
        ;
      -- update translation
      --
      v_NoOfLines:=v_NoOfLines + 1;
    END LOOP;
    v_Message:='@Copied@=' || v_NoOfLines ;
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $$;


ALTER FUNCTION public.c_copy_project_lines(pinstance_id character varying) OWNER TO tad;

--
-- Name: c_country_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_country_trg() OWNER TO tad;

--
-- Name: c_create_pinvoice_from_outs(character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_create_pinvoice_from_outs(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_currency_convert(numeric, character varying, character varying, timestamp without time zone, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_currency_convert(p_amount numeric, p_curfrom_id character varying, p_curto_id character varying, p_convdate timestamp without time zone, p_ratetype character varying, p_client_id character varying, p_org_id character varying) OWNER TO tad;

--
-- Name: c_currency_convert(numeric, character varying, character varying, timestamp without time zone, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_currency_convert(p_amount numeric, p_curfrom_id character varying, p_curto_id character varying, p_convdate timestamp without time zone, p_ratetype character varying, p_client_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
RETURN C_CURRENCY_CONVERT ($1, $2, $3, $4, $5, $6, '0');
END
; $_$;


ALTER FUNCTION public.c_currency_convert(p_amount numeric, p_curfrom_id character varying, p_curto_id character varying, p_convdate timestamp without time zone, p_ratetype character varying, p_client_id character varying) OWNER TO tad;

--
-- Name: c_currency_convert(numeric, character varying, character varying, timestamp without time zone, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_currency_convert(p_amount numeric, p_curfrom_id character varying, p_curto_id character varying, p_convdate timestamp without time zone, p_ratetype character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
RETURN C_CURRENCY_CONVERT ($1, $2, $3, $4, $5, '0');
END
; $_$;


ALTER FUNCTION public.c_currency_convert(p_amount numeric, p_curfrom_id character varying, p_curto_id character varying, p_convdate timestamp without time zone, p_ratetype character varying) OWNER TO tad;

--
-- Name: c_currency_convert0(numeric, character varying, character varying, timestamp without time zone, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_currency_convert0(p_amount numeric, p_curfrom character varying, p_curto character varying, p_convdate timestamp without time zone, p_ratetype character varying, p_client_id character varying, p_org_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Compiere Public
* License 1.1 ("License"); You may not use this file except in
* compliance with the License. You may obtain a copy of the License in
* the legal folder of your Openbravo installation.
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing rights
* and limitations under the License.
* The Original Code is  Compiere  ERP &  Business Solution
* The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
* Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
* parts created by ComPiere are Copyright (C) ComPiere, Inc.;
* All Rights Reserved.
* Contributor(s): Openbravo SL
* Contributions are Copyright (C) 2001-2009 Openbravo, S.L.
*
* Specifically, this derivative work is based upon the following Compiere
* file and version.
*************************************************************************
* $Id: C_Currency_Convert0.sql,v 1.4 2003/03/17 20:32:24 jjanke Exp $
***
* Title: Convert Amount (using currency codes)
* Description:
*  from CurrencyFrom_ID to CurrencyTo_ID
*  standard precision
*  Returns NULL, if conversion not found
* Test:
*  SELECT C_Currency_Convert0(100,'CND','USD',null,null) FROM DUAL => 64.72
************************************************************************/
  v_CurFrom_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
  v_CurTo_ID   VARCHAR(32):=NULL; --OBTG:varchar2--
BEGIN
  -- Nothing to do
  IF(p_CurFrom=p_CurTo  OR p_Amount=0 OR p_Amount IS NULL) THEN
    RETURN p_Amount;
  END IF;
  -- Get Currency_ID
  SELECT MAX(C_Currency_ID)
  INTO v_CurFrom_ID
  FROM C_Currency
  WHERE ISO_Code=p_CurFrom;
  SELECT MAX(C_Currency_ID)
  INTO v_CurTo_ID
  FROM C_Currency
  WHERE ISO_Code=p_CurTo;
  -- Currency not found
  IF(v_CurFrom_ID IS NULL OR v_CurTo_ID IS NULL) THEN
    RETURN NULL;
  END IF;
  -- Convert it
  RETURN C_Currency_Convert(p_amount, v_CurFrom_ID, v_CurTo_ID, p_ConvDate, p_RateType, p_Client_ID, p_Org_ID) ;
END ; $_$;


ALTER FUNCTION public.c_currency_convert0(p_amount numeric, p_curfrom character varying, p_curto character varying, p_convdate timestamp without time zone, p_ratetype character varying, p_client_id character varying, p_org_id character varying) OWNER TO tad;

--
-- Name: c_currency_isosym(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_currency_isosym(p_currency_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.

* Test:
*  SELECT C_CURRENCY_ISOSYM('100') FROM DUAL => (USD-$)
************************************************************************/
  v_isocode VARCHAR(10); --OBTG:NVARCHAR2--
  v_symbol VARCHAR(10); --OBTG:NVARCHAR2--
  v_isosymbol VARCHAR(30); --OBTG:NVARCHAR2--
BEGIN
  v_isosymbol := '(';
  
  SELECT ISO_CODE, CURSYMBOL
  INTO v_isocode, v_symbol 
  FROM C_CURRENCY WHERE C_CURRENCY_ID = p_currency_id;

  IF (v_isocode IS NOT NULL AND v_symbol IS NOT NULL) THEN
      v_isosymbol := v_isosymbol || v_isocode || '-' || v_symbol;
  ELSIF (v_isocode IS NOT NULL) THEN
      v_isosymbol := v_isosymbol || v_isocode;
  ELSIF (v_symbol IS NOT NULL) THEN
      v_isosymbol := v_isosymbol || v_symbol;  
  END IF;

  v_isosymbol := v_isosymbol || ')';
  
  RETURN v_isosymbol;
END ; $_$;


ALTER FUNCTION public.c_currency_isosym(p_currency_id character varying) OWNER TO tad;

--
-- Name: c_currency_rate(character varying, character varying, timestamp without time zone, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_currency_rate(p_curfrom_id character varying, p_curto_id character varying, p_convdate timestamp without time zone, p_ratetype character varying, p_client_id character varying, p_org_id character varying) OWNER TO tad;

--
-- Name: c_currency_rate(character varying, character varying, timestamp without time zone, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_currency_rate(p_curfrom_id character varying, p_curto_id character varying, p_convdate timestamp without time zone, p_ratetype character varying, p_client_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
RETURN C_CURRENCY_RATE ($1, $2, $3, $4, $5, '0');
END
; $_$;


ALTER FUNCTION public.c_currency_rate(p_curfrom_id character varying, p_curto_id character varying, p_convdate timestamp without time zone, p_ratetype character varying, p_client_id character varying) OWNER TO tad;

--
-- Name: c_currency_rate(character varying, character varying, timestamp without time zone, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_currency_rate(p_curfrom_id character varying, p_curto_id character varying, p_convdate timestamp without time zone, p_ratetype character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
RETURN C_CURRENCY_RATE ($1, $2, $3, $4, '0');
END
; $_$;


ALTER FUNCTION public.c_currency_rate(p_curfrom_id character varying, p_curto_id character varying, p_convdate timestamp without time zone, p_ratetype character varying) OWNER TO tad;

--
-- Name: c_currency_round(numeric, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_currency_round(p_amount numeric, p_curto_id character varying, p_costing character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Compiere Public
* License 1.1 ("License"); You may not use this file except in
* compliance with the License. You may obtain a copy of the License in
* the legal folder of your Openbravo installation.
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing rights
* and limitations under the License.
* The Original Code is  Compiere  ERP &  Business Solution
* The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
* Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
* parts created by ComPiere are Copyright (C) ComPiere, Inc.;
* All Rights Reserved.
* Contributor(s): Openbravo SL
* Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
*
* Specifically, this derivative work is based upon the following Compiere
* file and version.
*************************************************************************
* $Id: C_Currency_Round.SQL,v 1.3 2003/03/17 20:32:24 jjanke Exp $
***
* Title: Round amount for Traget Currency
* Description:
*  Round Amount using Costing or Standard Precision
*  Returns unmodified amount if currency not found
* Test:
*  SELECT C_Currency_Round(C_Currency_Convert(100,116,100,null,null),100,null) FROM DUAL => 64.72
************************************************************************/
  v_StdPrecision  NUMERIC;
  v_CostPrecision NUMERIC;
BEGIN
  -- Nothing to convert
  IF(p_Amount IS NULL OR p_CurTo_ID IS NULL) THEN
    RETURN p_Amount;
  END IF;
  -- Ger Precision
  SELECT MAX(StdPrecision),
    MAX(CostingPrecision)
  INTO v_StdPrecision,
    v_CostPrecision
  FROM C_Currency
  WHERE C_Currency_ID = p_CurTo_ID;
  -- Currency Not Found
  IF(v_StdPrecision IS NULL) THEN
    RETURN p_Amount;
  END IF;
  IF(p_Costing = 'Y') THEN
    RETURN ROUND(p_Amount, v_CostPrecision) ;
  END IF;
  RETURN ROUND(p_Amount, v_StdPrecision) ;
END ; $_$;


ALTER FUNCTION public.c_currency_round(p_amount numeric, p_curto_id character varying, p_costing character varying) OWNER TO tad;

--
-- Name: c_currency_symbol(character varying, numeric, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_currency_symbol(p_currency_id character varying, p_amount numeric, p_onlysymbol character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.

* Test:
*  SELECT C_CURRENCY_SYMBOL('100', 20000, 'N') FROM DUAL => $ 20000
*  SELECT C_CURRENCY_SYMBOL('102', 20000, 'Y') FROM DUAL => €
************************************************************************/
  v_issymbolright CHAR(1);
  v_symbol VARCHAR(10); --OBTG:NVARCHAR2--
  v_isocode VARCHAR(10); --OBTG:NVARCHAR2--
  v_amountsymbol VARCHAR(60); --OBTG:NVARCHAR2--
BEGIN
  v_amountsymbol := p_amount;
  SELECT ISSYMBOLRIGHTSIDE, CURSYMBOL, ISO_CODE
  INTO v_issymbolright, v_symbol, v_isocode
  FROM C_CURRENCY WHERE C_CURRENCY_ID = p_currency_id;

  IF (p_onlysymbol = 'Y') THEN
    IF (v_symbol IS NULL) THEN
      v_amountsymbol := v_isocode;
    ELSE
      v_amountsymbol := v_symbol;
    END IF;
  ELSE     
    IF (v_issymbolright = 'Y') THEN
        IF (v_symbol IS NOT NULL) THEN
          v_amountsymbol := v_amountsymbol || ' ' || v_symbol;
        ELSE
          v_amountsymbol := v_amountsymbol || ' ' || v_isocode;
        END IF;
    ELSE
        IF (v_symbol IS NOT NULL) THEN
          v_amountsymbol := v_symbol || ' ' || v_amountsymbol;
        ELSE
          v_amountsymbol := v_isocode || ' ' || v_amountsymbol;
        END IF;
    END IF;   
  END IF;
  
  RETURN v_amountsymbol;
END ; $_$;


ALTER FUNCTION public.c_currency_symbol(p_currency_id character varying, p_amount numeric, p_onlysymbol character varying) OWNER TO tad;

--
-- Name: c_currency_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_currency_trg() OWNER TO tad;

--
-- Name: c_datedayinmonth(numeric, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_datedayinmonth(p_day numeric, p_date timestamp without time zone) RETURNS timestamp without time zone
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Description: return the last TIMESTAMP that is allowed to invoice orders
************************************************************************/
  v_DateAux TIMESTAMP;
BEGIN
  v_DateAux := LAST_DAY(p_Date) ;
  IF(TO_NUMBER(TO_CHAR(v_DateAux, 'DD')) > p_Day) THEN
    v_DateAux := TO_DATE(LPAD(TO_CHAR(p_Day), 2, '0') ||'/'||TO_CHAR(p_Date, 'MM/YYYY'), 'DD/MM/YYYY') ;
  END IF;
  RETURN v_DateAux;
END ; $$;


ALTER FUNCTION public.c_datedayinmonth(p_day numeric, p_date timestamp without time zone) OWNER TO tad;

--
-- Name: c_db_percentage_paid(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_db_percentage_paid(p_debt_payment_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_percentaje NUMERIC;
  v_Status CHAR;
  --TYPE RECORD IS REFCURSOR;
    CUR_SETTLEMENT RECORD;
BEGIN
  v_Status := C_DEBT_PAYMENT_STATUS0(p_Debt_Payment_ID);
  IF (v_Status IN ('C', 'A')) THEN
    v_percentaje := 1;
  ELSIF (v_Status = 'W') THEN
    SELECT SUM(C_DB_PERCENTAGE_PAID(DBG.C_Debt_Payment_ID)*
    C_Currency_Convert(DBG.amount,DBG.C_Currency_ID,DBC.C_Currency_ID,
    TO_DATE(NOW()), null, DBC.AD_Client_ID, DBC.AD_Org_ID))/
    SUM(C_Currency_Convert(DBG.amount,DBG.C_Currency_ID,DBC.C_Currency_ID,
    TO_DATE(NOW()), null, DBC.AD_Client_ID, DBC.AD_Org_ID))
    INTO v_percentaje
    FROM C_Debt_Payment DBC, C_Debt_Payment DBG
    WHERE DBC.C_Settlement_Cancel_ID = DBG.C_Settlement_Generate_ID
      AND DBC.C_Debt_Payment_ID = p_Debt_Payment_ID;
  ELSE
    v_percentaje := 0;
  END IF;
  RETURN ROUND(v_percentaje,4);
END ; $$;


ALTER FUNCTION public.c_db_percentage_paid(p_debt_payment_id character varying) OWNER TO tad;

--
-- Name: c_debt_payment_bal_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_debt_payment_bal_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2006 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
  v_Qty NUMERIC:=0;
  v_Processed         VARCHAR(60) ;
  v_C_DEBT_PAYMENT_ID VARCHAR(32) ; --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF(TG_OP = 'DELETE') THEN
    v_C_DEBT_PAYMENT_ID:=old.C_DEBT_PAYMENT_ID;
  ELSE
    v_C_DEBT_PAYMENT_ID:=new.C_DEBT_PAYMENT_ID;
  END IF;
  SELECT C_SETTLEMENT.PROCESSED
  INTO v_Processed
  FROM C_SETTLEMENT,
    C_DEBT_PAYMENT
  WHERE C_SETTLEMENT.C_SETTLEMENT_ID=C_DEBT_PAYMENT.C_SETTLEMENT_GENERATE_ID
    AND C_DEBT_PAYMENT.C_DEBT_PAYMENT_ID=v_C_DEBT_PAYMENT_ID;
  IF(v_Processed='Y') THEN
    RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
  END IF;
  IF(TG_OP = 'DELETE') THEN
    v_Qty:=-1 *(old.AmountCredit - old.AmountDebit) ;
  END IF;
  IF(TG_OP = 'UPDATE') THEN
    v_Qty :=(new.AmountCredit - new.AmountDebit) -(old.AmountCredit - old.AmountDebit) ;
  END IF;
  IF(TG_OP = 'INSERT') THEN
    v_Qty :=(new.AmountCredit - new.AmountDebit) ;
  END IF;
  IF(TG_OP = 'INSERT') THEN
    UPDATE C_Debt_Payment
      SET GLItemAmt=COALESCE(GLItemAmt, 0) + v_Qty
    WHERE C_Debt_Payment_ID=new.C_Debt_Payment_ID;
  ELSE
    UPDATE C_Debt_Payment
      SET GLItemAmt=COALESCE(GLItemAmt, 0) + v_Qty
    WHERE C_Debt_Payment_ID=old.C_Debt_Payment_ID;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_debt_payment_bal_trg() OWNER TO tad;

--
-- Name: c_debt_payment_balancing_rep(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_debt_payment_balancing_rep(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; -- 0=failure
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  --TYPE RECORD IS REFCURSOR;
    Cur_DebtPaymentBalancing RECORD;
    v_C_Debt_Payment_ID VARCHAR(32) ; --OBTG:VARCHAR2--
    v_C_Debt_Payment_Balancing VARCHAR(32) ; --OBTG:VARCHAR2--
    v_AmountCredit NUMERIC(10) ;
    v_AmountDebit NUMERIC(10) ;
    v_Amount NUMERIC(10) ;
    v_IsDirectPosting CHAR(1) ;
    v_Posted VARCHAR(60) ; --OBTG:VARCHAR2--
    v_IsReceipt CHAR(1) ;
    v_Processed VARCHAR(60) ; --OBTG:VARCHAR2--
    FINISH_PROCESS BOOLEAN:=false;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    SELECT i.Record_ID,
      i.AD_User_ID
    INTO v_Record_ID,
      v_AD_User_ID
    FROM AD_PINSTANCE i
    WHERE i.AD_PInstance_ID=p_PInstance_ID;
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    SELECT C_DEBT_PAYMENT.C_DEBT_PAYMENT_ID,
      SUM(C_DEBT_PAYMENT_BAL_REPLACE.AMOUNTDEBIT),
      SUM(C_DEBT_PAYMENT_BAL_REPLACE.AMOUNTCREDIT),
      C_DEBT_PAYMENT.ISRECEIPT
    INTO v_C_Debt_Payment_ID,
      v_AmountDebit,
      v_AmountCredit,
      v_IsReceipt
    FROM C_DEBT_PAYMENT_BAL_REPLACE,
      C_DEBT_PAYMENT
    WHERE C_DEBT_PAYMENT.C_DEBT_PAYMENT_ID=C_DEBT_PAYMENT_BAL_REPLACE.C_DEBT_PAYMENT_ID
     and C_DEBT_PAYMENT.C_DEBT_PAYMENT_id = (select c_debt_payment_id
                                               from C_DEBT_PAYMENT_BAL_REPLACE
                                              where C_DEBT_PAYMENT_BAL_REPLACE_ID=v_Record_ID)
    GROUP BY C_DEBT_PAYMENT.C_DEBT_PAYMENT_ID,
      C_DEBT_PAYMENT.ISRECEIPT;
    SELECT POSTED,
      PROCESSED
    INTO v_Posted,
      v_Processed
    FROM C_SETTLEMENT
    WHERE C_SETTLEMENT_ID=
      (SELECT C_SETTLEMENT_GENERATE_ID
      FROM C_DEBT_PAYMENT
      WHERE C_DEBT_PAYMENT_ID=v_C_Debt_Payment_ID
      )
      ;
    IF(v_Posted='Y') THEN
      RAISE EXCEPTION '%', '@SettlementDocumentPosted@' ; --OBTG:-20000--
    ELSE
      SELECT ISDIRECTPOSTING
      INTO v_IsDirectPosting
      FROM C_DEBT_PAYMENT
      WHERE C_DEBT_PAYMENT_ID=v_C_Debt_Payment_ID;
      IF(v_IsDirectPosting='N') THEN
        SELECT COALESCE(MAX(POSTED), 'N')
        INTO v_Posted
        FROM C_SETTLEMENT
        WHERE C_SETTLEMENT_ID=
          ( SELECT C_SETTLEMENT_CANCEL_ID
          FROM C_DEBT_PAYMENT
          WHERE C_DEBT_PAYMENT_ID=v_C_Debt_Payment_ID
          )
          ;
        IF(v_Posted='Y') THEN
          RAISE EXCEPTION '%', '@SettlementCancelPosted@' ; --OBTG:-20000--
        END IF;
      END IF;
    END IF;
    IF(NOT FINISH_PROCESS) THEN
      IF(v_IsReceipt='N') THEN
        v_Amount:=v_AmountDebit - v_AmountCredit;
      ELSE
        v_Amount:=v_AmountCredit - v_AmountDebit;
      END IF;
      SELECT AMOUNT
      INTO v_AmountDebit
      FROM C_DEBT_PAYMENT
      WHERE C_DEBT_PAYMENT_ID=v_C_Debt_Payment_ID;
      v_Amount:=v_Amount - v_AmountDebit;
      IF(v_Amount=0) THEN
        IF(v_Processed='Y') THEN
          UPDATE C_SETTLEMENT
            SET PROCESSED='N'
          WHERE C_SETTLEMENT_ID=
            (SELECT C_SETTLEMENT_GENERATE_ID
            FROM C_DEBT_PAYMENT
            WHERE C_DEBT_PAYMENT_ID=v_C_Debt_Payment_ID
            )
            ;
        END IF;
        DELETE
        FROM C_DEBT_PAYMENT_BALANCING
        WHERE C_DEBT_PAYMENT_ID=v_C_Debt_Payment_ID;
        FOR Cur_DebtPaymentBalancing in
          (SELECT AMOUNTDEBIT,
            AMOUNTCREDIT,
            C_DEBT_PAYMENT_ID,
            C_GLITEM_ID,
            ISACTIVE,
            CREATEDBY,
            UPDATEDBY,
            AD_CLIENT_ID,
            AD_ORG_ID
          FROM C_DEBT_PAYMENT_BAL_REPLACE
          WHERE C_DEBT_PAYMENT_ID=v_C_Debt_Payment_ID
          )
        LOOP
          SELECT * INTO  v_C_Debt_Payment_Balancing FROM Ad_Sequence_Next('C_Debt_Payment_Balancing', v_C_Debt_Payment_ID) ;
          INSERT
          INTO C_DEBT_PAYMENT_BALANCING
            (
              C_DEBT_PAYMENT_BALANCING_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE,
              CREATED, CREATEDBY, UPDATED, UPDATEDBY,
              AMOUNTDEBIT, AMOUNTCREDIT, C_GLITEM_ID, C_DEBT_PAYMENT_ID
            )
            VALUES
            (
              v_C_Debt_Payment_Balancing, Cur_DebtPaymentBalancing.AD_CLIENT_ID, Cur_DebtPaymentBalancing.AD_ORG_ID, Cur_DebtPaymentBalancing.ISACTIVE,
              TO_DATE(NOW()), Cur_DebtPaymentBalancing.CREATEDBY, TO_DATE(NOW()), Cur_DebtPaymentBalancing.UPDATEDBY,
              Cur_DebtPaymentBalancing.AMOUNTDEBIT, Cur_DebtPaymentBalancing.AMOUNTCREDIT, Cur_DebtPaymentBalancing.C_GLITEM_ID, Cur_DebtPaymentBalancing.C_DEBT_PAYMENT_ID
            )
            ;
        END LOOP;
        DELETE
        FROM C_DEBT_PAYMENT_BAL_REPLACE
        WHERE C_DEBT_PAYMENT_ID=v_C_Debt_Payment_ID;
        IF(v_Processed='Y') THEN
          UPDATE C_SETTLEMENT
            SET PROCESSED='Y'
          WHERE C_SETTLEMENT_ID=
            (SELECT C_SETTLEMENT_GENERATE_ID
            FROM C_DEBT_PAYMENT
            WHERE C_DEBT_PAYMENT_ID=v_C_Debt_Payment_ID
            )
            ;
        END IF;
      ELSE
        RAISE EXCEPTION '%', '@ProcessFailed@' ; --OBTG:-20000--
      END IF;
    END IF; --FINISH_PROCESS
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $$;


ALTER FUNCTION public.c_debt_payment_balancing_rep(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_debt_payment_change(character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_debt_payment_change(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_debt_payment_create(character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_debt_payment_create(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_debt_payment_paid(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_debt_payment_paid(p_debtpaymentid character varying) RETURNS character
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_status CHAR(1) ;
  v_paid   CHAR(1):='N';
BEGIN
  SELECT C_DEBT_PAYMENT_STATUS(C_Settlement_Cancel_ID, Cancel_Processed, Generate_Processed, IsPaid, IsValid, C_CashLine_ID, C_BankStatementLine_ID)
  INTO v_status
  FROM C_Debt_Payment
  WHERE C_Debt_Payment_ID=p_DebtPaymentID;
  IF(v_status='C') THEN
    v_paid:='Y';
  ELSIF(v_status='W') THEN
    SELECT MIN(C_Debt_Payment_Paid(C_Debt_Payment_ID))
    INTO v_paid
    FROM C_Debt_Payment
    WHERE C_Settlement_Generate_ID =
      (SELECT C_Settlement_Cancel_ID
      FROM C_Debt_Payment
      WHERE C_Debt_Payment_ID=p_DebtPaymentID
      );
  END IF;
  RETURN v_paid;
END ; $$;


ALTER FUNCTION public.c_debt_payment_paid(p_debtpaymentid character varying) OWNER TO tad;

--
-- Name: c_debt_payment_status(character varying, character, character, character, character, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_debt_payment_status(p_settlement_cancel_id character varying, p_cancel_processed character, p_generate_processed character, p_ispaid character, p_isvalid character, p_c_cashline_id character varying, p_c_bankstatementline_id character varying) RETURNS character
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*******************************************************
Posibles status:
I: Invalido
P: Pendiente o no saldado
W: Cancelado, no necesita conciliar
A: Pendiente de conciliar o saldado
C: Completado o conciliado
*******************************************************/
  v_Display CHAR(1) ;
BEGIN
  IF(p_IsValid = 'N') THEN
    v_Display := 'I';
  ELSIF(p_C_CashLine_ID IS NOT NULL OR p_C_BankStatementLine_ID IS NOT NULL) THEN
    v_Display := 'C';
  ELSIF(p_Cancel_Processed = 'Y' AND p_IsPaid = 'N') THEN
    v_Display := 'W';
  ELSIF(p_Cancel_Processed = 'Y' OR(p_Settlement_Cancel_ID IS NULL AND p_Generate_Processed = 'Y' AND p_IsPaid = 'Y')) THEN
    v_Display := 'A';
  ELSE
    v_Display := 'P';
  END IF;
  RETURN v_Display;
END ; $$;


ALTER FUNCTION public.c_debt_payment_status(p_settlement_cancel_id character varying, p_cancel_processed character, p_generate_processed character, p_ispaid character, p_isvalid character, p_c_cashline_id character varying, p_c_bankstatementline_id character varying) OWNER TO tad;

--
-- Name: c_debt_payment_status0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_debt_payment_status0(p_debt_payment_id character varying) RETURNS character
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*******************************************************
Posibles status:
I: Invalido
P: Pendiente o no saldado
W: Cancelado, no necesita conciliar
A: Pendiente de conciliar o saldado
C: Completado o conciliado
*******************************************************/
  v_Display CHAR(1);
BEGIN
  SELECT C_DEBT_PAYMENT_STATUS(C_Settlement_Cancel_ID, Cancel_Processed, Generate_Processed, IsPaid,
    IsValid, C_CashLine_ID, C_BankStatementLine_ID) INTO v_Display
  FROM C_DEBT_PAYMENT
  WHERE C_Debt_Payment_ID = p_Debt_Payment_ID ;

  RETURN v_Display;
END ; $$;


ALTER FUNCTION public.c_debt_payment_status0(p_debt_payment_id character varying) OWNER TO tad;

--
-- Name: c_debt_payment_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: c_divide(numeric, numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_divide(p_dividendo numeric, p_divisor numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
  RETURN(p_dividendo/p_divisor) ;
EXCEPTION
WHEN OTHERS THEN
  RETURN(NULL) ;
END ; $$;


ALTER FUNCTION public.c_divide(p_dividendo numeric, p_divisor numeric) OWNER TO tad;

--
-- Name: c_doctype_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.c_doctype_trg() OWNER TO tad;

--
-- Name: c_dp_management_chk_restr_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


ALTER FUNCTION public.c_dp_management_chk_restr_trg() OWNER TO tad;

--
-- Name: c_dp_management_post(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_dp_management_post(p_pinstance_id character varying, p_dp_management_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; -- 0=failure
  v_Record_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  v_AD_User_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  v_AD_Client_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  v_AD_Org_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  v_Processed VARCHAR(60) ; --OBTG:VARCHAR2--
  v_Posted VARCHAR(60) ; --OBTG:VARCHAR2--
  v_Currency VARCHAR(32); --OBTG:VARCHAR2--
  v_Date TIMESTAMP;
  v_CashBook_ISO_Code VARCHAR(10) ;
  v_Record_Description VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Debt_Payment_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  --Addesd by PSarobe 12062007
  v_line NUMERIC;
  v_DpManagementline_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Remittanceline_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_documentno_Settlement VARCHAR(40); --OBTG:VARCHAR2--
  v_dateSettlement TIMESTAMP;
  v_Cancel_Processed CHAR(1);
  v_nameBankstatement VARCHAR (60); --OBTG:VARCHAR2--
  v_dateBankstatement TIMESTAMP;
  v_nameCash VARCHAR (60); --OBTG:VARCHAR2--
  v_dateCash TIMESTAMP;
  v_Bankstatementline_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_CashLine_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_ispaid CHAR(1);
  v_Settlement_Cancel_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_is_included NUMERIC:=0;
  v_available_period NUMERIC:=0;
  v_is_ready AD_Org.IsReady%TYPE;
  v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
  v_isacctle AD_OrgType.IsAcctLegalEntity%TYPE;
  v_org_bule_id AD_Org.AD_Org_ID%TYPE;
  v_DocType_ID VARCHAR(32); --OBTG:VARCHAR2--
  --  Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --  Parameter Variables
    v_Aux NUMERIC;
    v_CanceledNotChargeAmt NUMERIC:=0;
    v_GeneratedAmt NUMERIC:=0;
    v_ChargedAmt NUMERIC:=0;
    v_ForcedOrg NUMERIC;
    v_ManualAmt NUMERIC:=0;
    Cur_Lines RECORD;
    Cur_Line_DP RECORD;
    Cur_DPDebtpayment RECORD;
    FINISH_PROCESS BOOLEAN:=false;
  BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      --  Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
      END LOOP; --  Get Parameter
      RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    ELSE
      RAISE NOTICE '%','--<<C_Settlement_Post>>' ;
      v_Record_ID:=p_DP_Management_ID;
    END IF;
  BEGIN --BODY
    SELECT UpdatedBy,
      AD_Client_ID,
      Processed,
      Posted, AD_Org_ID, DateAcct, C_DocType_ID
    INTO v_AD_User_ID,
      v_AD_Client_ID,
      v_processed,
      v_posted, v_AD_Org_ID, v_Date, v_DocType_ID
    FROM c_DP_Management
    WHERE c_DP_Management_ID=v_Record_ID;

  --Check DP status, this is used for process and unprocess
  -- Modified by PSarobe 12062007

	 SELECT COUNT(*), MAX(ml.C_DP_ManagementLine_Id)
      INTO v_Aux, v_DpManagementline_ID
      FROM C_DP_ManagementLine ml, C_DEBT_PAYMENT dp
      WHERE C_DP_Management_ID=v_Record_ID
        AND ml.c_debt_payment_id=dp.c_debt_payment_id
        AND C_Debt_Payment_Status(dp.C_SETTLEMENT_CANCEL_ID, dp.CANCEL_PROCESSED, dp.GENERATE_PROCESSED, dp.IsPaid, dp.Isvalid, dp.C_CASHLINE_ID, dp.C_BANKSTATEMENTLINE_ID)!='P';

	 IF v_Aux!=0 THEN
	  	SELECT ml.line, dp.c_Bankstatementline_Id, dp.c_cashline_id, dp.c_settlement_cancel_id, dp.ispaid, dp.cancel_processed
		INTO v_line, v_Bankstatementline_ID, v_CashLine_ID, v_Settlement_Cancel_ID, v_ispaid, v_Cancel_Processed
		FROM C_DP_ManagementLine ml, C_DEBT_PAYMENT dp
		WHERE ml.c_debt_payment_id=dp.c_debt_payment_id
		AND ml.C_DP_ManagementLine_ID = v_DpManagementline_ID;
	       	   IF v_Bankstatementline_ID IS NOT NULL THEN
			   	 SELECT C_BANKSTATEMENT.NAME, C_BANKSTATEMENT.STATEMENTDATE
				 INTO v_nameBankstatement, v_dateBankstatement
				 FROM C_BANKSTATEMENT, C_BANKSTATEMENTLINE
				 WHERE C_BANKSTATEMENT.C_BANKSTATEMENT_ID = C_BANKSTATEMENTLINE.C_BANKSTATEMENT_ID
				 AND C_BANKSTATEMENTLINE.C_BANKSTATEMENTLINE_ID = v_Bankstatementline_ID;
          		 RAISE EXCEPTION '%', '@Inline@'||v_line||' '||'@debtpayment@'||' '||'@ConciliatedDebtPaymentBank@'||v_nameBankstatement||' '||'@Bydate@'||v_dateBankstatement ; --OBTG:-20000--
			   END IF;
			   IF v_CashLine_ID IS NOT NULL THEN
			   	 SELECT C_CASH.NAME, C_CASH.STATEMENTDATE
				 INTO v_nameCash, v_dateCash
				 FROM C_CASH, C_CASHLINE
				 WHERE C_CASH.C_CASH_ID = C_CASHLINE.C_CASH_ID
				 AND C_CASHLINE.C_CASHLINE_ID = v_CashLine_ID;
          		 RAISE EXCEPTION '%', '@Inline@'||v_line||' '||'@debtpayment@'||' '||'@ConciliatedDebtPaymentCash@'||v_nameCash||' '||'@Bydate@'||v_dateCash ; --OBTG:-20000--
			   END IF;
			   IF v_Cancel_Processed='Y' AND v_ispaid='N' THEN
			   	 SELECT documentno, datetrx
				 INTO v_documentno_Settlement, v_dateSettlement
				 FROM C_SETTLEMENT
				 WHERE C_SETTLEMENT_ID = v_Settlement_Cancel_ID;
				 RAISE EXCEPTION '%', '@Inline@'||v_line||' '||'@debtpayment@'||' '||'@ConciliatedDebtPaymentCancel@'||v_documentno_Settlement||' '||'@Bydate@'||v_dateSettlement ; --OBTG:-20000--
			   END IF;
      END IF;



    IF(v_Processed='Y') and (not FINISH_PROCESS) THEN
      --Checking restrictions for unprocessing
      IF v_Posted='Y' THEN
        RAISE EXCEPTION '%', '@DPManagementDocumentPosted@' ; --OBTG:-20000--
      END IF;
      IF(NOT FINISH_PROCESS) THEN
        SELECT count(*), MAX(ml.line)
        INTO v_Aux, v_line
        FROM C_DP_ManagementLine ml,
          C_Debt_Payment dp
        WHERE ml.C_DP_Management_ID=v_Record_ID
          AND ml.C_Debt_Payment_ID=dp.C_Debt_Payment_ID
          AND coalesce(dp.Status, 'DE')!=coalesce(ml.Status_To, 'DE') ;
        IF v_Aux!=0 THEN
          RAISE EXCEPTION '%', '@Inline@'||v_line||' '||'@WrongStatusToFrom@' ; --OBTG:-20000--
        END IF;
      END IF ;--FINISH_PROCESS
      IF(NOT FINISH_PROCESS) THEN
        --unprocessing...
        UPDATE C_DP_Management
          SET Processed='N',
          Updated=TO_DATE(NOW()),
          UpdatedBy=v_AD_User_ID
        WHERE C_DP_Management_ID=v_Record_ID;
        for Cur_Lines in
          (SELECT *  FROM C_DP_ManagementLine  WHERE C_DP_Management_ID=v_Record_ID)
        loop
          UPDATE C_Debt_Payment
            SET status=Cur_Lines.Status_From,
            updated=TO_DATE(NOW()),
            UpdatedBy=v_AD_User_ID
          WHERE C_Debt_Payment_ID=Cur_Lines.C_Debt_Payment_ID;
        end loop;
        v_Message:='@UnProcessedDPManagement@';
        FINISH_PROCESS:=true;
      END IF;--FINISH_PROCESS
    END IF;
    /*
    *  Checking Restrictions
    */
    IF(NOT FINISH_PROCESS) THEN
      SELECT count(*), MAX(ml.line)
      INTO v_Aux, v_line
      FROM C_DP_ManagementLine ml,
        C_Debt_Payment dp
      WHERE ml.C_DP_Management_ID=v_Record_ID
        AND ml.C_Debt_Payment_ID=dp.C_Debt_Payment_ID
        AND coalesce(dp.Status, 'DE')!=coalesce(ml.Status_From, 'DE') ;
      IF v_Aux!=0 THEN
        RAISE EXCEPTION '%', '@Inline@'||v_line||' '||'@WrongStatusToFrom@' ; --OBTG:-20000--
      END IF;
    END IF;--FINISH_PROCESS
  IF(NOT FINISH_PROCESS) THEN
      SELECT count(*)
      INTO v_Aux
      FROM C_DP_Management m,
       C_DocType
      WHERE C_DocType.DocBaseType IN ('DPM')
     AND AD_ISORGINCLUDED(M.AD_Org_ID,C_DocType.AD_Org_ID, M.AD_Client_ID) <> -1
    AND M.C_DOCTYPE_ID = C_DOCTYPE.C_DOCTYPE_ID
    AND M.C_DP_MANAGEMENT_ID=V_RECORD_ID;

      if v_Aux=0 then
        RAISE EXCEPTION '%', '@NotCorrectOrgDoctypeDPManagement@' ; --OBTG:-20000--
      end if;
    END IF;--FINISH_PROCESS
  	/*To be deprecated. We are checking this restriction at the beginning. To be fixed
    IF(NOT FINISH_PROCESS) THEN
      for Cur_Line_DP in
        (SELECT dp.*
        FROM C_DP_ManagementLine ml,
          C_Debt_Payment dp
        WHERE ml.C_DP_Management_ID=v_Record_ID
          AND dp.C_Debt_Payment_ID=ml.C_Debt_Payment_ID
        )
      loop
        if C_Debt_Payment_Status(Cur_Line_DP.C_SETTLEMENT_CANCEL_ID, Cur_Line_DP.CANCEL_PROCESSED, Cur_Line_DP.GENERATE_PROCESSED, Cur_Line_DP.ISPAID, Cur_Line_DP.ISVALID, Cur_Line_DP.C_CASHLINE_ID, Cur_Line_DP.C_BANKSTATEMENTLINE_ID)!='P'then
          v_Message:='@WrongDPStatus@';
          v_Result:=0;
          FINISH_PROCESS:=true;
          EXIT;
        end if;
      end loop;
    END IF;*/
    IF(NOT FINISH_PROCESS) THEN
      SELECT count(*), MAX(C_Debt_Payment_ID)
      INTO v_Aux, v_Debt_Payment_ID
      FROM
        (SELECT C_Debt_Payment_ID
        FROM C_DP_ManagementLine
        WHERE C_DP_Management_ID=v_Record_ID
        GROUP BY C_Debt_Payment_ID
        HAVING count(*)>1
        )
        A;
      IF v_Aux!=0 THEN
        FOR Cur_DPDebtpayment IN (SELECT line
		 	 						 	FROM C_DP_ManagementLine
										WHERE C_DP_ManagementLine.C_DP_Management_id=v_Record_ID
										AND C_DP_ManagementLine.c_debt_payment_id=v_Debt_Payment_ID) LOOP
		 v_Message:=v_Message||Cur_DPDebtpayment.line||', ';
		 END LOOP;
		 RAISE EXCEPTION '%', '@Inlines@'||v_Message||' '||'@Samedebtpayment@' ; --OBTG:-20000--
      END IF;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      SELECT count(*), MAX(ml.line)
      INTO v_Aux, v_line
      FROM C_DP_ManagementLine ml,
        C_DP_Management m
      WHERE ml.C_DP_Management_ID=m.C_DP_Management_ID
        AND m.C_DP_Management_ID=v_Record_ID
        AND exists
        (SELECT 1
        FROM C_DP_ManagementLine ml1,
          C_DP_Management m1
        WHERE m1.C_DP_Management_ID=ml1.C_DP_Management_ID
          AND ml1.C_Debt_Payment_ID=ml.C_Debt_Payment_ID
          AND m1.processed='Y'
          AND m1.DateAcct>m.DateAcct
        )
        ;
      if v_Aux!=0 then
       RAISE EXCEPTION '%', '@Inline@'||v_line||' '||'@LaterChangeStatus@' ; --OBTG:-20000--
      end if;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      -- Check the header belongs to a organization where transactions are posible and ready to use
      SELECT AD_Org.IsReady, Ad_OrgType.IsTransactionsAllowed
      INTO v_is_ready, v_is_tr_allow
      FROM C_DP_MANAGEMENT, AD_Org, AD_OrgType
      WHERE AD_Org.AD_Org_ID=C_DP_MANAGEMENT.AD_Org_ID
      AND AD_Org.AD_OrgType_ID=AD_OrgType.AD_OrgType_ID
      AND C_DP_MANAGEMENT.C_DP_MANAGEMENT_ID=v_Record_ID;
      IF (v_is_ready='N') THEN
        RAISE EXCEPTION '%', '@OrgHeaderNotReady@'; --OBTG:-20000--
      END IF;
      IF (v_is_tr_allow='N') THEN
        RAISE EXCEPTION '%', '@OrgHeaderNotTransAllowed@'; --OBTG:-20000--
      END IF;    
    
      SELECT AD_ORG_CHK_DOCUMENTS('C_DP_MANAGEMENT', 'C_DP_MANAGEMENTLINE', v_Record_ID, 'C_DP_MANAGEMENT_ID', 'C_DP_MANAGEMENT_ID') INTO v_is_included FROM dual;
      IF (v_is_included=-1) THEN
        RAISE EXCEPTION '%', '@LinesAndHeaderDifferentLEorBU@'; --OBTG:-20000--
      END IF;
      
      SELECT AD_ORG_CHK_DOC_PAYMENTS('C_DP_MANAGEMENT', 'C_DP_MANAGEMENTLINE', v_Record_ID, 'C_DP_MANAGEMENT_ID', 'C_DP_MANAGEMENT_ID', 'C_DEBT_PAYMENT_ID') INTO v_is_included FROM dual;
      IF (v_is_included=-1) THEN
        RAISE EXCEPTION '%', '@PaymentsAndHeaderDifferentLEorBU@'; --OBTG:-20000--
      END IF;
      
      -- Check the period control is opened (only if it is legal entity with accounting)
      -- Gets the BU or LE of the document
      SELECT AD_GET_DOC_LE_BU('C_DP_MANAGEMENT', v_Record_ID, 'C_DP_MANAGEMENT_ID', 'LE')
      INTO v_org_bule_id
      FROM DUAL;
      
      SELECT AD_OrgType.IsAcctLegalEntity
      INTO v_isacctle
      FROM AD_OrgType, AD_Org
      WHERE AD_Org.AD_OrgType_ID = AD_OrgType.AD_OrgType_ID
      AND AD_Org.AD_Org_ID=v_org_bule_id;
      
      IF (v_isacctle='Y') THEN     	
        SELECT C_CHK_OPEN_PERIOD(v_AD_Org_ID, v_Date, NULL, v_DocType_ID) 
        INTO v_available_period
        FROM DUAL;
        
        IF (v_available_period<>1) THEN
          RAISE EXCEPTION '%', '@PeriodNotAvailable@'; --OBTG:-20000--
        END IF;
      END IF;   
      
      
    END IF;--FINISH_PROCESS
    --Processing...
    IF(NOT FINISH_PROCESS) THEN     
      UPDATE C_DP_Management
        SET Processed='Y',
        Updated=TO_DATE(NOW()),
        UpdatedBy=v_AD_User_ID
      WHERE C_DP_Management_ID=v_Record_ID;
      for Cur_Lines in
        (SELECT *  FROM C_DP_ManagementLine  WHERE C_DP_Management_ID=v_Record_ID)
      loop
        UPDATE C_Debt_Payment
          SET status=coalesce(Cur_Lines.Status_To, 'DE'),
          updated=TO_DATE(NOW()),
          UpdatedBy=v_AD_User_ID
        WHERE C_Debt_Payment_ID=Cur_Lines.C_Debt_Payment_ID;
      end loop;
    END IF;--FINISH_PROCESS
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    IF(p_PInstance_ID IS NOT NULL) THEN
      RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      RAISE NOTICE '%','--<<C_DP_Management_Post finished>> ' || v_Message ;
      IF(v_Result=0) THEN
        RAISE EXCEPTION '%', v_Message ; --OBTG:-20100--
      END IF;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE EXCEPTION '%', SQLERRM;
  END IF;
  RETURN;
END ; $$;


ALTER FUNCTION public.c_dp_management_post(p_pinstance_id character varying, p_dp_management_id character varying) OWNER TO tad;

--
-- Name: c_dp_management_post(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_dp_management_post(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 PERFORM C_DP_MANAGEMENT_POST($1, NULL);
END
; $_$;


ALTER FUNCTION public.c_dp_management_post(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_dp_managementline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_dp_managementline_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF (TG_OP = 'INSERT') THEN
    IF (NEW.status_from IS NULL) THEN
    BEGIN

        SELECT status
          INTO NEW.status_from
          FROM c_debt_payment
        WHERE c_debt_payment_id = NEW.c_debt_payment_id;
      EXCEPTION
        WHEN DATA_EXCEPTION THEN
          NEW.status_from := 'DE';
    END;
    END IF;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

EXCEPTION
  WHEN OTHERS THEN
    NULL;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_dp_managementline_trg() OWNER TO tad;

--
-- Name: c_dpmline_chk_restrictions_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_dpmline_chk_restrictions_trg() OWNER TO tad;

--
-- Name: c_elementvalue_copy(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_elementvalue_copy(p_source_element_id character varying, p_target_element_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  *  Copies CoA
  * All element values of p_Source_Element_ID to p_Target_Element_ID
  */
  --TYPE RECORD IS REFCURSOR;
    Cur_ElementValue RECORD;
    v_xAD_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_xAD_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_xUpdated TIMESTAMP;
    v_xUpdatedBy VARCHAR(32); --OBTG:VARCHAR2--
    v_NextNo VARCHAR(32); --OBTG:VARCHAR2--
  BEGIN
    --  Get target base info
    SELECT AD_Client_ID,
      AD_Org_ID,
      Updated,
      UpdatedBy
    INTO v_xAD_Client_ID,
      v_xAD_Org_ID,
      v_xUpdated,
      v_xUpdatedBy
    FROM C_Element
    WHERE C_Element_ID=p_Target_Element_ID;
    FOR Cur_ElementValue IN
      (SELECT *
      FROM C_ElementValue
      WHERE C_Element_ID=p_Source_Element_ID
        AND IsActive='Y'
      )
    LOOP
      SELECT * INTO  v_NextNo FROM AD_Sequence_Next('C_ElementValue', p_Target_Element_ID) ;
      INSERT
      INTO C_ElementValue
        (
          C_ElementValue_ID, C_Element_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, Value, Name, Description,
          AccountType, AccountSign, IsDocControlled, IsSummary,
          ValidFrom, ValidTo, PostActual, PostBudget,
          PostEncumbrance, PostStatistical, IsForeignCurrency, C_Currency_ID
        )
        VALUES
        (
          v_NextNo, p_Target_Element_ID, v_xAD_Client_ID, v_xAD_Org_ID,
           'Y', v_xUpdated, v_xUpdatedBy, v_xUpdated,
          v_xUpdatedBy, Cur_ElementValue.Value, Cur_ElementValue.Name, Cur_ElementValue.Description,
          Cur_ElementValue.AccountType, Cur_ElementValue.AccountSign, Cur_ElementValue.IsDocControlled, Cur_ElementValue.IsSummary,
          Cur_ElementValue.ValidFrom, Cur_ElementValue.ValidTo, Cur_ElementValue.PostActual, Cur_ElementValue.PostBudget,
          Cur_ElementValue.PostEncumbrance, Cur_ElementValue.PostStatistical, Cur_ElementValue.IsForeignCurrency, Cur_ElementValue.C_Currency_ID
        )
        ;
    END LOOP;
    -- Commented by cromero 19102006 -- COMMIT;
END ; $$;


ALTER FUNCTION public.c_elementvalue_copy(p_source_element_id character varying, p_target_element_id character varying) OWNER TO tad;

--
-- Name: c_generatepofromproject(character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: c_generatesofromproject(character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_generatesofromproject(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_generatesofromprojectorder(character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_generatesofromprojectorder(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_generatesofromprojectphase(character varying); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.c_generatesofromprojectphase(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_getbplocationid(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_getbplocationid(p_bpartnerid character varying, p_locationtype character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Title:   Return the first BPLocationID of the BPartner and LocationType (BillTo, ...)
* Description:
*
************************************************************************/
  v_BPLocationID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
  --TYPE RECORD IS REFCURSOR;
    Cur_BPLocationBillCursor RECORD;
    Cur_BPLocationShipCursor RECORD;
    Cur_BPLocationPayCursor RECORD;
    Cur_BPLocationRemitCursor RECORD;
    Cur_BPLocationTaxCursor RECORD;
  BEGIN
    IF(p_LocationType='B') THEN
      FOR Cur_BPLocationBillCursor IN
        (SELECT C_BPartner_Location_ID
        FROM C_BPartner_Location
        WHERE C_BPartner_ID=p_BPartnerID
          AND IsBillTo='Y'
          AND IsActive='Y'
        )
      LOOP
        v_BPLocationID:=Cur_BPLocationBillCursor.C_BPartner_Location_ID;
        EXIT;
      END LOOP;
    END IF;
    IF(p_LocationType='S') THEN
      FOR Cur_BPLocationShipCursor IN
        (SELECT C_BPartner_Location_ID
        FROM C_BPartner_Location
        WHERE C_BPartner_ID=p_BPartnerID
          AND IsShipTo='Y'
          AND IsActive='Y'
        )
      LOOP
        v_BPLocationID:=Cur_BPLocationShipCursor.C_BPartner_Location_ID;
        EXIT;
      END LOOP;
    END IF;
    IF(p_LocationType='P') THEN
      FOR Cur_BPLocationPayCursor IN
        (SELECT C_BPartner_Location_ID
        FROM C_BPartner_Location
        WHERE C_BPartner_ID=p_BPartnerID
          AND IsPayFrom='Y'
          AND IsActive='Y'
        )
      LOOP
        v_BPLocationID:=Cur_BPLocationPayCursor.C_BPartner_Location_ID;
        EXIT;
      END LOOP;
    END IF;
    IF(p_LocationType='R') THEN
      FOR Cur_BPLocationRemitCursor IN
        (SELECT C_BPartner_Location_ID
        FROM C_BPartner_Location
        WHERE C_BPartner_ID=p_BPartnerID
          AND IsRemitTo='Y'
          AND IsActive='Y'
        )
      LOOP
        v_BPLocationID:=Cur_BPLocationRemitCursor.C_BPartner_Location_ID;
        EXIT;
      END LOOP;
    END IF;
    IF(p_LocationType='T') THEN
      FOR Cur_BPLocationTaxCursor IN
        (SELECT C_BPartner_Location_ID
        FROM C_BPartner_Location
        WHERE C_BPartner_ID=p_BPartnerID
          AND IsTaxLocation='Y'
          AND IsActive='Y'
        )
      LOOP
        v_BPLocationID:=Cur_BPLocationTaxCursor.C_BPartner_Location_ID;
        EXIT;
      END LOOP;
    END IF;
    RETURN v_BPLocationID;
END ; $$;


ALTER FUNCTION public.c_getbplocationid(p_bpartnerid character varying, p_locationtype character varying) OWNER TO tad;

--
-- Name: c_getperiodname(numeric, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_getperiodname(p_periodno numeric, p_year_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_Period VARCHAR(60) ; --OBTG:NVARCHAR2--
  --
BEGIN
  SELECT NAME
  INTO v_Period
  FROM C_PERIOD
  WHERE C_YEAR_ID=p_Year_ID
    AND periodno=p_PeriodNo;
  RETURN v_Period;
END ; $$;


ALTER FUNCTION public.c_getperiodname(p_periodno numeric, p_year_id character varying) OWNER TO tad;

--
-- Name: FUNCTION c_getperiodname(p_periodno numeric, p_year_id character varying); Type: COMMENT; Schema: public; Owner: tad
--

COMMENT ON FUNCTION c_getperiodname(p_periodno numeric, p_year_id character varying) IS '--OBTG:C_GETPERIODNAMEfunc=NVARCHAR--';


--
-- Name: c_getwithholding(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_getwithholding(id_invoice_in character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  _Francesco Finamore_______________________.
************************************************************************/

--Cursori usati
--TYPE RECORD IS REFCURSOR;
    curInvoice     RECORD;
    curBusPart     RECORD;
    curBP_WithHold RECORD;
    curWithHold    RECORD;
    curTaxInps     RECORD;

--Business Partner
IdBusPart varchar(32);
--Business Partner WithHolding
IdWithHolding varchar(32);
IsIncludedTax char(1);
IdTax varchar(32);
IsPercentWh char(1);
baseamountpercent NUMERIC;
--WithHolding
withpercent NUMERIC;
--Tax
IsWithHoldingTax char(1);

TotCompensi NUMERIC;
base_amount NUMERIC;
Withholding varchar(32);
TaxInps NUMERIC;
TaxAmount NUMERIC;

BEGIN
Withholding:=0;
-- Fattura
FOR curInvoice IN
    (SELECT *
        FROM C_INVOICE
        WHERE C_INVOICE_ID = id_invoice_in
    )
    LOOP
        IdBusPart:=curInvoice.C_BPARTNER_ID;
        IdWithHolding:=curInvoice.C_WITHHOLDING_ID;
    EXIT;
END LOOP;

-- Compensi da linee di fattura
select sum(LINENETAMT) into TotCompensi from C_INVOICELINE
where C_INVOICE_ID= id_invoice_in
and COALESCE(EXCLUDEFORWITHHOLDING,'N') <> 'Y' ;

-- Dati del Businness Partner
FOR curBusPart IN
    (SELECT *
        FROM C_BPARTNER
        WHERE C_BPARTNER_ID = IdBusPart
    )
    LOOP
        -- IdBusPart:=curBusPart.C_BPARTNER_ID;
    EXIT;
END LOOP;
-- WithHolding del Businness Partner
FOR curBP_WithHold IN
    (SELECT *
        FROM C_BP_WITHHOLDING
        WHERE C_BPARTNER_ID = IdBusPart
        and C_WITHHOLDING_ID = IdWithHolding
    )
    LOOP
        IsIncludedTax := curBP_WithHold.INCLUDE_TAX;
        IdTax := curBP_WithHold.C_TAX_ID;
        -- This parameters is for manage the agents, for the other is 100%
        IsPercentWh := curBP_WithHold.IS_PERCENT_WH;
        if IsPercentWh ='Y' then
            baseamountpercent := curBP_WithHold.WH_PERCENT;
         else
            baseamountpercent := 100;
         end if;
    EXIT;
END LOOP;

if (IdWithHolding is null) then
  return 0;
end if;
-- 1) Calcolo la %ritenuta
FOR curWithHold IN
    (SELECT *
        FROM C_WITHHOLDING
        WHERE C_WITHHOLDING_ID = IdWithHolding
    )
    LOOP
        withpercent:=curWithHold.RATE;
    EXIT;
END LOOP;

-- 1) Calcolo la %inps
if IsIncludedTax = 'Y' then
   select coalesce(sum(TAXAMT),0) into  TaxAmount from C_invoicetax
   where C_TAX_ID= IdTax and C_INVOICE_ID = id_invoice_in;

   FOR curTaxInps IN
    (SELECT *
        FROM C_TAX
        WHERE C_TAX_ID = IdTax
    )
    LOOP
        IsWithHoldingTax:=curTaxInps.ISWITHHOLDINGTAX;
    EXIT;
    END LOOP;

     if not (IsWithHoldingTax='Y') then
      TaxAmount := 0;
     end if;
else
  TaxInps :=0 ;
  TaxAmount := 0;
end if;
-- 3) base imponibile
base_amount:=TotCompensi*baseamountpercent/100 ;
--TaxAmount := TaxInps*base_amount/100;
base_amount := base_amount + TaxAmount ;
-- 4) Calcolo finale
Withholding:=(withpercent*base_amount)/100;


Return Withholding;
END ; $$;


ALTER FUNCTION public.c_getwithholding(id_invoice_in character varying) OWNER TO tad;

--
-- Name: c_greeting_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_greeting_trg() OWNER TO tad;

--
-- Name: c_ignore_accent(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_ignore_accent(v_str character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
  RETURN(TRANSLATE(upper(C_TRIM(v_str)), 'ÁÀÂÄÉÈÊËÍÌÎÏÓÒÔÖÚÙÛÜÑ#Ç', 'AAAAEEEEIIIIOOOOUUUUNNC'));
END ; $$;


ALTER FUNCTION public.c_ignore_accent(v_str character varying) OWNER TO tad;

--
-- Name: c_invline_chk_restrictions_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.c_invline_chk_restrictions_trg() OWNER TO tad;

--
-- Name: c_invoice_cancel(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invoice_cancel(p_pinstance_id character varying, p_order_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * Cancel Invoices of order by reversing it
  */
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    --
    Cur_Invoice RECORD;
  BEGIN
    --  Update AD_PInstance
    IF(p_PInstance_ID IS NOT NULL) THEN
      RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date,
          p.AD_Client_ID
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_AD_Client_ID:=Cur_Parameter.AD_Client_ID;
      END LOOP; -- Get Parameter
      RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    ELSE
      v_Record_ID:=p_Order_ID;
    END IF;
  BEGIN --BODY
    IF(v_Record_ID IS NULL) THEN
      RETURN;
    END IF;
    -- For all invoices of order
    FOR Cur_Invoice IN
      (SELECT *
      FROM C_Invoice
      WHERE C_Order_ID=v_Record_ID
        AND DocStatus='CO' -- Only completed invoices
        FOR UPDATE
      )
    LOOP
      RAISE NOTICE '%','Cancel Invoice ' || Cur_Invoice.DocumentNo || ', ID=' || Cur_Invoice.C_Invoice_ID ;
      UPDATE C_Invoice
        SET DocAction='RC', -- Reverse Correction
        Processed='N',
        Updated=TO_DATE(NOW())
      WHERE C_Invoice.C_Invoice_ID=Cur_Invoice.C_Invoice_ID ;
      PERFORM C_INVOICE_POST(NULL, Cur_Invoice.C_Invoice_ID) ;
    END LOOP; -- Order Loop
    ---- <<FINISH_PROCESS>>
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE EXCEPTION '%', SQLERRM;
  END IF;
  RETURN;
END ; $$;


ALTER FUNCTION public.c_invoice_cancel(p_pinstance_id character varying, p_order_id character varying) OWNER TO tad;

--
-- Name: c_invoice_cancel(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invoice_cancel(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 PERFORM C_INVOICE_CANCEL($1, NULL);
END
; $_$;


ALTER FUNCTION public.c_invoice_cancel(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_invoice_create(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: c_invoice_create(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invoice_create(p_pinstance_id character varying, OUT p_invoice_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO  $2 FROM C_INVOICE_CREATE($1, NULL);
END
; $_$;


ALTER FUNCTION public.c_invoice_create(p_pinstance_id character varying, OUT p_invoice_id character varying) OWNER TO tad;

--
-- Name: c_invoice_create0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invoice_create0(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_Invoice_Create0.sql,v 1.2 2002/06/08 03:25:03 jjanke Exp $
  ***
  * Title: Create Invoice
  * Description:
  ************************************************************************/
  v_Dummy VARCHAR(32); --OBTG:varchar2--
BEGIN
  SELECT * INTO  v_Dummy FROM C_Invoice_Create(p_PInstance_ID, NULL) ;
END ; $_$;


ALTER FUNCTION public.c_invoice_create0(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_invoice_createreceipt(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invoice_createreceipt(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_Invoice_CreateReceipt.sql,v 1.2 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: Create Receipt (Shipment) From Invoice
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_M_Locator_ID VARCHAR(32); --OBTG:VARCHAR2--
    --
    v_DocStatus VARCHAR(60) ; --OBTG:VARCHAR2--
    v_InOut_ID VARCHAR(32); --OBTG:VARCHAR2--
    FINISH_PROCESS BOOLEAN:=false;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      IF(Cur_Parameter.ParameterName='M_Locator_ID') THEN
        v_M_Locator_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  M_Locator_ID=' || v_M_Locator_ID ;
      END IF;
      v_Record_ID:=Cur_Parameter.Record_ID;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    -- Read Information from Record
    v_ResultStr:='Reading Record';
    SELECT DocStatus
    INTO v_DocStatus
    FROM C_Invoice
    WHERE C_Invoice_ID=v_Record_ID;
    -- Invoice must be complete
    IF(v_DocStatus NOT IN('CO', 'CL')) THEN
      RAISE EXCEPTION '%', '@InvoiceCreateDocNotCompleted@'; --OBTG:-20000--
    END IF;
    -- Check, if we have a Shipment already
    IF(NOT FINISH_PROCESS) THEN
      DECLARE
        v_DocumentNo VARCHAR(60) ; --OBTG:VARCHAR2--
        Cur_MInOut RECORD;
      BEGIN
        v_ResultStr:='Check Receipt exists';
        FOR Cur_MInOut IN
          (SELECT M_InOut_ID, DocumentNo  FROM M_InOut  WHERE C_Invoice_ID=v_Record_ID)
        LOOP
          v_DocumentNo:=Cur_MInOut.DocumentNo;
          v_Message:='@InvoiceCreateDocAlreadyExists@ = ' || v_DocumentNo;
          RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
          EXIT;
        END LOOP;
      EXCEPTION
      WHEN OTHERS THEN
        NULL;
      END;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      -- Create (and post) the shipment
      v_ResultStr:='Create Shipment';
      SELECT * INTO  v_InOut_ID FROM M_InOut_Create(NULL, NULL, v_Record_ID, 'Y', v_M_Locator_ID) ;
      RAISE NOTICE '%','  Shipment - ' || v_InOut_ID ;
      IF(v_InOut_ID='0') THEN
        RAISE EXCEPTION '%', '@InOutCreateFailed@'; --OBTG:-20000--
      END IF;
    END IF; --FINISH_PROCESS
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $_$;


ALTER FUNCTION public.c_invoice_createreceipt(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_invoice_percentage_paid(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invoice_percentage_paid(p_invoice_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_percentaje NUMERIC;
BEGIN
  SELECT SUM(C_DB_PERCENTAGE_PAID(DB.C_Debt_Payment_ID)*
      C_Currency_Convert(DB.amount,DB.C_Currency_ID,I.C_Currency_ID,
      TO_DATE(NOW()), null, I.AD_Client_ID, I.AD_Org_ID))/
  (CASE SUM(C_Currency_Convert(DB.amount,DB.C_Currency_ID,I.C_Currency_ID,
      TO_DATE(NOW()), null, I.AD_Client_ID, I.AD_Org_ID)) WHEN 0 THEN to_number(NULL) ELSE SUM(C_Currency_Convert(DB.amount,DB.C_Currency_ID,I.C_Currency_ID,
      TO_DATE(NOW()), null, I.AD_Client_ID, I.AD_Org_ID)) END) INTO v_percentaje
  FROM C_DEBT_PAYMENT DB, C_Invoice I
  WHERE DB.C_Invoice_ID = I.C_Invoice_ID
    AND I.C_INVOICE_ID = p_Invoice_ID;
  RETURN ROUND(v_percentaje,4);
END ; $$;


ALTER FUNCTION public.c_invoice_percentage_paid(p_invoice_id character varying) OWNER TO tad;

--
-- Name: c_invoice_post(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: c_invoice_reverse_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invoice_reverse_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 






    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2009 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
    /*************************************************************************
    * Title: Check the introduced BP is the same as the Invoice
    ************************************************************************/
   v_n NUMERIC;
   v_isprocessed C_Invoice.Processed%TYPE;
   v_bpheader_id C_Invoice.C_BPARTNER_ID%TYPE;
   v_bpreversed_id C_Invoice.C_BPARTNER_ID%TYPE;
   
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

  IF(TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
   SELECT PROCESSED, C_BPARTNER_ID
   INTO v_isprocessed, v_bpheader_id
   FROM C_INVOICE
   WHERE C_INVOICE_ID=NEW.C_INVOICE_ID;
   
   SELECT C_BPARTNER_ID
   INTO v_bpreversed_id
   FROM C_INVOICE
   WHERE C_INVOICE_ID=NEW.REVERSED_C_INVOICE_ID;
   
   IF(v_isprocessed='Y') THEN
     RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
   END IF;
   
   IF(v_bpheader_id <> v_bpreversed_id) THEN
     RAISE EXCEPTION '%', '@NotEqualBPartner@'; --OBTG:-20000--
   END IF;  
  END IF;
  
  IF(TG_OP = 'DELETE') THEN
   SELECT PROCESSED
   INTO v_isprocessed
   FROM C_INVOICE
   WHERE C_INVOICE_ID=OLD.C_INVOICE_ID;
   
   IF(v_isprocessed='Y') THEN
     RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
   END IF;
   
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_invoice_reverse_trg() OWNER TO tad;

--
-- Name: c_invoice_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



--
-- Name: c_invoice_trg2(); Type: FUNCTION; Schema: public; Owner: tad DROPPED
--



--
-- Name: c_invoicediscount_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invoicediscount_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2009 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
  v_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_RO        NUMERIC;
  v_Processed VARCHAR(60) ;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF TG_OP = 'UPDATE' THEN
    SELECT PROCESSED
    INTO v_Processed
    FROM C_INVOICE
    WHERE C_INVOICE_ID=OLD.C_INVOICE_ID;
    IF(v_Processed='Y') THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
  END IF;
  -- Get ID
  IF(TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    v_ID:=NEW.C_Invoice_ID;
  ELSE
    v_ID:=OLD.C_Invoice_ID;
  END IF;
  -- ReadOnly Check
  SELECT COUNT(*)
  INTO v_RO
  FROM C_INVOICE
  WHERE C_Invoice_ID=v_ID
    AND(Processed='Y'
    OR Posted='Y') ;
  IF(v_RO > 0) THEN
    RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_invoicediscount_trg() OWNER TO tad;

--
-- Name: c_invoiceline_tax(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invoiceline_tax(p_invoiceline_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  _______________________________________.
************************************************************************/
v_INVOICELINE_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  v_Tax_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  v_IsTaxIncluded VARCHAR(1);
  v_LineNet NUMERIC;
  v_Rate NUMERIC;
  xTaxAmt NUMERIC:=0;
  v_IsSummary VARCHAR(1);
  v_StdPrecision NUMERIC;
  xTaxBaseAmt NUMERIC;
  v_GrandTotal NUMERIC:=0;
  v_FirstLine BOOLEAN:=FALSE;
  v_ActualBaseAmt NUMERIC:=0;
  --TYPE RECORD IS REFCURSOR;
  Cur_MultiTax RECORD;
BEGIN
--Calculates for each line, its tax info
SELECT l.C_INVOICELINE_ID, 
  l.C_Tax_ID,
  i.IsTaxIncluded,
  COALESCE(l.LineNetAmt, 0) + COALESCE(l.ChargeAmt, 0) AS LineNet,
  t.Rate,
  t.IsSummary,
  c.StdPrecision
INTO
  v_INVOICELINE_ID,
  v_Tax_ID,
  v_IsTaxIncluded,
  v_LineNet,
  v_Rate,
  v_IsSummary,
  v_StdPrecision
FROM C_INVOICE i,
  C_INVOICELINE l,
  C_TAX t,
  C_CURRENCY c
WHERE i.C_Invoice_ID=l.C_Invoice_ID
  AND l.C_InvoiceLine_ID=p_InvoiceLine_ID
  AND l.C_Tax_ID=t.C_Tax_ID
  AND i.C_Currency_ID=c.C_Currency_ID
  AND UPPER(T.NAME) NOT LIKE '%I%R%P%F%'
  AND UPPER(T.NAME) NOT LIKE '%RETEN%'
ORDER BY 4 DESC
;

--Process line
xTaxBaseAmt:=v_LineNet;
IF(v_IsSummary='N') THEN
  xTaxAmt:=ROUND(xTaxBaseAmt * v_Rate / 100, v_StdPrecision) ;
  RETURN xTaxAmt;
ELSE -- Multiple Taxes
  v_GrandTotal:=v_GrandTotal + xTaxBaseAmt;
  v_FirstLine := TRUE;
  FOR Cur_MultiTax IN
    (SELECT C_Tax_ID, Rate, CASCADE
       FROM C_TAX
      WHERE Parent_Tax_ID=v_Tax_ID
        AND UPPER(NAME) NOT LIKE '%I%R%P%F%'
        AND UPPER(NAME) NOT LIKE '%RETEN%'
      ORDER BY Line)
  LOOP
    IF ((Cur_MultiTax.CASCADE = 'Y') AND (NOT v_FirstLine)) THEN   --cannot apply cascade to the first line
      v_ActualBaseAmt := v_GrandTotal;
    ELSE
      v_ActualBaseAmt := xTaxBaseAmt;
    END IF;
    v_FirstLine := FALSE;

    xTaxAmt:=xTaxAmt + ROUND(v_ActualBaseAmt * Cur_MultiTax.Rate / 100, v_StdPrecision) ;
    v_GrandTotal:=v_GrandTotal + xTaxAmt;
    --
  END LOOP;
  RETURN xTaxAmt;
END IF;
END ; $$;


ALTER FUNCTION public.c_invoiceline_tax(p_invoiceline_id character varying) OWNER TO tad;

--
-- Name: c_invoiceline_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--

ALTER FUNCTION public.c_invoiceline_trg2() OWNER TO tad;

--
-- Name: c_invoiceline_trg3(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: c_invoicetax_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invoicetax_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2009 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: C_InvoiceTax_Trg.sql,v 1.3 2003/03/18 07:08:07 jjanke Exp $
    ***
    * Title: ReadOnly Check
    * Description:
    ************************************************************************/
  v_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_RO        NUMERIC;
  v_Processed VARCHAR(60) ;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF TG_OP = 'UPDATE' THEN
    SELECT PROCESSED
    INTO v_Processed
    FROM C_INVOICE
    WHERE C_INVOICE_ID=old.C_INVOICE_ID;
    IF(v_Processed='Y'
    AND ((COALESCE(old.TAXBASEAMT, 0) <> COALESCE(new.TAXBASEAMT, 0))
    OR(COALESCE(old.TAXAMT, 0) <> COALESCE(new.TAXAMT, 0))
    OR(COALESCE(old.C_TAX_ID, '0') <> COALESCE(new.C_TAX_ID, '0'))
    OR(COALESCE(old.AD_ORG_ID, '0') <> COALESCE(new.AD_ORG_ID, '0'))
    OR(COALESCE(old.AD_CLIENT_ID, '0') <> COALESCE(new.AD_CLIENT_ID, '0')))) THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
  END IF;
  -- Get ID
  IF(TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    v_ID:=new.C_Invoice_ID;
  ELSE
    v_ID:=old.C_Invoice_ID;
  END IF;
  -- ReadOnly Check
  SELECT COUNT(*)
  INTO v_RO
  FROM C_Invoice
  WHERE C_Invoice_ID=v_ID
    AND(Processed='Y'
    OR Posted='Y') ;
  IF(v_RO > 0) THEN
    RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.c_invoicetax_trg() OWNER TO tad;

--
-- Name: c_invoicetax_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invoicetax_trg2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
-- Invoice
v_buspartid VARCHAR(32); --OBTG:varchar2--
vIsSalesInvoice CHAR(1);
whamountold NUMERIC;
vProcessed  CHAR(1);
-- InvoiceTax
v_invoiceid VARCHAR(32); --OBTG:varchar2--
v_taxid VARCHAR(32); --OBTG:varchar2--
taxamountnew NUMERIC;
taxamountold NUMERIC;
-- BP_Withholding
isbaseamountpercent CHAR(1);
baseamountpercent NUMERIC;
includetaxinps CHAR(1);
taxinps_ID VARCHAR(32); --OBTG:VARCHAR2--
-- Withholding
withpercent NUMERIC;
-- Tax
v_IsWithTax CHAR(1);
-- Calculated Variables
baseamount  NUMERIC;
whamountnew NUMERIC;
vwithid VARCHAR(32); --OBTG:varchar2--
finish_process BOOLEAN := FALSE;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF(tg_op = 'INSERT') THEN
    v_invoiceid := NEW.c_invoice_id;
    v_taxid := NEW.c_tax_id;
    taxamountnew := NEW.taxamt;
    taxamountold := 0;
    ELSIF(tg_op = 'UPDATE') THEN
      v_invoiceid := NEW.c_invoice_id;
      v_taxid := NEW.c_tax_id;
      taxamountnew := NEW.taxamt;
      taxamountold := OLD.taxamt;
      ELSIF(tg_op = 'DELETE') THEN
        v_invoiceid := OLD.c_invoice_id;
        v_taxid := OLD.c_tax_id;
        taxamountnew := 0;
        taxamountold := OLD.taxamt;
      END IF;
     -- Read data from invoice
     select c_bpartner_id,withholdingamount,issotrx , coalesce(processed,'N') ,c_withholding_id
     into v_buspartid, whamountold, vissalesinvoice, vProcessed   ,vwithid
     from c_invoice
     where c_invoice_id=v_invoiceid;
     -- Se the invoice isn't purchase exit from trigger
     if (vIsSalesInvoice <> 'N') then
        finish_process:= true;
     end if;

  IF (NOT finish_process) THEN
     -- Read data from tax
     select iswithholdingtax into v_IsWithTax from c_tax where c_tax_id=v_taxid;

     -- Read data from Withholding
    BEGIN

       select bpwh.is_percent_wh, bpwh.wh_percent, bpwh.include_tax, bpwh.c_tax_id , wh.rate
       into isbaseamountpercent, baseamountpercent,  includetaxinps, taxinps_id, withpercent
       from c_bp_withholding bpwh ,c_withholding wh
       where bpwh.c_bpartner_id  = v_buspartid
       and bpwh.c_withholding_id = wh.c_withholding_id
        and bpwh.c_withholding_id = vwithid;

     EXCEPTION
      when DATA_EXCEPTION THEN
        finish_process:= true;
     end;
  END IF;
  IF (NOT finish_process) THEN
      IF(isbaseamountpercent <> 'Y') THEN
        baseamountpercent := 100;
      END IF;
  END IF;
  IF (NOT finish_process) THEN
   -- ReadOnly Check
    IF (vProcessed = 'N') THEN
      -- Is the tax is for WithHolding and the BP have the flag activate it add the tax amount
      IF (v_IsWithTax= 'Y') and (includetaxinps = 'Y') THEN
        baseamount := baseamountpercent * (taxamountnew-taxamountold)/100;
        whamountnew := whamountold + withpercent*baseamount/100 ;
        if (v_taxid<>taxinps_id)  then
          whamountnew:=whamountold;
        end if;
        UPDATE c_invoice
        SET withholdingamount = whamountnew
        WHERE c_invoice_id = v_invoiceid;
      END IF;

    END IF;
  END IF;

    IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_invoicetax_trg2() OWNER TO tad;

--
-- Name: c_invoicetodate(character varying, numeric, numeric, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invoicetodate(p_invoicefrecuency character varying, p_invoiceday numeric, p_invoicecutoff numeric, p_date timestamp without time zone) RETURNS timestamp without time zone
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Description: return the last TIMESTAMP that is allowed to invoice orders
************************************************************************/
  v_invoiceToDate TIMESTAMP;
  v_auxDate TIMESTAMP;
  v_date TIMESTAMP;
  v_invoiceDay    NUMERIC;
  v_invoiceCutOff NUMERIC;
BEGIN
  v_invoiceDay:=p_invoiceDay;
  v_invoiceCutOff:=p_invoiceCutOff;
  v_date:=TRUNC(p_date) ;
  IF(p_invoiceFrecuency IN('T')) THEN
    IF(TO_NUMBER(TO_CHAR(v_date, 'DD')) < v_invoiceDay) THEN
      v_invoiceDay:=v_invoiceDay + 15;
    END IF;
    IF((v_invoiceDay < v_invoiceCutOff) OR((v_invoiceCutOff+15) <= v_invoiceDay)) THEN
      v_invoiceCutOff:=v_invoiceCutOff + 15;
    END IF;
  END IF;
  IF(p_invoiceFrecuency IN('M', 'T')) THEN
    -- If date before invoiceDay (and date is not last month day) go to last month
    IF((TO_NUMBER(TO_CHAR(v_date, 'DD')) < p_invoiceDay) AND(v_date < LAST_DAY(v_date))) THEN
      v_auxDate:=C_DATEDAYINMONTH(v_invoiceDay, TO_DATE(ADD_MONTHS(v_date, -1))) ;
    ELSE
      v_auxDate:=C_DATEDAYINMONTH(v_invoiceDay, TO_DATE(v_date)) ;
    END IF;
    IF((TO_NUMBER(TO_CHAR(v_auxDate, 'DD')) < v_invoiceCutOff) AND(v_auxDate < LAST_DAY(v_auxDate))) THEN
      v_invoiceToDate:=C_DATEDAYINMONTH(v_invoiceCutOff, TO_DATE(ADD_MONTHS(v_auxDate, -1))) ;
    ELSE
      v_invoiceToDate:=C_DATEDAYINMONTH(v_invoiceCutOff, TO_DATE(v_auxDate)) ;
    END IF;
  ELSIF(p_invoiceFrecuency IN('W')) THEN
    v_auxDate:=v_date;
    WHILE(TO_NUMBER(TO_CHAR(v_auxDate, 'D')) <> v_invoiceDay)
    LOOP
      v_auxDate:=v_auxDate - 1;
    END LOOP;
    v_invoiceToDate:=v_auxDate;
    WHILE(TO_NUMBER(TO_CHAR(v_invoiceToDate, 'D')) <> v_invoiceCutOff)
    LOOP
      v_invoiceToDate:=v_invoiceToDate - 1;
    END LOOP;
  ELSIF(p_invoiceFrecuency='D') THEN
    v_invoiceToDate:=v_date;
  ELSE
    RAISE NOTICE '%','InvoiceFrecuency not valid: ' || p_invoiceFrecuency ;
  END IF;
  RETURN v_invoiceToDate;
END ; $$;


ALTER FUNCTION public.c_invoicetodate(p_invoicefrecuency character varying, p_invoiceday numeric, p_invoicecutoff numeric, p_date timestamp without time zone) OWNER TO tad;

--
-- Name: c_invtax_chk_restrictions_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_invtax_chk_restrictions_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 






/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_Processed VARCHAR(60) ;
  v_C_INVOICE_ID VARCHAR(32) ; --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF TG_OP = 'INSERT' THEN
    v_C_INVOICE_ID:=new.C_INVOICE_ID;
  ELSE
    v_C_INVOICE_ID:=old.C_INVOICE_ID;
  END IF;
  SELECT PROCESSED
  INTO v_Processed
  FROM C_INVOICE
  WHERE C_INVOICE_ID=v_C_INVOICE_ID;
  IF TG_OP = 'UPDATE' THEN
    IF(v_Processed='Y' AND ((COALESCE(old.TAXBASEAMT, 0) <> COALESCE(new.TAXBASEAMT, 0))
	   OR(COALESCE(old.TAXAMT, 0) <> COALESCE(new.TAXAMT, 0))
	   OR(COALESCE(old.C_TAX_ID, '0') <> COALESCE(new.C_TAX_ID, '0'))
	   OR(COALESCE(old.AD_ORG_ID, '0') <> COALESCE(new.AD_ORG_ID, '0'))
	   OR(COALESCE(old.AD_CLIENT_ID, '0') <> COALESCE(new.AD_CLIENT_ID, '0'))))
  THEN
      RAISE EXCEPTION '%', 'Document processed/posted - ' || old.TAXBASEAMT || ' - ' ||new.TAXBASEAMT || ' - ' ||old.TAXAMT || ' - ' || new.TAXAMT || ' - ' || old.C_TAX_ID || ' - ' ||new.C_TAX_ID ; --OBTG:-20501--
    END IF;
  END IF;
  IF((TG_OP = 'DELETE' OR TG_OP = 'INSERT') AND v_Processed='Y') THEN
    RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_invtax_chk_restrictions_trg() OWNER TO tad;

--
-- Name: c_location_description(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_location_description(p_c_location_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Title:   Return the description of the location
* Description:
*
************************************************************************/
  v_description VARCHAR(4000) ; --OBTG:NVARCHAR2--
BEGIN
  SELECT COALESCE(TO_CHAR(L.ADDRESS1), '') ||(
    CASE
      WHEN(L.ADDRESS2) IS NULL
      THEN ''
      ELSE(CHR(10) ||TO_CHAR(L.ADDRESS2))
    END
    ) || (
    CASE
      WHEN(L.POSTAL||L.CITY||R.NAME) IS NULL
      THEN ''
      ELSE CHR(10) ||L.POSTAL ||(
      CASE
        WHEN(L.POSTAL) IS NULL
        THEN ''
        ELSE ' - '||TO_CHAR(L.CITY)
      END
      ) || (
      CASE
        WHEN(R.NAME) IS NULL
        THEN ''
        ELSE ' ('||TO_CHAR(R.NAME) || ')'
      END
      )
    END
    )
  INTO v_description
  FROM C_LOCATION L
  LEFT JOIN C_REGION R
    ON L.C_REGION_ID=R.C_REGION_ID
  WHERE L.C_LOCATION_ID=p_C_Location_ID;
  RETURN v_description;
END ; $$;


ALTER FUNCTION public.c_location_description(p_c_location_id character varying) OWNER TO tad;

--
-- Name: FUNCTION c_location_description(p_c_location_id character varying); Type: COMMENT; Schema: public; Owner: tad
--

COMMENT ON FUNCTION c_location_description(p_c_location_id character varying) IS '--OBTG:C_LOCATION_DESCRIPTIONfunc=NVARCHAR--';


--
-- Name: c_location_identifier(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_location_identifier(p_c_location_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Title:   Return the description of the location for search fields
* Description:
*
************************************************************************/
  v_description VARCHAR(4000) ; --OBTG:NVARCHAR2--
  v_DefaultCountry VARCHAR(4000) ; --OBTG:VARCHAR2--
BEGIN  SELECT MAX(C_COUNTRY_ID)
  INTO v_DefaultCountry
  FROM C_COUNTRY
  WHERE ISACTIVE = 'Y'
    AND ISDEFAULT = 'Y';
  SELECT COALESCE(TO_CHAR(L.ADDRESS1), '') ||
    CASE
      WHEN(L.ADDRESS2) IS NULL
      THEN ''
      ELSE ', ' || TO_CHAR(L.ADDRESS2)
    END
    ||
    CASE
      WHEN(L.POSTAL) IS NULL
      THEN ''
      ELSE ', '|| L.POSTAL
    END
    ||
    CASE
      WHEN(L.CITY) IS NULL
      THEN ''
      ELSE ', '||TO_CHAR(L.CITY)
    END
    ||
    CASE
      WHEN(R.NAME) IS NULL
      THEN ''
      ELSE ', '||TO_CHAR(R.NAME)
    END
    ||(
    CASE C.C_COUNTRY_ID
      WHEN v_DefaultCountry
      THEN ''
      ELSE ' (' || TO_CHAR(C.NAME) || ')'
    END
    )
  INTO v_description
  FROM C_REGION R
  LEFT JOIN C_COUNTRY C
    ON R.C_COUNTRY_ID = C.C_COUNTRY_ID
  RIGHT JOIN C_LOCATION L
    ON L.C_REGION_ID = R.C_REGION_ID
  WHERE L.C_LOCATION_ID = p_C_Location_ID;
  RETURN v_description;
END ; $$;


ALTER FUNCTION public.c_location_identifier(p_c_location_id character varying) OWNER TO tad;

--
-- Name: FUNCTION c_location_identifier(p_c_location_id character varying); Type: COMMENT; Schema: public; Owner: tad
--

COMMENT ON FUNCTION c_location_identifier(p_c_location_id character varying) IS '--OBTG:C_LOCATION_IDENTIFIERfunc=NVARCHAR--';


--
-- Name: c_location_name(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_location_name(p_c_location_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Title:   Return the short name of the location
* Description:
*
************************************************************************/
  v_name VARCHAR(242) ; --OBTG:NVARCHAR2--
BEGIN  SELECT COALESCE(TO_CHAR(L.CITY), '') ||', '||COALESCE(TO_CHAR(L.ADDRESS1), '')
  INTO v_name
  FROM C_LOCATION L
  WHERE L.C_LOCATION_ID=p_C_Location_ID;
  IF(LENGTH(v_name) > 59) THEN
    v_name:=SUBSTR(v_name, 1, 56) ||'...';
  END IF;
  RETURN v_name;
END ; $$;


ALTER FUNCTION public.c_location_name(p_c_location_id character varying) OWNER TO tad;

--
-- Name: FUNCTION c_location_name(p_c_location_id character varying); Type: COMMENT; Schema: public; Owner: tad
--

COMMENT ON FUNCTION c_location_name(p_c_location_id character varying) IS '--OBTG:C_LOCATION_NAMEfunc=NVARCHAR--';


--
-- Name: c_location_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_location_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

  /*************************************************************************
  * The contents of this file are subject to the Openbravo  Public  License
  * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
  * Version 1.1  with a permitted attribution clause; you may not  use this
  * file except in compliance with the License. You  may  obtain  a copy of
  * the License at http://www.openbravo.com/legal/license.html
  * Software distributed under the License  is  distributed  on  an "AS IS"
  * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  * License for the specific  language  governing  rights  and  limitations
  * under the License.
  * The Original Code is Openbravo ERP.
  * The Initial Developer of the Original Code is Openbravo SL
  * All portions are Copyright (C) 2001-2008 Openbravo SL
  * All Rights Reserved.
  * Contributor(s):  ______________________________________.
  ************************************************************************/
  --TYPE RECORD IS REFCURSOR;
  cur_Bank RECORD;
  cur_BankAccount RECORD;
  v_IBANCount NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  FOR cur_Bank IN 
    (SELECT C_BANK_ID
    FROM C_BANK
    WHERE C_LOCATION_ID=NEW.C_LOCATION_ID)
  LOOP
    FOR cur_BankAccount IN
      (SELECT C_BANKACCOUNT_ID
      FROM C_BANKACCOUNT
      WHERE C_BANK_ID=cur_Bank.C_BANK_ID)
    LOOP
      SELECT COUNT(IBAN)
      INTO v_IBANCount
      FROM C_BANKACCOUNT
      WHERE C_BANKACCOUNT_ID=cur_BankAccount.C_BANKACCOUNT_ID;
      IF (v_IBANCount > 0 AND OLD.C_COUNTRY_ID <> NEW.C_COUNTRY_ID) THEN
        RAISE EXCEPTION '%', 'An IBAN account is defined for this bank. Country must not be changed.' ; --OBTG:-20259--
      END IF;
    END LOOP;
  END LOOP;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_location_trg() OWNER TO tad;

--
-- Name: c_order_actualize_pricelist(character varying); Type: FUNCTION; Schema: public; Owner: tad
-- SZ Removed
--

--
-- Name: c_order_chk_restrinctions_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: c_order_fact_reset(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_order_fact_reset(p_c_order_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_AD_Table_ID VARCHAR(32) ; --OBTG:VARCHAR2--
BEGIN
  SELECT AD_Table_ID INTO v_AD_Table_ID FROM AD_Table WHERE TABLENAME='C_Order';
  IF v_AD_Table_ID IS NULL THEN
    RAISE EXCEPTION '%', '@TableNotFound@' ; --OBTG:-20000--
  END IF;
  UPDATE C_Order
    SET Posted='N',
    Processing='N'
  WHERE C_Order_ID=p_C_Order_ID
    AND(Posted<>'N'
    OR Posted IS NULL
    OR Processing<>'N'
    OR Processing IS NULL) ;
  DELETE FROM Fact_Acct  WHERE AD_Table_ID=v_AD_Table_ID  AND RECORD_ID=p_C_Order_ID;
  -- Commented by cromero 19102006 -- COMMIT;
  RETURN;
EXCEPTION
WHEN OTHERS THEN
  RAISE EXCEPTION '%', SQLERRM;
  -- ROLLBACK;
  RETURN;
END ; $$;


ALTER FUNCTION public.c_order_fact_reset(p_c_order_id character varying) OWNER TO tad;

--
-- Name: c_order_po_create(character varying); Type: FUNCTION; Schema: public; Owner: tad
--


ALTER FUNCTION public.c_order_po_create(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_order_post(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_order_post(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/******************************************************************************
  * The contents of this file are subject to the   Compiere License  Version 1.1
  * ("License"); You may not use this file except in compliance with the License
  * You may obtain a copy of the License at http://www.compiere.org/license.html
  * Software distributed under the License is distributed on an  "AS IS"  basis,
  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
  * the specific language governing rights and limitations under the License.
  * The Original Code is                  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke  and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke, parts
  * created by ComPiere are Copyright (C) ComPiere, Inc.;   All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2006 Openbravo S.L.
  ******************************************************************************/
BEGIN
  PERFORM C_ORDER_POST1(p_PInstance_ID, NULL) ;
END ; $$;


ALTER FUNCTION public.c_order_post(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_order_post1(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: c_order_status(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_order_status(p_orderid character varying) RETURNS character
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_Status            VARCHAR(60) ;
  v_OrderStatus       VARCHAR(60) ;
  v_CountNotDelivered NUMERIC;
  v_CountNotInvoiced  NUMERIC;
  v_CountNotPaid      VARCHAR(32); --OBTG:varchar2--
BEGIN
  SELECT MAX(Docstatus)
  INTO v_OrderStatus
  FROM C_Order
  WHERE C_Order.C_Order_ID = p_OrderID;
  IF(v_OrderStatus IS NULL) THEN
    v_Status := '1'; -- In transit
  ELSIF(v_OrderStatus = 'VO') THEN
    v_Status := '0'; -- Cancelled
  ELSIF(v_OrderStatus = 'DR') THEN
    v_Status := '8'; -- Draft
  ELSE
    --delivered
    SELECT COUNT(*)
    INTO v_CountNotDelivered
    FROM C_OrderLine
    WHERE C_ORDER_ID = p_OrderID
      AND QtyOrdered <> QtyDelivered;
    --Invoiced
    SELECT COUNT(*)
    INTO v_CountNotInvoiced
    FROM C_OrderLine
    WHERE C_ORDER_ID = p_OrderID
      AND QtyOrdered <> QtyInvoiced;
    --paid
    IF(v_CountNotInvoiced = 0) THEN
      SELECT COUNT(*)
      INTO v_CountNotPaid
      FROM C_Invoice
      WHERE EXISTS
        (SELECT 1
        FROM C_InvoiceLine,
          C_OrderLine
        WHERE C_InvoiceLine.C_OrderLine_ID = C_OrderLine.C_OrderLine_ID
          AND C_InvoiceLine.C_Invoice_ID = C_Invoice.C_Invoice_ID
          AND C_OrderLine.C_Order_ID = p_OrderID
        )
        AND grandtotal <>
        (SELECT SUM(C_Currency_Convert(Amount, C_Debt_Payment.C_Currency_ID, C_Invoice.C_Currency_ID, C_Invoice.DateInvoiced, null, null, null))
        FROM C_Debt_Payment
        WHERE C_Invoice_ID = C_Invoice.C_Invoice_ID
          AND C_Debt_Payment_Paid(C_Debt_Payment_ID) = 'Y'
        )
        ;
    ELSE
      SELECT COUNT(*)
      INTO v_CountNotPaid
      FROM C_Order
      WHERE C_Order_ID = p_OrderID
        AND grandtotal <>
        (SELECT SUM(C_Currency_Convert(Amount, C_Debt_Payment.C_Currency_ID, C_Order.C_Currency_ID, TO_DATE(TO_DATE(NOW())), null, null, null))
        FROM C_Debt_Payment
        WHERE C_Order_ID = p_OrderID
          AND C_Debt_Payment_Paid(C_Debt_Payment_ID) = 'Y'
        )
        ;
    END IF;
    IF(v_CountNotDelivered <> 0 AND v_CountNotInvoiced <> 0 AND v_CountNotPaid <> 0) THEN
      v_Status := '2'; --Pending
    ELSIF(v_CountNotDelivered <> 0 AND v_CountNotInvoiced <> 0 AND v_CountNotPaid = 0) THEN
      v_Status := '3'; --Paid and not delivered
    ELSIF(v_CountNotDelivered = 0 AND v_CountNotInvoiced <> 0 AND v_CountNotPaid <> 0) THEN
      v_Status := '4'; --Delivered, not invoiced nor paid
    ELSIF(v_CountNotDelivered = 0 AND v_CountNotInvoiced = 0 AND v_CountNotPaid <> 0) THEN
      v_Status := '5'; --Invoiced not paid
    ELSIF(v_CountNotDelivered = 0 AND v_CountNotInvoiced <> 0 AND v_CountNotPaid = 0) THEN
      v_Status := '6'; --Pending to invoice
    ELSIF(v_CountNotDelivered = 0 AND v_CountNotInvoiced = 0 AND v_CountNotPaid = 0) THEN
      v_Status := '9'; --Finished
    END IF;
  END IF;
  RETURN v_Status;
END ; $$;


ALTER FUNCTION public.c_order_status(p_orderid character varying) OWNER TO tad;

--
-- Name: c_order_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



--
-- Name: c_order_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: c_orderdiscount_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_orderdiscount_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2009 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
  v_ID C_Order.C_Order_ID%TYPE;
  v_RO        NUMERIC;
  v_Processed CHAR(1) ;
BEGIN
  IF TG_OP = 'UPDATE' THEN
    SELECT PROCESSED
    INTO v_Processed
    FROM C_ORDER
    WHERE C_ORDER_ID=OLD.C_ORDER_ID;
    IF(v_Processed='Y') THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
  END IF;
  -- Get ID
  IF(TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    v_ID:=NEW.C_ORDER_ID;
  ELSE
    v_ID:=OLD.C_ORDER_ID;
  END IF;
  -- ReadOnly Check
  SELECT COUNT(*)
  INTO v_RO
  FROM C_ORDER
  WHERE C_ORDER_ID=v_ID
    AND(Processed='Y'
    OR Posted='Y') ;
  IF(v_RO > 0) THEN
    RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_orderdiscount_trg() OWNER TO tad;

--
-- Name: c_orderline2_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: c_orderline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: c_orderline_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_orderline_trg2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 






    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2006 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/

   --TYPE RECORD IS REFCURSOR;
   Cur_Offer RECORD;

  v_OrderLine_Offer_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_lineno NUMERIC:=0;
  v_Price NUMERIC;
  v_PriceNew NUMERIC;
  v_Amt NUMERIC;
  v_BPartner_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Order_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Insert BOOLEAN :=FALSE;
  v_Precision NUMERIC;
  v_PriceList_ID VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;



 IF TG_OP = 'UPDATE' THEN
  IF ((NEW.DateOrdered != OLD.DateOrdered)
     OR (COALESCE(NEW.PriceActual,0) != COALESCE(OLD.PriceActual,0))
     OR (COALESCE(NEW.PriceList,0) != COALESCE(OLD.PriceList,0))
     OR (COALESCE(NEW.M_Product_ID,'0') != COALESCE(OLD.M_Product_ID,'0'))
  OR (COALESCE(NEW.QtyOrdered,0) != COALESCE(OLD.QtyOrdered,0)))
 THEN
  DELETE FROM C_ORDERLINE_OFFER
  WHERE C_OrderLine_ID = NEW.C_OrderLine_ID;
   v_Insert := TRUE;
 END IF;
 END IF;

 IF TG_OP = 'INSERT' OR v_Insert THEN
   SELECT C_BPartner_ID, PricePrecision, M_PriceList_ID
     INTO v_BPartner_ID, v_Precision, v_PriceList_ID
     FROM C_ORDER o,
          C_CURRENCY c
    WHERE C_Order_ID = NEW.C_Order_ID
      AND o.C_Currency_ID = c.C_Currency_ID;

  --Get the new "std" price from the Actual price (if actual price is the std price they will be equal)
   v_Price := NEW.PriceActual;
    FOR Cur_Offer IN (SELECT M_OFFER_ID
         FROM M_OFFER
         WHERE NEW.DateOrdered BETWEEN DATEFROM AND COALESCE(DATETO,TO_DATE('31-12-9999','DD-MM-YYYY'))
   AND IsActive = 'Y'
   AND (NEW.QtyOrdered >= COALESCE(Qty_From,0) OR Qty_From IS NULL)
   AND (NEW.QtyOrdered <= COALESCE(Qty_To,0) OR Qty_To IS NULL)
   AND ((PRICELIST_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM M_OFFER_PRICELIST
           WHERE M_OFFER_ID=M_OFFER.M_OFFER_ID
           AND M_PRICELIST_ID = v_PriceList_ID))
         OR (PRICELIST_SELECTION='N' AND EXISTS(SELECT 1 FROM M_OFFER_PRICELIST
            WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
            AND M_PRICELIST_ID = v_PriceList_ID)))
         AND ((BPARTNER_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM M_OFFER_BPARTNER
           WHERE M_OFFER_ID=M_OFFER.M_OFFER_ID
           AND C_BPARTNER_ID = v_BPartner_ID AND IsActive = 'Y'))
         OR (BPARTNER_SELECTION='N' AND EXISTS(SELECT 1 FROM M_OFFER_BPARTNER
            WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
            AND C_BPARTNER_ID = v_BPartner_ID AND IsActive = 'Y')))
         AND ((BP_GROUP_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM C_BPARTNER B, M_OFFER_BP_GROUP OB
           WHERE OB.M_OFFER_ID = M_OFFER.M_OFFER_ID
           AND B.C_BPARTNER_ID = v_BPartner_ID
           AND OB.C_BP_GROUP_ID = B.C_BP_GROUP_ID))
         OR (BP_GROUP_SELECTION='N' AND EXISTS (SELECT 1 FROM C_BPARTNER B, M_OFFER_BP_GROUP OB
           WHERE OB.M_OFFER_ID = M_OFFER.M_OFFER_ID
           AND B.C_BPARTNER_ID = v_BPartner_ID
           AND OB.C_BP_GROUP_ID = B.C_BP_GROUP_ID)))
         AND ((PRODUCT_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM M_OFFER_PRODUCT
           WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
           AND M_PRODUCT_ID = NEW.M_PRODUCT_ID))
         OR (PRODUCT_SELECTION='N' AND EXISTS (SELECT 1 FROM M_OFFER_PRODUCT
            WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
            AND M_PRODUCT_ID = NEW.M_PRODUCT_ID)))
         AND ((PROD_CAT_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM M_PRODUCT P, M_OFFER_PROD_CAT OP
           WHERE OP.M_OFFER_ID = M_OFFER.M_OFFER_ID
           AND P.M_PRODUCT_ID = NEW.M_PRODUCT_ID
           AND OP.M_PRODUCT_CATEGORY_ID = P.M_PRODUCT_CATEGORY_ID))
         OR (PROD_CAT_SELECTION='N' AND EXISTS (SELECT 1 FROM M_PRODUCT P, M_OFFER_PROD_CAT OP
           WHERE OP.M_OFFER_ID = M_OFFER.M_OFFER_ID
           AND P.M_PRODUCT_ID = NEW.M_PRODUCT_ID
           AND OP.M_PRODUCT_CATEGORY_ID = P.M_PRODUCT_CATEGORY_ID)))
         ORDER BY PRIORITY DESC, M_OFFER_ID) LOOP
    v_Price := M_Get_Offer_Std_Price(Cur_Offer.M_Offer_ID, v_Price);
   END LOOP;


--   :new.PriceStd := v_Price;


   FOR Cur_Offer IN (SELECT M_OFFER_ID
        FROM M_OFFER
        WHERE NEW.DateOrdered BETWEEN DATEFROM AND COALESCE(DATETO,TO_DATE('31-12-9999','DD-MM-YYYY'))
  AND IsActive = 'Y'
  AND (NEW.QtyOrdered >= COALESCE(Qty_From,0) OR Qty_From IS NULL)
  AND (NEW.QtyOrdered <= COALESCE(Qty_To,0) OR Qty_To IS NULL)
  AND ((PRICELIST_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM M_OFFER_PRICELIST
           WHERE M_OFFER_ID=M_OFFER.M_OFFER_ID
           AND M_PRICELIST_ID = v_PriceList_ID))
         OR (PRICELIST_SELECTION='N' AND EXISTS(SELECT 1 FROM M_OFFER_PRICELIST
            WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
            AND M_PRICELIST_ID = v_PriceList_ID)))
        AND ((BPARTNER_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM M_OFFER_BPARTNER
          WHERE M_OFFER_ID=M_OFFER.M_OFFER_ID
          AND C_BPARTNER_ID = v_BPartner_ID AND IsActive = 'Y'))
        OR (BPARTNER_SELECTION='N' AND EXISTS(SELECT 1 FROM M_OFFER_BPARTNER
           WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
           AND C_BPARTNER_ID = v_BPartner_ID AND IsActive = 'Y')))
        AND ((BP_GROUP_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM C_BPARTNER B, M_OFFER_BP_GROUP OB
          WHERE OB.M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND B.C_BPARTNER_ID = v_BPartner_ID
          AND OB.C_BP_GROUP_ID = B.C_BP_GROUP_ID))
        OR (BP_GROUP_SELECTION='N' AND EXISTS (SELECT 1 FROM C_BPARTNER B, M_OFFER_BP_GROUP OB
          WHERE OB.M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND B.C_BPARTNER_ID = v_BPartner_ID
          AND OB.C_BP_GROUP_ID = B.C_BP_GROUP_ID)))
        AND ((PRODUCT_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM M_OFFER_PRODUCT
          WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND M_PRODUCT_ID = NEW.M_PRODUCT_ID))
        OR (PRODUCT_SELECTION='N' AND EXISTS (SELECT 1 FROM M_OFFER_PRODUCT
           WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
           AND M_PRODUCT_ID = NEW.M_PRODUCT_ID)))
        AND ((PROD_CAT_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM M_PRODUCT P, M_OFFER_PROD_CAT OP
          WHERE OP.M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND P.M_PRODUCT_ID = NEW.M_PRODUCT_ID
          AND OP.M_PRODUCT_CATEGORY_ID = P.M_PRODUCT_CATEGORY_ID))
        OR (PROD_CAT_SELECTION='N' AND EXISTS (SELECT 1 FROM M_PRODUCT P, M_OFFER_PROD_CAT OP
          WHERE OP.M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND P.M_PRODUCT_ID = NEW.M_PRODUCT_ID
          AND OP.M_PRODUCT_CATEGORY_ID = P.M_PRODUCT_CATEGORY_ID)))
        ORDER BY PRIORITY, M_OFFER_ID DESC) LOOP
   SELECT * INTO  v_OrderLine_Offer_ID FROM Ad_Sequence_Next('C_OrderLine_Offer', NEW.AD_Client_ID);
   v_lineno := v_lineno + 10;
   v_PriceNew := M_Get_Offer_Price(Cur_Offer.M_Offer_ID, v_Price);
   v_Amt := v_Price - v_PriceNew;

   IF (NEW.CANCELPRICEAD='N')
    THEN
     INSERT INTO C_ORDERLINE_OFFER
         (C_ORDERLINE_OFFER_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE,
        CREATED, CREATEDBY, UPDATED, UPDATEDBY,
        C_ORDERLINE_ID, LINE, M_OFFER_ID, PRICEOFFER, AMTOFFER)
     VALUES
         (v_OrderLine_Offer_ID, NEW.AD_Client_ID, NEW.AD_Org_ID, NEW.IsActive,
        TO_DATE(NOW()),NEW.CreatedBy, TO_DATE(NOW()),NEW.UpdatedBy,
       NEW.C_OrderLine_ID, v_lineno, Cur_Offer.M_Offer_Id, ROUND(v_Price,v_Precision), ROUND(v_Amt,v_Precision));
      v_Price := v_PriceNew;
   END IF;
  END LOOP;
 END IF;

IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_orderline_trg2() OWNER TO tad;

--
-- Name: c_ordertax_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.c_ordertax_trg() OWNER TO tad;

--
-- Name: c_ordline_chk_restrictions_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: c_payinadvance_create(character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_payinadvance_create(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_paymentduedate(character varying, character, numeric, numeric, numeric, numeric, numeric, character, character, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_paymentduedate(p_bpartner_id character varying, p_issotrx character, p_fixmonthday1 numeric, p_fixmonthday2 numeric, p_fixmonthday3 numeric, p_netdays numeric, p_fixmonthoffset numeric, p_netday character, p_isnextbusinessday character, p_docdate timestamp without time zone) RETURNS timestamp without time zone
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2007 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Title: Get Payment Due TIMESTAMP
************************************************************************/
  v_docDate TIMESTAMP;
  v_DueDate TIMESTAMP;
  v_fixMonthDay1 NUMERIC;
  v_fixMonthDay2 NUMERIC;
  v_fixMonthDay3 NUMERIC;
  v_FixMonthDay  NUMERIC;
  v_Aux NUMERIC;
BEGIN
  IF(p_isSoTrx = 'Y') THEN
    SELECT FIXMONTHDAY,
      FIXMONTHDAY2,
      FIXMONTHDAY3
    INTO v_FixMonthDay1,
      v_FixMonthDay2,
      v_FixMonthDay3
    FROM C_BPARTNER
    WHERE C_BPARTNER_ID = p_bPartner_ID;
  ELSE
    SELECT PO_FIXMONTHDAY,
      PO_FIXMONTHDAY2,
      PO_FIXMONTHDAY3
    INTO v_FixMonthDay1,
      v_FixMonthDay2,
      v_FixMonthDay3
    FROM C_BPARTNER
    WHERE C_BPARTNER_ID = p_bPartner_ID;
  END IF;
  IF(v_FixMonthDay1 IS NULL) THEN
    v_FixMonthDay1 := p_fixMonthDay1;
    v_FixMonthDay2 := p_fixMonthDay2;
    v_FixMonthDay3 := p_fixMonthDay3;
  END IF;
  IF(v_fixMonthDay1 IS NOT NULL) THEN
    --First aply offset (days and months)
    v_docDate := p_DocDate + COALESCE(p_netDays, 0) ;
    v_docDate := C_ADD_MONTHS2(v_docDate, COALESCE(p_fixMonthOffset, 0)) ;
    IF((v_fixMonthDay2 < TO_NUMBER(TO_CHAR(TRUNC(v_docDate), 'dd'))) AND(v_fixMonthDay3 >= TO_NUMBER(TO_CHAR(TRUNC(v_docDate), 'dd')))) THEN
      v_FixMonthDay := v_fixMonthDay3;
    ELSIF((v_fixMonthDay1 < TO_NUMBER(TO_CHAR(TRUNC(v_docDate), 'dd'))) AND(v_fixMonthDay2 >= TO_NUMBER(TO_CHAR(TRUNC(v_docDate), 'dd')))) THEN
      v_FixMonthDay := v_fixMonthDay2;
    ELSE
      v_FixMonthDay := v_fixMonthDay1;
      IF(v_FixMonthDay < TO_NUMBER(TO_CHAR(TRUNC(v_docDate), 'dd'))) THEN
        v_docDate := ADD_MONTHS(v_docDate, 1) ;
      END IF;
    END IF;
    v_DueDate := C_Datedayinmonth(v_FixMonthDay, TO_DATE(v_docDate)) ;
  ELSE
    v_DueDate := TRUNC(p_DocDate) + COALESCE(p_netDays, 0) ;
    v_DueDate := ADD_MONTHS(v_DueDate, COALESCE(p_fixMonthOffset, 0)) ;
    WHILE(TO_CHAR(v_DueDate, 'D') NOT LIKE p_netDay)
    LOOP
      v_DueDate := v_DueDate + 1;
    END LOOP;
  END IF;
  IF(p_isNextbusinessday = 'Y') THEN
    --The first day of the week depends on the database configuration for oracle
    --It is used the Julian day to ensure that saturday and sunday are always
    --the days 6 and 7 of the week in both oracle and postgresql databases.
    SELECT MOD(to_number(to_char(v_DueDate, 'J')), 7) + 1 INTO v_Aux from DUAL;
    WHILE(v_Aux IN('6', '7'))
    LOOP
      v_DueDate := v_DueDate + 1;
      SELECT MOD(to_number(to_char(v_DueDate, 'J')), 7) + 1 INTO v_Aux from DUAL;
    END LOOP;
  END IF;
  RETURN COALESCE(v_DueDate, TRUNC(p_DocDate)) ;
END ; $$;


ALTER FUNCTION public.c_paymentduedate(p_bpartner_id character varying, p_issotrx character, p_fixmonthday1 numeric, p_fixmonthday2 numeric, p_fixmonthday3 numeric, p_netdays numeric, p_fixmonthoffset numeric, p_netday character, p_isnextbusinessday character, p_docdate timestamp without time zone) OWNER TO tad;

--
-- Name: c_paymentterm_duedate(character varying, timestamp without time zone, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_paymentterm_duedate(p_paymentterm_id character varying, p_docdate timestamp without time zone, p_bpartner_id character varying) RETURNS timestamp without time zone
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*************************************************************************
* Title: Get Due TIMESTAMP
* Description:
* Grace days are not considered!
************************************************************************/
    v_DueDate TIMESTAMP;
    --
  --TYPE RECORD IS REFCURSOR;
    Cur_PT RECORD;
  BEGIN
    FOR Cur_PT IN
      (SELECT *  FROM C_PaymentTerm  WHERE C_PaymentTerm_ID = p_PaymentTerm_ID)
    LOOP
      -- Pending: Vendor invoices not arranged
      v_DueDate := C_PaymentDueDate(p_BPartner_ID, 'Y', Cur_PT.FixMonthDay, Cur_PT.FixMonthDay2, Cur_PT.FixMonthDay3, Cur_PT.NetDays, Cur_PT.FixMonthOffset, Cur_PT.NetDay, Cur_PT.IsNextbusinessday, p_DocDate) ;
    END LOOP;
    RETURN COALESCE(v_DueDate, TRUNC(p_DocDate)) ;
END ; $$;


ALTER FUNCTION public.c_paymentterm_duedate(p_paymentterm_id character varying, p_docdate timestamp without time zone, p_bpartner_id character varying) OWNER TO tad;

--
-- Name: c_paymentterm_duedays(character varying, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_paymentterm_duedays(p_paymentterm_id character varying, p_docdate timestamp without time zone, p_paydate timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
  RETURN TRUNC(p_PayDate) - C_PAYMENTTERM_DUEDATE(p_PaymentTerm_ID, p_DocDate, NULL) ;
END ; $$;


ALTER FUNCTION public.c_paymentterm_duedays(p_paymentterm_id character varying, p_docdate timestamp without time zone, p_paydate timestamp without time zone) OWNER TO tad;

--
-- Name: c_paymentterm_duedays(character varying, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_paymentterm_duedays(p_paymentterm_id character varying, p_docdate timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
RETURN C_PAYMENTTERM_DUEDAYS ($1, $2, TO_DATE(NOW()));
END
; $_$;


ALTER FUNCTION public.c_paymentterm_duedays(p_paymentterm_id character varying, p_docdate timestamp without time zone) OWNER TO tad;

--
-- Name: c_paymentterm_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.c_paymentterm_trg() OWNER TO tad;

--
-- Name: c_period_process(character varying); Type: FUNCTION; Schema: public; Owner: tad
--


ALTER FUNCTION public.c_period_process(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_period_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_period_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * Fill Period Control
    */
    v_NextNo VARCHAR(32); --OBTG:VARCHAR2--
  --TYPE RECORD IS REFCURSOR;
    CUR_DocType RECORD;
      
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


    FOR CUR_DocType IN
      (SELECT Value , a.AD_Org_ID AS Organization
       FROM AD_Ref_List , (SELECT o.AD_Org_ID 
                           FROM AD_Org o
                           WHERE o.ISREADY='Y'
                           AND o.ISPERIODCONTROLALLOWED='Y'
                           and exists (SELECT 1
                                                  FROM C_Year, c_calendar, ad_org
                                                  WHERE C_Year.c_calendar_id = c_calendar.c_calendar_id
                                                  and c_calendar.c_calendar_id = ad_org.c_calendar_id
                                                  and C_Year.C_Year_ID=new.C_Year_ID
                                                  and ad_org.ad_org_id = ad_org_getcalendarowner(o.AD_ORG_ID))
                          ) a
       WHERE AD_Reference_ID='183'
       ORDER BY 1)
    LOOP
      SELECT * INTO  v_NextNo FROM AD_Sequence_Next('C_PeriodControl', new.AD_Client_ID) ;
      INSERT
      INTO C_PeriodControl
        (
          C_PeriodControl_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy,
          Updated, UpdatedBy, C_Period_ID,
          DocBaseType, PeriodStatus, PeriodAction,
          Processing
        )
        VALUES
        (
          v_NextNo, new.AD_Client_ID, CUR_DocType.Organization,
           'Y', TO_DATE(NOW()),  '0',
          TO_DATE(NOW()), '0', new.C_Period_ID,
          CUR_DocType.Value, 'N', 'N',
          NULL
        )
        ;
      -- NeverOpened, NoAction
    END LOOP;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_period_trg() OWNER TO tad;

--
-- Name: c_period_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_period_trg2() OWNER TO tad;

--
-- Name: c_periodcontrol_process(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_periodcontrol_process(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_PeriodControl_Process.sql,v 1.2 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: Opens/Close Period Control
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Variables
    v_PeriodAction C_PeriodControl.PeriodAction%TYPE;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    v_ResultStr:='ReadingAction';
    SELECT PeriodAction
    INTO v_PeriodAction
    FROM C_PeriodControl
    WHERE C_PeriodControl_ID=v_Record_ID  FOR UPDATE; --OBTG: OF PeriodStatus--
    v_ResultStr:='UpdatingStatus';
    -- Action: Open if not permanently closed
    IF(v_PeriodAction='O') THEN
      UPDATE C_PeriodControl
        SET PeriodStatus='O',
        PeriodAction='N'
      WHERE C_PeriodControl_ID=v_Record_ID
        AND PeriodStatus<>'P';
      -- Action: Close if not permanently closed
    ELSIF(v_PeriodAction='C') THEN
      UPDATE C_PeriodControl
        SET PeriodStatus='C',
        PeriodAction='N'
      WHERE C_PeriodControl_ID=v_Record_ID
        AND PeriodStatus<>'P';
      -- Action: Permanently Close
    ELSIF(v_PeriodAction='P') THEN
      UPDATE C_PeriodControl
        SET PeriodStatus='P',
        PeriodAction='N'
      WHERE C_PeriodControl_ID=v_Record_ID;
    END IF;
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $_$;


ALTER FUNCTION public.c_periodcontrol_process(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_project_generate(character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_project_generate(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_project_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_project_trg() OWNER TO tad;

--
-- Name: c_project_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_project_trg2() OWNER TO tad;

--
-- Name: c_project_trg3(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_project_trg3() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2006 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
  v_Count NUMERIC;
  v_Tree_ID   VARCHAR(32); --OBTG:varchar2--
  v_Parent_ID VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT c.AD_Tree_Project_ID,
    n.Node_ID
  INTO v_Tree_ID,
    v_Parent_ID
  FROM AD_ClientInfo c,
    AD_TreeNode n
  WHERE c.AD_Tree_Project_ID=n.AD_Tree_ID
    AND n.Parent_ID IS NULL
    AND c.AD_Client_ID=old.AD_Client_ID;
  IF(v_Count=0) THEN
    DELETE
    FROM AD_TREENODE
    WHERE AD_TREE_ID=v_Tree_ID
      AND NODE_ID=OLD.C_Project_ID;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_project_trg3() OWNER TO tad;

--
-- Name: c_project_won(character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: c_projectline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_projectline_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: C_ProjectLine_Trg.sql,v 1.3 2003/09/05 04:58:07 jjanke Exp $
    ***
    * Title:       Update Planned Line Totals
    * Description:
    *      Set Line PlannedAmt, PlannedMarginAmt
    ************************************************************************/
    v_PriceLimit NUMERIC:=NULL;
  v_PriceStd NUMERIC:=NULL;
  v_PlannedMargin NUMERIC:=NULL;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  -- Calculate PlannedAmt
  IF(new.PlannedQty <> 0 AND new.PlannedPrice <> 0) THEN
    new.PlannedAmt:=new.PlannedQty * new.PlannedPrice;
  END IF;
  -- Get Margin from Product
  IF(new.M_Product_ID IS NOT NULL AND new.PlannedPrice <> 0) THEN
    SELECT COALESCE(MAX(PriceLimit), 0),
      COALESCE(MAX(PriceStd), 0)
    INTO v_PriceLimit,
      v_PriceStd
    FROM M_ProductPrice
    WHERE M_Product_ID=new.M_Product_ID
      AND M_PriceList_Version_ID=
      (
      SELECT M_PriceList_Version_ID
      FROM C_Project
      WHERE C_Project_ID=new.C_Project_ID
      )
      ;
    IF(v_PriceLimit <> 0) THEN
      new.PlannedMarginAmt:=new.PlannedQty *(new.PlannedPrice - v_PriceLimit) ;
    END IF;
    -- Get Margin from Product Category
  ELSIF(new.M_Product_Category_ID IS NOT NULL AND new.PlannedPrice <> 0) THEN
    SELECT COALESCE(MAX(PlannedMargin), 0)
    INTO v_PlannedMargin
    FROM M_Product_Category
    WHERE M_Product_Category_ID=new.M_Product_Category_ID;
    IF(v_PlannedMargin <> 0) THEN
      new.PlannedMarginAmt:=new.PlannedAmt * v_PlannedMargin;
    END IF;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.c_projectline_trg() OWNER TO tad;

--
-- Name: c_projectline_trg2(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_projectline_trg2() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

     
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: C_ProjectLine_Trg2.sql,v 1.2 2003/05/26 22:31:15 jjanke Exp $
    ***
    * Title:   Trigger recalculation of all projects
    * Description:
    *         Where lines were updated in the last minute
    ************************************************************************/
  UPDATE C_Project
    SET Updated=TO_DATE(NOW())
  WHERE EXISTS
    (
    SELECT *
    FROM C_ProjectLine l
    WHERE C_Project.C_Project_ID=l.C_Project_ID
      AND Updated > TO_DATE(NOW()) -1/1440
    )
    ;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.c_projectline_trg2() OWNER TO tad;

--
-- Name: c_projectphase_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_projectphase_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

/*
*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html 
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License. 
* The Original Code is Openbravo ERP. 
* The Initial Developer of the Original Code is Openbravo SL 
* All portions are Copyright (C) 2008 Openbravo SL 
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************
*/
v_projecttaskid VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


IF (NEW.ISCOMPLETE = 'Y') THEN
  SELECT MAX(PT.C_PROJECTTASK_ID)
  INTO v_projecttaskid
  FROM C_PROJECTTASK PT
  WHERE PT.C_PROJECTPHASE_ID=NEW.C_PROJECTPHASE_ID
  AND PT.ISCOMPLETE='N';
  IF (v_projecttaskid IS NOT NULL) THEN
    UPDATE C_PROJECTTASK
    SET ISCOMPLETE='Y'
    WHERE C_PROJECTPHASE_ID=NEW.C_PROJECTPHASE_ID
    AND ISCOMPLETE='N';
  END IF;
END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_projectphase_trg() OWNER TO tad;

--
-- Name: c_projectproposaltask_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_projectproposaltask_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2008 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
  v_Project VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  SELECT C_Project_ID
  INTO v_Project
  FROM C_PROJECTPROPOSAL
  WHERE C_ProjectProposal_ID=NEW.C_ProjectProposal_ID;
  UPDATE C_PROJECT
    SET LASTPLANNEDPROPOSALDATE=NEW.UPDATED
  WHERE C_PROJECT_ID=v_Project;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_projectproposaltask_trg() OWNER TO tad;

--
-- Name: c_remittance_post(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.c_remittance_post(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_remittance_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_remittance_trg() OWNER TO tad;

--
-- Name: c_remittanceline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_remittanceline_trg() OWNER TO tad;

--
-- Name: c_revenuerecognition_plan_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_revenuerecognition_plan_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * Create Service Plan for new RevenueRegognition Plans
    */
    v_IsTimeBased CHAR
    (
      1
    )
    ;
  v_NextNo       VARCHAR(32); --OBTG:VARCHAR2--
  v_Qty          NUMERIC;
  v_M_Product_ID VARCHAR(32); --OBTG:VARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  -- Is RevenueRecognition Time Based
  SELECT IsTimeBased
  INTO v_IsTimeBased
  FROM C_RevenueRecognition
  WHERE C_RevenueRecognition_ID=new.C_RevenueRecognition_ID;
  -- Add Service Plan
  IF(v_IsTimeBased='Y') THEN
    -- Get InvoiveQty
    SELECT QtyInvoiced,
      M_Product_ID
    INTO v_Qty,
      v_M_Product_ID
    FROM C_InvoiceLine
    WHERE C_InvoiceLine_ID=new.C_InvoiceLine_ID;
    -- Insert
    SELECT * INTO  v_NextNo FROM AD_Sequence_Next('C_ServiceLevel', new.AD_Client_ID) ;
    INSERT
    INTO C_ServiceLevel
      (
        C_ServiceLevel_ID, C_RevenueRecognition_Plan_ID, AD_Client_ID,
        AD_Org_ID, IsActive, Created,
        CreatedBy, Updated, UpdatedBy,
        M_Product_ID, Description, ServiceLevelInvoiced,
        ServiceLevelProvided, Processing, Processed
      )
      VALUES
      (
        v_NextNo, new.C_RevenueRecognition_Plan_ID, new.AD_Client_ID,
        new.AD_Org_ID,  'Y', TO_DATE(NOW()),
        new.CreatedBy, TO_DATE(NOW()), new.UpdatedBy,
        v_M_Product_ID, NULL, v_Qty,
        0, 'N',  'N'
      )
      ;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_revenuerecognition_plan_trg() OWNER TO tad;

--
-- Name: c_salesregion_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_salesregion_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: C_SalesRegion_Trg.sql,v 1.2 2002/10/23 03:16:57 jjanke Exp $
    ***
    * Title: SalesRegion new record
    * Description:
    *  - create treenode
    ************************************************************************/
    v_Tree_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Parent_ID VARCHAR(32); --OBTG:VARCHAR2--
  --
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF(TG_OP = 'INSERT') THEN
    --  Create TreeNode --
    --  get AD_Tree_ID + ParentID
    SELECT c.AD_Tree_SalesRegion_ID,
      n.Node_ID
    INTO v_Tree_ID,
      v_Parent_ID
    FROM AD_ClientInfo c,
      AD_TreeNode n
    WHERE c.AD_Tree_SalesRegion_ID=n.AD_Tree_ID
      AND n.Parent_ID IS NULL
      AND c.AD_Client_ID=new.AD_Client_ID;
    --  DBMS_OUTPUT.PUT_LINE('Tree='||xTree_ID||'  Node='||:new.C_Project_ID||'  Parent='||xParent_ID);
    --  Insert into TreeNode
    INSERT
    INTO AD_TreeNode
      (
        AD_TreeNode_Id, AD_Client_ID, AD_Org_ID, IsActive,
        Created, CreatedBy, Updated,
        UpdatedBy, AD_Tree_ID, Node_ID,
        Parent_ID, SeqNo
      )
      VALUES
      (
        get_uuid(), new.AD_Client_ID, new.AD_Org_ID, new.IsActive,
        new.Created, new.CreatedBy, new.Updated,
        new.UpdatedBy, v_Tree_ID, new.C_SalesRegion_ID,
        v_Parent_ID,(
        CASE new.IsSummary
          WHEN 'Y'
          THEN 100
          ELSE 999
        END
        )
      )
      ;
    -- Summary Nodes first
  ELSIF(TG_OP = 'DELETE') THEN
    --  Delete TreeNode --
    --  get AD_Tree_ID
    SELECT c.AD_Tree_SalesRegion_ID
    INTO v_Tree_ID
    FROM AD_ClientInfo c
    WHERE c.AD_Client_ID=old.AD_Client_ID;
    DELETE
    FROM AD_TREENODE
    WHERE AD_CLIENT_ID=old.AD_Client_ID
      AND AD_Tree_ID=v_Tree_ID
      AND Node_ID=old.C_SalesRegion_ID;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

EXCEPTION
WHEN DATA_EXCEPTION THEN
  RAISE EXCEPTION '%', 'C_SalesRegion InsertTrigger Error: No ClientInfo or parent TreeNode' ; --OBTG:-20010--
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.c_salesregion_trg() OWNER TO tad;

--
-- Name: c_settlement_post(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: c_settlement_post0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_settlement_post0(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
  PERFORM C_SETTLEMENT_POST(p_PInstance_ID, NULL) ;
END ; $$;


ALTER FUNCTION public.c_settlement_post0(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: c_settlement_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_settlement_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 






/*************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SL
 * All portions are Copyright (C) 2001-2006 Openbravo SL
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************/
v_DateNull TIMESTAMP := TO_DATE('01-01-1900', 'DD-MM-YYYY');
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


 -- If invoice is processed, is not allowed to change C_BPartner
 IF TG_OP = 'UPDATE' THEN
 IF (OLD.Processed = 'Y' AND
     ( (COALESCE(OLD.DOCUMENTNO,'.')<>COALESCE(NEW.DOCUMENTNO,'.'))
     OR (COALESCE(OLD.C_DOCTYPE_ID,'0')<>COALESCE(NEW.C_DOCTYPE_ID,'0'))
     OR (COALESCE(OLD.USER1_ID,'0')<>COALESCE(NEW.USER1_ID,'0'))
     OR (COALESCE(OLD.USER2_ID,'0')<>COALESCE(NEW.USER2_ID,'0'))
     OR (COALESCE(OLD.GENERATEDAMT,0)<>COALESCE(NEW.GENERATEDAMT,0))
     OR (COALESCE(OLD.CHARGEDAMT,0)<>COALESCE(NEW.CHARGEDAMT,0))
     OR (COALESCE(OLD.C_CURRENCY_ID,'0')<>COALESCE(NEW.C_CURRENCY_ID,'0'))
     OR(COALESCE(old.AD_ORG_ID, '0') <> COALESCE(new.AD_ORG_ID, '0'))
     OR(COALESCE(old.AD_CLIENT_ID, '0') <> COALESCE(new.AD_CLIENT_ID, '0'))
     )) THEN
        RAISE EXCEPTION '%', 'Document processed/posted'; --OBTG:-20501--
  END IF;
  IF (OLD.Posted = 'Y' AND
     ((COALESCE(OLD.DATEACCT,v_DateNull)<>COALESCE(NEW.DATEACCT,v_DateNull))
     OR (COALESCE(OLD.C_CAMPAIGN_ID,'0')<>COALESCE(NEW.C_CAMPAIGN_ID,'0'))
     OR (COALESCE(OLD.C_PROJECT_ID,'0')<>COALESCE(NEW.C_PROJECT_ID,'0'))
     OR (COALESCE(OLD.C_CURRENCY_ID,'0')<>COALESCE(NEW.C_CURRENCY_ID,'0'))
     OR (COALESCE(OLD.C_ACTIVITY_ID,'0')<>COALESCE(NEW.C_ACTIVITY_ID,'0')))) THEN
        RAISE EXCEPTION '%', 'Document processed/posted'; --OBTG:-20501--
  END IF;
 END IF;
 IF (TG_OP = 'INSERT') THEN
  IF (NEW.PROCESSED = 'Y') THEN
   RAISE EXCEPTION '%', 'Document processed/posted'; --OBTG:-20501--
  END IF;
 END IF;
 IF (TG_OP = 'DELETE') THEN
  IF (OLD.PROCESSED = 'Y') THEN
   RAISE EXCEPTION '%', 'Document processed/posted'; --OBTG:-20501--
  END IF;
 END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_settlement_trg() OWNER TO tad;




--
-- Name: c_trim(character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_trim(p_str character varying) OWNER TO tad;

--
-- Name: c_uom_convert(numeric, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

ALTER FUNCTION public.c_uom_convert(p_qty numeric, p_uomfrom_id character varying, p_uomto_id character varying, p_stdprecision character varying) OWNER TO tad;

--
-- Name: c_uom_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.c_uom_trg() OWNER TO tad;


--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying, p_c_activity_id character varying, p_user1_id character varying, p_user2_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_ValidCombination_Get.sql,v 1.4 2003/07/22 18:49:41 jjanke Exp $
  ***
  * Title: Create Valid Account Code Combination
  * Description:
  * Get a Valid Account Combination
  * 1) Create template for combination
  *  - if base combination (b_) != NULL, retrieve existing VC
  *  - replace with NOT NULL transaction values (p_) elements
  * 2) Check, if combination exists
  *  - yes, return target combination (t_)
  *  - otherwise create it
  * Returns NULL if not all mandatory fields have values
  * or if p_MustBeFullyQualified=Y and found combination is not fully qualified
  ***
  *  Problem is that it does not create accounts with null values!
  ************************************************************************/

  -- Base Combination
  --TYPE RECORD IS REFCURSOR;
    Cur_Base_VC RECORD;
    Cur_Existing_VC RECORD;
    -- Target Combination
    v_AD_Client_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_AD_Org_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_AcctSchema_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_Account_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_M_Product_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_BPartner_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_AD_OrgTrx_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_LocFrom_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_LocTo_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_SalesRegion_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_Project_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_Campaign_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_Activity_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_User1_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_User2_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_CreatedBy VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    -- Existance Loop - Get first fully qualified matching combination
    --
    FoundValue CHAR(1):='N';
    RetValue VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    fullyQualified CHAR(1) ;
  BEGIN
    -- 1a  -- Fill with base info
    IF(p_b_C_ValidCombination_ID!=NULL) THEN
      -- Actually only one value possible, for convineance
      FOR Cur_Base_VC in
        (SELECT *
        FROM C_ValidCombination
        WHERE C_ValidCombination_ID=p_b_C_ValidCombination_ID
        )
      LOOP
        RAISE NOTICE '%','Base VC found' ;
        -- mandatory fields
        v_AD_Client_ID:=Cur_Base_VC.AD_Client_ID;
        v_AD_Org_ID:=Cur_Base_VC.AD_Org_ID;
        v_C_AcctSchema_ID:=Cur_Base_VC.C_AcctSchema_ID;
        v_Account_ID:=Cur_Base_VC.Account_ID;
        -- optional fields
        v_M_Product_ID:=Cur_Base_VC.M_Product_ID;
        v_C_BPartner_ID:=Cur_Base_VC.C_BPartner_ID;
        v_AD_OrgTrx_ID:=Cur_Base_VC.AD_OrgTrx_ID;
        v_C_LocFrom_ID:=Cur_Base_VC.C_LocFrom_ID;
        v_C_LocTo_ID:=Cur_Base_VC.C_LocTo_ID;
        v_C_SalesRegion_ID:=Cur_Base_VC.C_SalesRegion_ID;
        v_C_Project_ID:=Cur_Base_VC.C_Project_ID;
        v_C_Campaign_ID:=Cur_Base_VC.C_Campaign_ID;
        v_C_Activity_ID:=Cur_Base_VC.C_Activity_ID;
        v_User1_ID:=Cur_Base_VC.User1_ID;
        v_User2_ID:=Cur_Base_VC.User2_ID;
      END LOOP;
    END IF;
    -- 1b  -- Update target values
    IF(p_AD_Client_ID IS NOT NULL) THEN
      v_AD_Client_ID:=p_AD_Client_ID;
    END IF;
    IF(p_AD_Org_ID IS NOT NULL) THEN
      v_AD_Org_ID:=p_AD_Org_ID;
    END IF;
    IF(p_C_AcctSchema_ID IS NOT NULL) THEN
      v_C_AcctSchema_ID:=p_C_AcctSchema_ID;
    END IF;
    IF(p_Account_ID IS NOT NULL) THEN
      v_Account_ID:=p_Account_ID;
    END IF;
    -- optional fields
    IF(p_M_Product_ID IS NOT NULL) THEN
      v_M_Product_ID:=p_M_Product_ID;
    END IF;
    IF(p_C_BPartner_ID IS NOT NULL) THEN
      v_C_BPartner_ID:=p_C_BPartner_ID;
    END IF;
    IF(p_AD_OrgTrx_ID IS NOT NULL) THEN
      v_AD_OrgTrx_ID:=p_AD_OrgTrx_ID;
    END IF;
    IF(p_C_LocFrom_ID IS NOT NULL) THEN
      v_C_LocFrom_ID:=p_C_LocFrom_ID;
    END IF;
    IF(p_C_LocTo_ID IS NOT NULL) THEN
      v_C_LocTo_ID:=p_C_LocTo_ID;
    END IF;
    IF(p_C_SalesRegion_ID IS NOT NULL) THEN
      v_C_SalesRegion_ID:=p_C_SalesRegion_ID;
    END IF;
    IF(p_C_Project_ID IS NOT NULL) THEN
      v_C_Project_ID:=p_C_Project_ID;
    END IF;
    IF(p_C_Campaign_ID IS NOT NULL) THEN
      v_C_Campaign_ID:=p_C_Campaign_ID;
    END IF;
    IF(p_C_Activity_ID IS NOT NULL) THEN
      v_C_Activity_ID:=p_C_Activity_ID;
    END IF;
    IF(p_User1_ID IS NOT NULL) THEN
      v_User1_ID:=p_User1_ID;
    END IF;
    IF(p_User2_ID IS NOT NULL) THEN
      v_User2_ID:=p_User2_ID;
    END IF;
    -- Are nandatory elements null:1
    IF(v_AD_Client_ID IS NULL OR v_AD_Org_ID IS NULL  OR v_C_AcctSchema_ID IS NULL OR v_Account_ID IS NULL) THEN
      RAISE NOTICE '%','Mandatory Fields Null' ;
      p_C_ValidCombination_ID:=NULL;
      RETURN;
    END IF;
    --  DBMS_OUTPUT.PUT_LINE('v_M_Product_ID=' || v_M_Product_ID);
    -- Existance check
    FOR Cur_Existing_VC IN
      (SELECT *
      FROM C_ValidCombination  -- Mandatory fields
      WHERE AD_Client_ID=v_AD_Client_ID
        AND AD_Org_ID=v_AD_Org_ID
        AND C_AcctSchema_ID=v_C_AcctSchema_ID
        AND Account_ID=v_Account_ID  -- Optional fields
        AND(v_M_Product_ID IS NULL
        OR M_Product_ID=v_M_Product_ID)
        AND(v_C_BPartner_ID IS NULL
        OR C_BPartner_ID=v_C_BPartner_ID)
        AND(v_AD_OrgTrx_ID IS NULL
        OR AD_OrgTrx_ID=v_AD_OrgTrx_ID)
        AND(v_C_LocFrom_ID IS NULL
        OR C_LocFrom_ID=v_C_LocFrom_ID)
        AND(v_C_LocTo_ID IS NULL
        OR C_LocTo_ID=v_C_LocTo_ID)
        AND(v_C_SalesRegion_ID IS NULL
        OR C_SalesRegion_ID=v_C_SalesRegion_ID)
        AND(v_C_Project_ID IS NULL
        OR C_Project_ID=v_C_Project_ID)
        AND(v_C_Campaign_ID IS NULL
        OR C_Campaign_ID=v_C_Campaign_ID)
        AND(v_C_Activity_ID IS NULL
        OR C_Activity_ID=v_C_Activity_ID)
        AND(v_User1_ID IS NULL
        OR User1_ID=v_User1_ID)
        AND(v_User2_ID IS NULL
        OR User2_ID=v_User2_ID)
        AND IsActive='Y'  -- Y comes after N
      ORDER BY IsFullyQualified DESC
      )
    LOOP
      --  DBMS_OUTPUT.PUT_LINE('C_ValidCombination_ID=' || e.C_ValidCombination_ID || ', M_Product_ID=' || e.M_Product_ID);
      IF(FoundValue='N') THEN
        FoundValue:='Y';
        IF(p_MustBeFullyQualified='Y' AND Cur_Existing_VC.IsFullyQualified='N') THEN
          RAISE NOTICE '%','Combination found but not fully qualified - ' || Cur_Existing_VC.C_ValidCombination_ID ;
          RetValue:=NULL;
        END IF;
        RetValue:=Cur_Existing_VC.C_ValidCombination_ID;
      END IF;
    END LOOP;
    -- We found a value
    IF(FoundValue='Y') THEN
      p_C_ValidCombination_ID:=RetValue;
      RAISE NOTICE '%','Found Combination' || p_C_ValidCombination_ID ;
      RETURN;
    END IF;
    -- No Combination found - so create one
    RAISE NOTICE '%','Create new' ;
    SELECT * INTO  p_C_ValidCombination_ID FROM AD_Sequence_Next('C_ValidCombination', v_AD_Client_ID) ;
    v_CreatedBy:=p_CreatedBy;
    IF(v_CreatedBy IS NULL) THEN
      v_CreatedBy:=0;
    END IF;
    -- Don't catch trigger or integrity errors - let it fail
    INSERT
    INTO C_ValidCombination
      (
        C_ValidCombination_ID, IsFullyQualified, AD_Client_ID, AD_Org_ID,
        IsActive, Created, CreatedBy, Updated,
        UpdatedBy, Alias, C_AcctSchema_ID, Account_ID,
        M_Product_ID, C_BPartner_ID, AD_OrgTrx_ID, C_LocFrom_ID,
        C_LocTo_ID, C_SalesRegion_ID, C_Project_ID, C_Campaign_ID,
        C_Activity_ID, User1_ID, User2_ID
      )
      VALUES
      (
        p_C_ValidCombination_ID, p_MustBeFullyQualified, v_AD_Client_ID, v_AD_Org_ID,
         'Y', TO_DATE(NOW()), v_CreatedBy, TO_DATE(NOW()),
        v_CreatedBy, p_Alias, v_C_AcctSchema_ID, v_Account_ID,
        v_M_Product_ID, v_C_BPartner_ID, v_AD_OrgTrx_ID, v_C_LocFrom_ID,
        v_C_LocTo_ID, v_C_SalesRegion_ID, v_C_Project_ID, v_C_Campaign_ID,
        v_C_Activity_ID, v_User1_ID, v_User2_ID
      )
      ;
    -- Commented by cromero 19102006 -- COMMIT;
    -- Read Trigger result (fully qualified)
    IF(p_MustBeFullyQualified='Y') THEN
      SELECT IsFullyQualified
      INTO fullyQualified
      FROM C_ValidCombination
      WHERE C_ValidCombination_ID=p_C_ValidCombination_ID;
      --
      IF(fullyQualified='N') THEN
        RAISE NOTICE '%','New Combination not fully qualified - ' || p_C_ValidCombination_ID ;
        p_C_ValidCombination_ID:=NULL;
      END IF;
    END IF;
END ; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying, p_c_activity_id character varying, p_user1_id character varying, p_user2_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying, p_c_activity_id character varying, p_user1_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying, p_c_activity_id character varying, p_user1_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying, p_c_activity_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying, p_c_activity_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, $8, $9, $10, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, $8, $9, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, $8, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying, character); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, $7, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character) OWNER TO tad;

--
-- Name: c_validcombination_get(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_GET( $2, $3, $4, $5, $6, 'N');
END
; $_$;


ALTER FUNCTION public.c_validcombination_get(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying, p_c_activity_id character varying, p_user1_id character varying, p_user2_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

  -- Base Combination
  --TYPE RECORD IS REFCURSOR;
    Cur_Base_VC RECORD;
    Cur_Existing_VC RECORD;
    -- Target Combination
    v_AD_Client_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_AD_Org_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_AcctSchema_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_Account_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_M_Product_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_BPartner_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_AD_OrgTrx_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_LocFrom_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_LocTo_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_SalesRegion_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_Project_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_Campaign_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_C_Activity_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_User1_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_User2_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_CreatedBy VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    -- Existance Loop - Get first fully qualified matching combination
    --
    FoundValue CHAR(1):='N';
    RetValue NUMERIC:=NULL;
    fullyQualified CHAR(1) ;


  BEGIN
    -- 1a  -- Fill with base info
    IF(p_b_C_ValidCombination_ID!=NULL) THEN
      -- Actually only one value possible, for convineance
      FOR Cur_Base_VC in
        (SELECT *
        FROM C_ValidCombination
        WHERE C_ValidCombination_ID=p_b_C_ValidCombination_ID
        )
      LOOP
        RAISE NOTICE '%','Base VC found' ;
        -- mandatory fields
        v_AD_Client_ID:=Cur_Base_VC.AD_Client_ID;
        v_AD_Org_ID:=Cur_Base_VC.AD_Org_ID;
        v_C_AcctSchema_ID:=Cur_Base_VC.C_AcctSchema_ID;
        v_Account_ID:=Cur_Base_VC.Account_ID;
        -- optional fields
        v_M_Product_ID:=Cur_Base_VC.M_Product_ID;
        v_C_BPartner_ID:=Cur_Base_VC.C_BPartner_ID;
        v_AD_OrgTrx_ID:=Cur_Base_VC.AD_OrgTrx_ID;
        v_C_LocFrom_ID:=Cur_Base_VC.C_LocFrom_ID;
        v_C_LocTo_ID:=Cur_Base_VC.C_LocTo_ID;
        v_C_SalesRegion_ID:=Cur_Base_VC.C_SalesRegion_ID;
        v_C_Project_ID:=Cur_Base_VC.C_Project_ID;
        v_C_Campaign_ID:=Cur_Base_VC.C_Campaign_ID;
        v_C_Activity_ID:=Cur_Base_VC.C_Activity_ID;
        v_User1_ID:=Cur_Base_VC.User1_ID;
        v_User2_ID:=Cur_Base_VC.User2_ID;
      END LOOP;
    END IF;
    -- 1b  -- Update target values
    IF(p_AD_Client_ID IS NOT NULL) THEN
      v_AD_Client_ID:=p_AD_Client_ID;
    END IF;
    IF(p_AD_Org_ID IS NOT NULL) THEN
      v_AD_Org_ID:=p_AD_Org_ID;
    END IF;
    IF(p_C_AcctSchema_ID IS NOT NULL) THEN
      v_C_AcctSchema_ID:=p_C_AcctSchema_ID;
    END IF;
    IF(p_Account_ID IS NOT NULL) THEN
      v_Account_ID:=p_Account_ID;
    END IF;
    -- optional fields
    IF(p_M_Product_ID IS NOT NULL) THEN
      v_M_Product_ID:=p_M_Product_ID;
    END IF;
    IF(p_C_BPartner_ID IS NOT NULL) THEN
      v_C_BPartner_ID:=p_C_BPartner_ID;
    END IF;
    IF(p_AD_OrgTrx_ID IS NOT NULL) THEN
      v_AD_OrgTrx_ID:=p_AD_OrgTrx_ID;
    END IF;
    IF(p_C_LocFrom_ID IS NOT NULL) THEN
      v_C_LocFrom_ID:=p_C_LocFrom_ID;
    END IF;
    IF(p_C_LocTo_ID IS NOT NULL) THEN
      v_C_LocTo_ID:=p_C_LocTo_ID;
    END IF;
    IF(p_C_SalesRegion_ID IS NOT NULL) THEN
      v_C_SalesRegion_ID:=p_C_SalesRegion_ID;
    END IF;
    IF(p_C_Project_ID IS NOT NULL) THEN
      v_C_Project_ID:=p_C_Project_ID;
    END IF;
    IF(p_C_Campaign_ID IS NOT NULL) THEN
      v_C_Campaign_ID:=p_C_Campaign_ID;
    END IF;
    IF(p_C_Activity_ID IS NOT NULL) THEN
      v_C_Activity_ID:=p_C_Activity_ID;
    END IF;
    IF(p_User1_ID IS NOT NULL) THEN
      v_User1_ID:=p_User1_ID;
    END IF;
    IF(p_User2_ID IS NOT NULL) THEN
      v_User2_ID:=p_User2_ID;
    END IF;
    -- Are nandatory elements null:1
    IF(v_AD_Client_ID IS NULL OR v_AD_Org_ID IS NULL  OR v_C_AcctSchema_ID IS NULL OR v_Account_ID IS NULL) THEN
      RAISE NOTICE '%','Mandatory Fields Null' ;
      p_C_ValidCombination_ID:=NULL;
      RETURN;
    END IF;
    --  DBMS_OUTPUT.PUT_LINE('v_M_Product_ID=' || v_M_Product_ID);
    -- Existance check
    FOR Cur_Existing_VC IN
      (SELECT *
              FROM  C_ValidCombination
               -- Mandatory fields
              WHERE  AD_Client_ID=v_AD_Client_ID
                AND AD_Org_ID=v_AD_Org_ID
                AND C_AcctSchema_ID=v_C_AcctSchema_ID
                AND Account_ID=v_Account_ID
                 -- Optional fields
                AND ((v_M_Product_ID IS NULL AND M_Product_ID IS NULL) OR M_Product_ID=v_M_Product_ID)
                AND ((v_C_BPartner_ID IS NULL AND C_BPartner_ID IS NULL) OR C_BPartner_ID=v_C_BPartner_ID)
                AND ((v_AD_OrgTrx_ID IS NULL AND AD_OrgTrx_ID IS NULL) OR AD_OrgTrx_ID=v_AD_OrgTrx_ID)
                AND ((v_C_LocFrom_ID IS NULL AND C_LocFrom_ID IS NULL) OR C_LocFrom_ID=v_C_LocFrom_ID)
                AND ((v_C_LocTo_ID IS NULL AND C_LocTo_ID IS NULL) OR C_LocTo_ID=v_C_LocTo_ID)
                AND ((v_C_SalesRegion_ID IS NULL AND C_SalesRegion_ID IS NULL) OR C_SalesRegion_ID=v_C_SalesRegion_ID)
                AND ((v_C_Project_ID IS NULL AND C_Project_ID IS NULL) OR C_Project_ID=v_C_Project_ID)
                AND ((v_C_Campaign_ID IS NULL AND C_Campaign_ID IS NULL) OR C_Campaign_ID=v_C_Campaign_ID)
                AND ((v_C_Activity_ID IS NULL AND C_Activity_ID IS NULL) OR C_Activity_ID=v_C_Activity_ID)
                AND ((v_User1_ID IS NULL AND User1_ID IS NULL) OR User1_ID=v_User1_ID)
                AND ((v_User2_ID IS NULL AND User2_ID IS NULL) OR User2_ID=v_User2_ID)
    AND ISACTIVE='Y'
      ORDER BY IsFullyQualified DESC
      )
    LOOP
      --  DBMS_OUTPUT.PUT_LINE('C_ValidCombination_ID=' || e.C_ValidCombination_ID || ', M_Product_ID=' || e.M_Product_ID);
      IF(FoundValue='N') THEN
        FoundValue:='Y';
        IF(p_MustBeFullyQualified='Y' AND Cur_Existing_VC.IsFullyQualified='N') THEN
          RAISE NOTICE '%','Combination found but not fully qualified - ' || Cur_Existing_VC.C_ValidCombination_ID ;
          RetValue:=NULL;
        END IF;
        RetValue:=Cur_Existing_VC.C_ValidCombination_ID;
      END IF;
    END LOOP;
    -- We found a value
    IF(FoundValue='Y') THEN
      p_C_ValidCombination_ID:=RetValue;
      RAISE NOTICE '%','Found Combination' || p_C_ValidCombination_ID ;
      RETURN;
    END IF;
    -- No Combination found - so create one
    RAISE NOTICE '%','Create new' ;
    SELECT * INTO  p_C_ValidCombination_ID FROM AD_Sequence_Next('C_ValidCombination', v_AD_Client_ID) ;
    v_CreatedBy:=p_CreatedBy;
    IF(v_CreatedBy IS NULL) THEN
      v_CreatedBy:=0;
    END IF;
    -- Don't catch trigger or integrity errors - let it fail
    INSERT
    INTO C_ValidCombination
      (
        C_ValidCombination_ID, IsFullyQualified, AD_Client_ID, AD_Org_ID,
        IsActive, Created, CreatedBy, Updated,
        UpdatedBy, Alias, C_AcctSchema_ID, Account_ID,
        M_Product_ID, C_BPartner_ID, AD_OrgTrx_ID, C_LocFrom_ID,
        C_LocTo_ID, C_SalesRegion_ID, C_Project_ID, C_Campaign_ID,
        C_Activity_ID, User1_ID, User2_ID
      )
      VALUES
      (
        p_C_ValidCombination_ID, p_MustBeFullyQualified, v_AD_Client_ID, v_AD_Org_ID,
         'Y', TO_DATE(NOW()), v_CreatedBy, TO_DATE(NOW()),
        v_CreatedBy, p_Alias, v_C_AcctSchema_ID, v_Account_ID,
        v_M_Product_ID, v_C_BPartner_ID, v_AD_OrgTrx_ID, v_C_LocFrom_ID,
        v_C_LocTo_ID, v_C_SalesRegion_ID, v_C_Project_ID, v_C_Campaign_ID,
        v_C_Activity_ID, v_User1_ID, v_User2_ID
      )
      ;
    -- Commented by cromero 19102006 -- COMMIT;
    -- Read Trigger result (fully qualified)
    IF(p_MustBeFullyQualified='Y') THEN
      SELECT IsFullyQualified
      INTO fullyQualified
      FROM C_ValidCombination
      WHERE C_ValidCombination_ID=p_C_ValidCombination_ID;
      --
      IF(fullyQualified='N') THEN
        RAISE NOTICE '%','New Combination not fully qualified - ' || p_C_ValidCombination_ID ;
        p_C_ValidCombination_ID:=NULL;
      END IF;
    END IF;
END ; $$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying, p_c_activity_id character varying, p_user1_id character varying, p_user2_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying, p_c_activity_id character varying, p_user1_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying, p_c_activity_id character varying, p_user1_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying, p_c_activity_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying, p_c_activity_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying, p_c_campaign_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying, p_c_project_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying, p_c_salesregion_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying, p_c_locto_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying, p_c_locfrom_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying, p_ad_orgtrx_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying, p_c_bpartner_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, $8, $9, $10, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying, p_m_product_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, $8, $9, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying, p_createdby character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, $8, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character, p_alias character varying) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying, character); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, $7, NULL);
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying, p_mustbefullyqualified character) OWNER TO tad;

--
-- Name: c_validcombination_insert(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO $1 FROM C_VALIDCOMBINATION_INSERT( $2, $3, $4, $5, $6, 'N');
END
; $_$;


ALTER FUNCTION public.c_validcombination_insert(OUT p_c_validcombination_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, p_c_acctschema_id character varying, p_account_id character varying, p_b_c_validcombination_id character varying) OWNER TO tad;

--
-- Name: c_validcombination_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: c_withholding_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION c_withholding_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * New Accounting Defaults
    */
   --TYPE RECORD IS REFCURSOR;
  Cur_Defaults RECORD;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF(TG_OP = 'INSERT')THEN
    FOR Cur_Defaults IN
      (
      SELECT *
      FROM C_AcctSchema_Default d
      WHERE EXISTS
        (
      SELECT 1 
      FROM AD_Org_AcctSchema
      WHERE AD_IsOrgIncluded(AD_Org_ID, new.AD_ORG_ID, new.AD_Client_ID)<>-1
      AND IsActive = 'Y'
      AND AD_Org_AcctSchema.C_AcctSchema_ID = d.C_AcctSchema_ID
        )
      )
    LOOP
      INSERT
      INTO C_Withholding_Acct
        (
          C_Withholding_Acct_ID, C_Withholding_ID, C_AcctSchema_ID, AD_Client_ID,
          AD_Org_ID, IsActive, Created,
          CreatedBy, Updated, UpdatedBy,
          Withholding_Acct
        )
        VALUES
        (
          get_uuid(), new.C_Withholding_ID, Cur_Defaults.C_AcctSchema_ID, new.AD_Client_ID,
          new.AD_ORG_ID,  'Y', TO_DATE(NOW()),
          new.CreatedBy, TO_DATE(NOW()), new.UpdatedBy,
          Cur_Defaults.Withholding_Acct
        )
        ;
    END LOOP;
  END IF;
  IF(TG_OP = 'UPDATE') THEN
    UPDATE C_Withholding_Acct set AD_Org_ID = new.AD_Org_ID
    WHERE c_withholding_id = new.C_WithHolding_ID;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.c_withholding_trg() OWNER TO tad;

--
-- Name: c_yearperiods(character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.c_yearperiods(pinstance_id character varying) OWNER TO tad;

--
-- Name: dateformat(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION dateformat() RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $$ DECLARE BEGIN  RETURN 'DD.MM.YYYY'; EXCEPTION WHEN OTHERS THEN RETURN NULL; END; $$;


ALTER FUNCTION public.dateformat() OWNER TO tad;

--
-- Name: dba_getattnumpos(integer[], integer); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION dba_getattnumpos(conkey integer[], attnum integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  DECLARE i integer;
begin
  for i in 1..array_upper(conkey,1)
  loop     
     IF (conkey[i] = attnum) THEN
	RETURN i;
     END IF;
  end loop;  
  return 0;
end;
$$;


ALTER FUNCTION public.dba_getattnumpos(conkey integer[], attnum integer) OWNER TO tad;

--
-- Name: dba_getstandard_search_text(text); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION dba_getstandard_search_text(text) RETURNS text
    LANGUAGE plpgsql
    AS $_$
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  DECLARE  v_text TEXT;
  DECLARE  v_p1 NUMERIC;
  DECLARE  v_p2 NUMERIC;
  DECLARE  v_p3 NUMERIC;
  DECLARE  v_i NUMERIC;
begin
  v_text := replace($1, ' = ANY',' in');
  v_text := replace(v_text, 'ARRAY[', '');
  v_text := replace(v_text, ']' , '');
  v_text := replace(v_text, '::bpchar', '');
  v_text := replace(v_text, '::text', '');
  v_text := substring(v_text,2,length(v_text)-2);

    WHILE (v_text LIKE '%::%') LOOP
      v_p1 := INSTR(v_text, '::');
      v_p2 := 0;
      v_p3 := 0;
      IF (SUBSTR(v_text,v_p1-1,1) = ')') THEN
        v_i := 1;
        WHILE (v_p2=0) LOOP
          v_i := v_i + 1;
          IF (SUBSTR(v_text, v_p1 - v_i, 1) = '(') THEN
            v_p2 := v_p1 - v_i;
          END IF;
        END LOOP;
      END IF;
      v_i := 1;
      WHILE (v_p3=0) LOOP
        v_i := v_i + 1;
        IF ((SUBSTR(v_text, v_p1 + v_i, 1) IN (' ',')',CHR(10),CHR(13)) OR (v_p1 + v_i>= length(v_text))))  THEN
          v_p3 := v_p1 + v_i;
        END IF;
      END LOOP;
      --RAISE_APPLICATION_ERROR(-20001,'v_p3 = '||v_p3);
      IF (v_p2 = 0) THEN
        v_text := SUBSTR(v_text, 1, v_p1-1) || SUBSTR(v_text, v_p3, 4000);
      ELSE
        v_text := SUBSTR(v_text, 1, v_p2-1) || SUBSTR(v_text, v_p2 + 1, v_p1 - (v_p2 + 2)) || SUBSTR(v_text, v_p3, 4000);
      END IF;
    END LOOP;

    RETURN upper(v_text);
END;
$_$;


ALTER FUNCTION public.dba_getstandard_search_text(text) OWNER TO tad;

--
-- Name: dump(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION dump(character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$DECLARE
BEGIN
    RETURN $1;
END;
$_$;


ALTER FUNCTION public.dump(character varying) OWNER TO tad;

--
-- Name: dump(numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION dump(numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$DECLARE
BEGIN
    RETURN $1;
END;
$_$;


ALTER FUNCTION public.dump(numeric) OWNER TO tad;

--
-- Name: equal(numeric, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION equal(numeric, character varying) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN $1 = TO_NUMBER($2);
END;
$_$;


ALTER FUNCTION public.equal(numeric, character varying) OWNER TO tad;


--
-- Name: get_uuid(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION get_uuid() RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
var VARCHAR:=uuid_generate_v4();
BEGIN
 WHILE var=uuid_generate_v4()::varchar LOOP
END LOOP; 
  return replace(upper(uuid_generate_v4()::varchar),'-','');
END;   $$;


ALTER FUNCTION public.get_uuid() OWNER TO tad;

--
-- Name: gl_jl_chk_restrictions_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION gl_jl_chk_restrictions_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 






    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2009 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
  v_Processed VARCHAR(60) ;
  v_Posted        VARCHAR(60) ;
  v_GL_JOURNAL_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  v_DateNull TIMESTAMP :=TO_DATE('01-01-1900','DD-MM-YYYY');
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF TG_OP = 'INSERT' THEN
    v_GL_JOURNAL_ID:=new.GL_JOURNAL_ID;
  ELSE
    v_GL_JOURNAL_ID:=old.GL_JOURNAL_ID;
  END IF;

  IF(TG_OP = 'UPDATE') THEN
    IF((COALESCE(old.AMTSOURCEDR, 0) <> COALESCE(NEW.AMTSOURCEDR, 0) OR COALESCE(old.AMTSOURCECR, 0) <> COALESCE(NEW.AMTSOURCECR, 0) OR COALESCE(old.C_CURRENCY_ID, '0') <> COALESCE(NEW.C_CURRENCY_ID, '0'))) THEN
      SELECT PROCESSED,
        POSTED
      INTO v_Processed,
        v_Posted
      FROM GL_JOURNAL
      WHERE GL_JOURNAL_ID=v_GL_JOURNAL_ID;
      IF(v_Processed='Y'
        AND ((COALESCE(old.LINE, 0) <> COALESCE(new.LINE, 0))
        OR (COALESCE(old.C_DEBT_PAYMENT_ID, '0') <> COALESCE(new.C_DEBT_PAYMENT_ID, '0'))
        OR(COALESCE(old.AMTSOURCEDR, 0) <> COALESCE(new.AMTSOURCEDR, 0))
        OR(COALESCE(old.AMTSOURCECR, 0) <> COALESCE(new.AMTSOURCECR, 0))
        OR(COALESCE(old.C_CURRENCY_ID, '0') <> COALESCE(new.C_CURRENCY_ID, '0'))
        OR(COALESCE(old.C_UOM_ID, '0') <> COALESCE(new.C_UOM_ID, '0'))
        OR(COALESCE(old.AD_ORG_ID, '0') <> COALESCE(new.AD_ORG_ID, '0'))
        OR(COALESCE(old.AD_CLIENT_ID, '0') <> COALESCE(new.AD_CLIENT_ID, '0')))) THEN
        RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
      END IF;

      IF(v_Posted='Y'
        AND ((COALESCE(old.DATEACCT, v_DateNull) <> COALESCE(new.DATEACCT, v_DateNull))
        OR(COALESCE(old.C_VALIDCOMBINATION_ID, '0') <> COALESCE(new.C_VALIDCOMBINATION_ID, '0'))
        OR(COALESCE(old.AMTACCTDR, 0) <> COALESCE(new.AMTACCTDR, 0))
        OR(COALESCE(old.AMTACCTCR, 0) <> COALESCE(new.AMTACCTCR, 0)))) THEN
        RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
      END IF;
    END IF;
  END IF;
  IF(TG_OP = 'DELETE') THEN
    SELECT PROCESSED,
      POSTED
    INTO v_Processed,
      v_Posted
    FROM GL_JOURNAL
    WHERE GL_JOURNAL_ID=v_GL_JOURNAL_ID;
    IF (v_Processed='Y') THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
  END IF;
  IF(TG_OP = 'INSERT') THEN
    SELECT PROCESSED,
      POSTED
    INTO v_Processed,
      v_Posted
    FROM GL_JOURNAL
    WHERE GL_JOURNAL_ID=v_GL_JOURNAL_ID;
    IF (v_Processed='Y') THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.gl_jl_chk_restrictions_trg() OWNER TO tad;

--
-- Name: gl_journal_chk_restrict_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION gl_journal_chk_restrict_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 






    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2006 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
    v_DateNull TIMESTAMP := TO_DATE('01-01-1900', 'DD-MM-YYYY');
        
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


    IF TG_OP = 'UPDATE'
    THEN  IF(old.Processed='Y'
    AND ((COALESCE(old.DATEDOC, v_DateNull) <> COALESCE(new.DATEDOC, v_DateNull))
    OR(COALESCE(old.C_PERIOD_ID, '0') <> COALESCE(new.C_PERIOD_ID, '0'))
    OR(COALESCE(old.CURRENCYRATE, 0) <> COALESCE(new.CURRENCYRATE, 0))
    OR(COALESCE(old.CURRENCYRATETYPE, '.') <> COALESCE(new.CURRENCYRATETYPE, '.'))
    OR(COALESCE(old.CONTROLAMT, 0) <> COALESCE(new.CONTROLAMT, 0))
    OR(COALESCE(old.AD_ORG_ID, '0') <> COALESCE(new.AD_ORG_ID, '0'))
    OR(COALESCE(old.AD_CLIENT_ID, '0') <> COALESCE(new.AD_CLIENT_ID, '0'))))
    THEN  RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
  IF(old.Posted='Y' AND ((COALESCE(old.DATEACCT, v_DateNull) <> COALESCE(new.DATEACCT, v_DateNull)) OR(COALESCE(old.C_ACCTSCHEMA_ID, '0') <> COALESCE(new.C_ACCTSCHEMA_ID, '0')) OR(COALESCE(old.GL_CATEGORY_ID, '0') <> COALESCE(new.GL_CATEGORY_ID, '0')) OR(COALESCE(old.POSTINGTYPE, '.') <> COALESCE(new.POSTINGTYPE, '.')))) THEN
   RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
  END IF;
 END IF;
 IF(TG_OP = 'DELETE') THEN
  IF(old.Processed='Y') THEN
    RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
  END IF;
 END IF;
 IF(TG_OP = 'INSERT') THEN
  IF(NEW.Processed='Y') THEN
    RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
  END IF;
 END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.gl_journal_chk_restrict_trg() OWNER TO tad;

--
-- Name: gl_journal_post(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION gl_journal_post(p_pinstance_id character varying, p_gl_journal_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2009 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: GL_Journal_Post.sql,v 1.2 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: GL Journal Post (preparation)
  * Description:
  * - Check Control Amount
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; -- 0=failure
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_DateAcct TIMESTAMP;
  v_DocType_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    -- Other Variables
    v_DocStatus GL_Journal.DocStatus%TYPE;
    v_DocAction GL_Journal.DocAction%TYPE;
    v_Processing GL_Journal.Processing%TYPE;
    v_Posted GL_Journal.Posted%TYPE;
    v_TotalDr GL_Journal.TotalDr%TYPE;
    v_TotalCr GL_Journal.TotalCr%TYPE;
    v_ControlAmt GL_Journal.ControlAmt%TYPE;
    FINISH_PROCESS BOOLEAN:=false;
    v_is_included NUMERIC:=0;
    v_available_period NUMERIC:=0;
    v_is_ready AD_Org.IsReady%TYPE;
    v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
    v_isacctle AD_OrgType.IsAcctLegalEntity%TYPE;
    v_org_bule_id AD_Org.AD_Org_ID%TYPE;
    
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    IF(p_PInstance_ID IS NOT NULL) THEN
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      END LOOP; -- Get Parameter
    ELSE
      v_Record_ID:=p_GL_Journal_ID;
    END IF;
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
  BEGIN --BODY
    /**
    * Status - Actions
    * DR   CO, VO
    * CO   CL
    */
    v_ResultStr:='ReadingJournal';
    SELECT DocStatus,
      DocAction,
      Processing,
      Posted, AD_Org_ID, DateAcct, C_DocType_ID
    INTO v_DocStatus,
      v_DocAction,
      v_Processing,
      v_Posted, v_AD_Org_ID, v_DateAcct, v_DocType_ID
    FROM GL_Journal
    WHERE GL_Journal_ID=v_Record_ID  FOR UPDATE;
    /**
    * Closed, Voided or Reversed - No action possible
    */
    IF(v_DocStatus IN('CL', 'VO', 'RE')) THEN
      RAISE EXCEPTION '%', '@AlreadyPosted@' ; --OBTG:-20000--
    END IF;
    /**
    * Unlock
    */
    IF(NOT FINISH_PROCESS) THEN
      IF(v_DocAction='XL') THEN
        UPDATE GL_Journal
          SET Processing='N',
          DocAction='--',
          Updated=TO_DATE(NOW()),
          UpdatedBy=v_AD_User_ID
        WHERE GL_Journal_ID=v_Record_ID;
        FINISH_PROCESS:=true;
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      IF(v_Processing='Y') THEN
        RAISE EXCEPTION '%', '@OtherProcessActive@' ; --OBTG:-20000--
      END IF;
    END IF; --FINISH_PROCESS
    /**
    * Close Order
    */
    IF(NOT FINISH_PROCESS) THEN
      IF(v_DocAction='CL') THEN
        UPDATE GL_Journal
          SET DocStatus='CL',
          DocAction='--',
          Processed='Y',
          Updated=TO_DATE(NOW()),
          UpdatedBy=v_AD_User_ID
        WHERE GL_Journal_ID=v_Record_ID;
        FINISH_PROCESS:=true;
      END IF;
    END IF; --FINISH_PROCESS
    /**
    * Void Order
    */
    IF(NOT FINISH_PROCESS) THEN
      IF(v_DocAction='VO' AND v_DocStatus='DR') THEN
        -- Cancel all Lines
        UPDATE GL_JournalLine
          SET IsActive='N',
          Updated=TO_DATE(NOW())
        WHERE GL_Journal_ID=v_Record_ID;
        UPDATE GL_Journal
          SET DocStatus='VO',
          DocAction='--',
          Processed='Y',
          Updated=TO_DATE(NOW())
        WHERE GL_Journal_ID=v_Record_ID;
        FINISH_PROCESS:=true;
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      IF(v_DocAction='RE') THEN
        IF(v_Posted='Y') THEN
          RAISE EXCEPTION '%', '@GLJournalDocumentPosted@' ; --OBTG:-20000--
        END IF;
        IF(NOT FINISH_PROCESS) THEN
            UPDATE GL_Journal
              SET DocStatus='DR',
              DocAction='CO',
              Processed='N',
              Updated=TO_DATE(NOW())
            WHERE GL_Journal_ID=v_Record_ID;
            FINISH_PROCESS:=true;
        END IF;
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      --  Lock journal comes here
      /**
      * Process Journal
      */
      -- Check the header belongs to a organization where transactions are posible and ready to use
      SELECT AD_Org.IsReady, Ad_OrgType.IsTransactionsAllowed
      INTO v_is_ready, v_is_tr_allow
      FROM GL_JOURNAL, AD_Org, AD_OrgType
      WHERE AD_Org.AD_Org_ID=GL_JOURNAL.AD_Org_ID
      AND AD_Org.AD_OrgType_ID=AD_OrgType.AD_OrgType_ID
      AND GL_JOURNAL.GL_JOURNAL_ID=v_Record_ID;
      IF (v_is_ready='N') THEN
        RAISE EXCEPTION '%', '@OrgHeaderNotReady@'; --OBTG:-20000--
      END IF;
      IF (v_is_tr_allow='N') THEN
        RAISE EXCEPTION '%', '@OrgHeaderNotTransAllowed@'; --OBTG:-20000--
      END IF;
      
      SELECT AD_ORG_CHK_DOCUMENTS('GL_JOURNAL', 'GL_JOURNALLINE', v_Record_ID, 'GL_JOURNAL_ID', 'GL_JOURNAL_ID') INTO v_is_included FROM dual;
      IF (v_is_included=-1) THEN
        RAISE EXCEPTION '%', '@LinesAndHeaderDifferentLEorBU@'; --OBTG:-20000--
      END IF;   
      
      -- Check the period control is opened (only if it is legal entity with accounting)
      -- Gets the BU or LE of the document
      SELECT AD_GET_DOC_LE_BU('GL_JOURNAL', v_Record_ID, 'GL_JOURNAL_ID', 'LE')
      INTO v_org_bule_id
      FROM DUAL;
      
      SELECT AD_OrgType.IsAcctLegalEntity
      INTO v_isacctle
      FROM AD_OrgType, AD_Org
      WHERE AD_Org.AD_OrgType_ID = AD_OrgType.AD_OrgType_ID
      AND AD_Org.AD_Org_ID=v_org_bule_id;
      
      IF (v_isacctle='Y') THEN     	
        SELECT C_CHK_OPEN_PERIOD(v_AD_Org_ID, v_DateAcct, NULL, v_DocType_ID) 
        INTO v_available_period
        FROM DUAL;
        
        IF (v_available_period<>1) THEN
          RAISE EXCEPTION '%', '@PeriodNotAvailable@'; --OBTG:-20000--
        END IF;
      END IF;   
      
      -- Recalculate Totals
      v_ResultStr:='RecalculateTotals';
      UPDATE GL_Journal
        SET TotalDr=
        (SELECT COALESCE(SUM(AmtSourceDr), 0)
        FROM GL_JournalLine
        WHERE GL_Journal_ID=v_Record_ID
          AND IsActive='Y'
        )
        ,
        TotalCr=
        (SELECT COALESCE(SUM(AmtSourceCr), 0)
        FROM GL_JournalLine
        WHERE GL_Journal_ID=v_Record_ID
          AND IsActive='Y'
        )
      WHERE GL_Journal_ID=v_Record_ID;
      v_ResultStr:='ReadingAmounts';
      SELECT ControlAmt,
        TotalDr,
        TotalCr
      INTO v_ControlAmt,
        v_TotalDr,
        v_TotalCr
      FROM GL_Journal
      WHERE GL_Journal_ID=v_Record_ID  FOR UPDATE;
      IF(v_TotalDr<>v_TotalCr) THEN
        RAISE EXCEPTION '%', '@DistinctAmtError@' ; --OBTG:-20000--
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      -- Check ControlAmt
      IF(v_ControlAmt<>0 AND(v_ControlAmt<>v_TotalDr)) THEN
        RAISE EXCEPTION '%', '@ControlAmtError@' ; --OBTG:-20000--
      ELSE
        UPDATE GL_Journal
          SET DocStatus='CO',
          DocAction='--',
          Processed='Y',
          Updated=TO_DATE(NOW())
        WHERE GL_Journal_ID=v_Record_ID;
      END IF;
    END IF; --FINISH_PROCESS
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    IF(p_PInstance_ID IS NOT NULL) THEN
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE EXCEPTION '%', v_ResultStr ; --OBTG:-20100--
  END IF;
  RETURN;
END ; $_$;


ALTER FUNCTION public.gl_journal_post(p_pinstance_id character varying, p_gl_journal_id character varying) OWNER TO tad;

--
-- Name: gl_journal_post0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION gl_journal_post0(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: GL_Journal_Post0.sql,v 1.1 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: GL Journal Post (preparation)
  * Description:
  ************************************************************************/
BEGIN
  PERFORM GL_JOURNAL_POST(p_PInstance_ID, NULL) ;
END ; $_$;


ALTER FUNCTION public.gl_journal_post0(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: gl_journal_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION gl_journal_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    *  Journal
    * - Update Journal Batch Totals if exists (insert is always 0)
    */
        
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


    -- Subtract Old Amount
    IF(TG_OP = 'UPDATE') THEN
      IF(old.TotalDr <> NEW.TotalDr OR OLD.TotalCr <> NEW.TotalCr) THEN  
      IF(old.GL_JournalBatch_ID IS NOT NULL AND old.IsActive='Y') THEN
	  UPDATE GL_JournalBatch
	    SET TotalDr=TotalDr - old.TotalDr,
	    TotalCr=TotalCr - old.TotalCr
	  WHERE GL_JournalBatch_ID=old.GL_JournalBatch_ID;
       END IF;
     END IF;
   END IF;
   IF(TG_OP = 'DELETE') THEN      
      IF(old.GL_JournalBatch_ID IS NOT NULL AND old.IsActive='Y') THEN
	  UPDATE GL_JournalBatch
	    SET TotalDr=TotalDr - old.TotalDr,
	    TotalCr=TotalCr - old.TotalCr
	  WHERE GL_JournalBatch_ID=old.GL_JournalBatch_ID;
       END IF;     
   END IF;
 -- Add new Amount
 IF(TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
  IF(COALESCE(old.TotalDr, 0) <> COALESCE(NEW.TotalDr, 0)
  OR COALESCE(old.TotalCr, 0) <> COALESCE(NEW.TotalCr, 0))
 THEN
    IF(new.GL_JournalBatch_ID IS NOT NULL AND new.IsActive='Y') THEN
      UPDATE GL_JournalBatch
        SET TotalDr=TotalDr + new.TotalDr,
        TotalCr=TotalCr + new.TotalCr
      WHERE GL_JournalBatch_ID=new.GL_JournalBatch_ID;
    END IF;
  END IF;
 END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.gl_journal_trg() OWNER TO tad;

--
-- Name: gl_journalbatch_post(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION gl_journalbatch_post(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: GL_JournalBatch_Post.sql,v 1.2 2002/08/12 04:53:46 jjanke Exp $
  ***
  * Title:   Post all Journals of a Batch
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; -- 0=failure
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    DECLARE
      CUR_Journal RECORD;
    BEGIN
      -- Post all Journals
      FOR CUR_Journal IN
        (SELECT GL_Journal_ID
        FROM GL_Journal
        WHERE GL_JournalBatch_ID=v_Record_ID
          AND Processed='N'
        )
      LOOP
        PERFORM GL_JOURNAL_POST(NULL, CUR_Journal.GL_Journal_ID) ;
      END LOOP;
      -- Are all Journals Posted:1
      UPDATE GL_JournalBatch
        SET Processed='Y',
        Updated=TO_DATE(NOW()),
        UpdatedBy=v_AD_User_ID
      WHERE GL_JournalBatch_ID=v_Record_ID
        AND NOT EXISTS
        (SELECT *
        FROM GL_Journal
        WHERE GL_JournalBatch_ID=v_Record_ID
          AND Processed='N'
        )
        ;
    END;
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    RETURN;
EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    RAISE NOTICE '%',v_ResultStr ;
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END ; $_$;


ALTER FUNCTION public.gl_journalbatch_post(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: gl_journalline2_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION gl_journalline2_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





    /*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2001-2009 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
  v_AcctSchema_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  v_TargetCurrency_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  v_StdPrecision      NUMERIC(10) ;
  v_rate              NUMERIC;
  v_CurrencyRate      NUMERIC;
  v_CurrencyRateType  VARCHAR(60) ;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF(TG_OP = 'UPDATE') THEN
    IF NOT((COALESCE(old.AMTSOURCEDR, 0) <> COALESCE(NEW.AMTSOURCEDR, 0) OR COALESCE(old.AMTSOURCECR, 0) <> COALESCE(NEW.AMTSOURCECR, 0) OR COALESCE(old.C_CURRENCY_ID, '0') <> COALESCE(NEW.C_CURRENCY_ID, '0'))) THEN
      IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;
  END IF;
  SELECT C_AcctSchema_ID,
    CurrencyRate,
    COALESCE(CurrencyRateType, 'S')
  INTO v_AcctSchema_ID,
    v_CurrencyRate,
    v_CurrencyRateType
  FROM GL_Journal
  WHERE GL_Journal_ID=NEW.GL_Journal_ID;
  SELECT COALESCE(MAX(c.C_Currency_ID), '0'),
    COALESCE(MAX(c.StdPrecision), 2)
  INTO v_TargetCurrency_ID,
    v_StdPrecision
  FROM C_AcctSchema a,
    C_Currency c
  WHERE a.C_Currency_ID=c.C_Currency_ID
    AND a.C_AcctSchema_ID=v_AcctSchema_ID;
  v_rate:=C_CURRENCY_RATE(NEW.C_Currency_ID, v_TargetCurrency_ID, NEW.DateAcct, v_CurrencyRateType, NEW.AD_CLIENT_ID, NEW.AD_ORG_ID) ;
  IF(v_rate IS NULL) THEN
    v_rate:=v_CurrencyRate;
  END IF;
  NEW.AMTACCTDR:=ROUND(COALESCE(NEW.AMTSOURCEDR, 0) *v_rate, v_StdPrecision) ;
  NEW.AMTACCTCR:=ROUND(COALESCE(NEW.AMTSOURCECR, 0) *v_rate, v_StdPrecision) ;
  NEW.CURRENCYRATE:=v_rate;
  NEW.CURRENCYRATETYPE:=v_CurrencyRateType;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.gl_journalline2_trg() OWNER TO tad;

--
-- Name: gl_journalline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION gl_journalline_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: GL_JournalLine_Trg.sql,v 1.3 2002/07/01 02:29:00 jjanke Exp $
    ***
    * Title: Journal Line
    * Description:
    * - Update Journal Totals
    ************************************************************************/
    v_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_RO NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  -- Get ID
  IF(TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    v_ID:=new.GL_Journal_ID;
  ELSE
    v_ID:=old.GL_Journal_ID;
  END IF;
  -- ReadOnly Check
  SELECT COUNT(*)
  INTO v_RO
  FROM GL_Journal
  WHERE GL_Journal_ID=v_ID
    AND(Processed='Y'
    OR Posted='Y') ;
  IF(v_RO > 0) THEN
    RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
  END IF;
  -- Subtract Old Amount
  IF(TG_OP = 'UPDATE' OR TG_OP = 'DELETE') THEN
    IF(old.IsActive='Y') THEN
      UPDATE GL_Journal
        SET TotalDr=TotalDr - old.AmtSourceDr,
        TotalCr=TotalCr - old.AmtSourceCr
      WHERE GL_Journal_ID=old.GL_Journal_ID;
    END IF;
  END IF;
  -- Add new Amount
  IF(TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
    IF(new.IsActive='Y') THEN
      UPDATE GL_Journal
        SET TotalDr=TotalDr + new.AmtSourceDr,
        TotalCr=TotalCr + new.AmtSourceCr
      WHERE GL_Journal_ID=new.GL_Journal_ID;
    END IF;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.gl_journalline_trg() OWNER TO tad;

--
-- Name: gl_period_open(character varying, timestamp without time zone, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION gl_period_open(p_ad_client_id character varying, p_dateacct timestamp without time zone, p_docbasetype character varying, p_c_acctschema_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Compiere Public
* License 1.1 ("License"); You may not use this file except in
* compliance with the License. You may obtain a copy of the License in
* the legal folder of your Openbravo installation.
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing rights
* and limitations under the License.
* The Original Code is  Compiere  ERP &  Business Solution
* The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
* Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
* parts created by ComPiere are Copyright (C) ComPiere, Inc.;
* All Rights Reserved.
* Contributor(s): Openbravo SL
* Contributions are Copyright (C) 2001-2009 Openbravo, S.L.
*
* Specifically, this derivative work is based upon the following Compiere
* file and version.
*************************************************************************
* $Id: GL_Period_Open.sql,v 1.5 2003/02/07 05:49:58 jjanke Exp $
***
* Title: Period Control
* Description:
* Determine if period is open for DateAcct and DocBaseType (API, ..)
* If C_AcctSchema_ID is specified, check only for this schema,
* otherwise for the first of AD_Client_ID
* Return
*  C_Period_ID if period is open ot 0 if auto control
*  -1 if period is not open
*
* Test:
*  SELECT GL_Period_Open (11, '01-JAN-2002', 'ARI') FROM DUAL
************************************************************************/
    v_C_Calendar_ID VARCHAR(32) ; --OBTG:VARCHAR2--
    v_C_Period_ID   VARCHAR(32) := -1; -- not found --OBTG:varchar2--
    v_Temp_Period   NUMERIC(10) ;
    v_PeriodStatus  C_PeriodControl.PeriodStatus%TYPE;
    --
  --TYPE RECORD IS REFCURSOR;
    CUR_AS RECORD;
  BEGIN
    -- Get Calendar
    SELECT MAX(C_Calendar_ID)
    INTO v_C_Calendar_ID
    FROM AD_ClientInfo
    WHERE AD_Client_ID = p_AD_Client_ID;
    IF(v_C_Calendar_ID IS NULL) THEN
      RAISE NOTICE '%','NO Calendar' ;
      RETURN NULL;
    END IF;
    --
    FOR CUR_AS IN
      (SELECT AutoPeriodControl,
        Period_OpenHistory,
        Period_OpenFuture
      FROM C_AcctSchema
      WHERE AD_Client_ID = p_AD_Client_ID
        AND(p_C_AcctSchema_ID IS NULL
        OR C_AcctSchema_ID = p_C_AcctSchema_ID)
      )
    LOOP
      RAISE NOTICE '%','AcctSchema - Auto=' || CUR_AS.AutoPeriodControl ;
      v_C_Period_ID := 1;
      IF(CUR_AS.AutoPeriodControl = 'Y') THEN
        IF(p_DateAcct  BETWEEN(TRUNC(TO_DATE(NOW()), 'MM') -CUR_AS.Period_OpenHistory) AND(ADD_MONTHS(TRUNC(TO_DATE(NOW()), 'MM'), 1) +CUR_AS.Period_OpenFuture)) THEN
          RAISE NOTICE '%','Open(A) ' ||(TRUNC(TO_DATE(NOW()), 'MM') -CUR_AS.Period_OpenHistory) || ' - ' ||(ADD_MONTHS(TRUNC(TO_DATE(NOW()), 'MM'), 1) +CUR_AS.Period_OpenFuture) ;
          v_C_Period_ID := 0; -- open
        ELSE
          RAISE NOTICE '%','Not in Limits (A) ' ||(TRUNC(TO_DATE(NOW()), 'MM') -CUR_AS.Period_OpenHistory) || ' - ' ||(ADD_MONTHS(TRUNC(TO_DATE(NOW()), 'MM'), 1) +CUR_AS.Period_OpenFuture) ;
          v_C_Period_ID := -1; -- closed
        END IF;
      END IF; -- No AutoPeriodControl --
      -- Get Period if not AutoPeriodControl aoutside limits
      IF(v_C_Period_ID <> -1) THEN
        SELECT MAX(p.C_Period_ID)
        INTO v_C_Period_ID
        FROM C_Period p,
          C_Year y
        WHERE TRUNC(p_DateAcct) BETWEEN TRUNC(p.StartDate) AND TRUNC(p.EndDate)
          AND p.C_Year_ID = y.C_Year_ID
          AND y.C_Calendar_ID = v_C_Calendar_ID
          AND p.PeriodType = 'S'; -- standard period
        -- We have no Period defined
        IF(v_C_Period_ID IS NULL) THEN
          RAISE NOTICE '%','No Period found for Date ' || p_DateAcct ;
          v_C_Period_ID := -1;
        ELSIF(CUR_AS.AutoPeriodControl <> 'Y') THEN
          -- Check PeriodControl for Period and Document Type
          SELECT MAX(PeriodStatus)
          INTO v_PeriodStatus
          FROM C_PeriodControl
          WHERE C_Period_ID = v_C_Period_ID
            AND DocBaseType = p_DocBaseType;
          IF(v_PeriodStatus IS NULL) THEN
            RAISE NOTICE '%','No PeriodStatus found for Period ' || v_C_Period_ID ;
            v_C_Period_ID := -1;
          ELSIF(v_PeriodStatus = 'O') THEN
            RAISE NOTICE '%','Open' ;
          ELSE
            RAISE NOTICE '%','NOT Open: PeriodStatus=' || v_PeriodStatus ;
            v_C_Period_ID := -1;
          END IF;
        END IF;
      END IF;
      EXIT;
    END LOOP;
    RAISE NOTICE '%','Period_ID=' || v_C_Period_ID ;
    RETURN v_C_Period_ID;
END ; $_$;


ALTER FUNCTION public.gl_period_open(p_ad_client_id character varying, p_dateacct timestamp without time zone, p_docbasetype character varying, p_c_acctschema_id character varying) OWNER TO tad;

--
-- Name: greaterequal(timestamp without time zone, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION greaterequal(timestamp without time zone, character varying) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN $1 >= TO_DATE($2);
END;
$_$;


ALTER FUNCTION public.greaterequal(timestamp without time zone, character varying) OWNER TO tad;

--
-- Name: hex_to_int(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION hex_to_int(character varying) RETURNS numeric
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
h alias for $1;
exec varchar;
curs refcursor;
res numeric;
res1 numeric;
res2 numeric;
res3 numeric;
res4 numeric;
hi varchar;
h1 varchar;
h2 varchar;
h3 varchar;
h4 varchar;
exp1 numeric(50);
exp2 numeric(50);
exp3 numeric(50);
BEGIN
if length(h) < 32 then
	hi:=repeat('0',32-length(h)) || h;
else
	hi:=h;
end if;
h1:=substr(hi,25,8);
h2:=substr(hi,17,8);
h3:=substr(hi,9,8);
h4:=substr(hi,1,8);
exec := 'SELECT x''' || h1 || '''::bigint';
OPEN curs FOR EXECUTE exec;
FETCH curs INTO res1;
CLOSE curs;
exec := 'SELECT x''' || h2 || '''::bigint';
OPEN curs FOR EXECUTE exec;
FETCH curs INTO res2;
CLOSE curs;
exec := 'SELECT x''' || h3 || '''::bigint';
OPEN curs FOR EXECUTE exec;
FETCH curs INTO res3;
CLOSE curs;
exec := 'SELECT x''' || h4 || '''::bigint';
OPEN curs FOR EXECUTE exec;
FETCH curs INTO res4;
CLOSE curs;
exp1=pow(16::numeric,8::numeric);
exp2=pow(16::numeric,16::numeric);
exp3=pow(16::numeric,24::numeric);
res:=res1;
res:=res+res2*exp1;
res:=res+res3*exp2;
res:=res+res4*exp3;
return to_number(res);
END;$_$;


ALTER FUNCTION public.hex_to_int(character varying) OWNER TO tad;

--
-- Name: hex_to_int(numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION hex_to_int(numeric) RETURNS numeric
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
h alias for $1;
exec varchar;
curs refcursor;
res int;
BEGIN
return h;
END;$_$;


ALTER FUNCTION public.hex_to_int(numeric) OWNER TO tad;

--
-- Name: i_elementvalue_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION i_elementvalue_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
  IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
  END IF;
  
  SELECT COALESCE(MAX(SEQNO),0)+10
  INTO NEW.SEQNO
  FROM I_ELEMENTVALUE;
  
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.i_elementvalue_trg() OWNER TO tad;

--
-- Name: instr(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.instr(string character varying, string_to_search character varying, beg_index integer, occur_index integer) OWNER TO tad;

--
-- Name: is_trigger_enabled(text); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION is_trigger_enabled(tg_name text) RETURNS boolean
    LANGUAGE plpgsql STABLE
    AS $$ 
DECLARE
  v_isEnabled boolean := false;
BEGIN
  SELECT tgenabled INTO v_isEnabled FROM pg_trigger WHERE UPPER(tgname) = UPPER(tg_name);
  RETURN v_isEnabled;
EXCEPTION
WHEN OTHERS THEN
  SELECT (UPPER(tgenabled)<>'D') INTO v_isEnabled FROM pg_trigger WHERE tgname = tg_name;
  RETURN v_isEnabled;
END;   $$;


ALTER FUNCTION public.is_trigger_enabled(tg_name text) OWNER TO tad;

--
-- Name: last_day(date); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION last_day(date) RETURNS date
    LANGUAGE sql
    AS $_$select
cast(date_trunc('month', $1) + '1 month'::interval as date) - 1$_$;


ALTER FUNCTION public.last_day(date) OWNER TO tad;

--
-- Name: last_day(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION last_day(timestamp with time zone) RETURNS date
    LANGUAGE sql
    AS $_$select
cast(date_trunc('month', cast($1 AS date)) + '1 month'::interval as date) - 1$_$;


ALTER FUNCTION public.last_day(timestamp with time zone) OWNER TO tad;

--
-- Name: lowerequalnumeric(numeric, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION lowerequalnumeric(numeric, character varying) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN $1 <= TO_NUMBER($2);
END;
$_$;


ALTER FUNCTION public.lowerequalnumeric(numeric, character varying) OWNER TO tad;

--
-- Name: lowerequaltimestamp(timestamp without time zone, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION lowerequaltimestamp(timestamp without time zone, character varying) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN $1 <= TO_DATE($2);
END;
$_$;


ALTER FUNCTION public.lowerequaltimestamp(timestamp without time zone, character varying) OWNER TO tad;

--
-- Name: m_attributevalue_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.m_attributevalue_trg() OWNER TO tad;

--
-- Name: m_bom_pricelimit(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: m_bom_pricelist(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: m_bom_pricestd(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: m_bom_qty_available(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.m_bom_qty_available(p_product_id character varying, p_warehouse_id character varying, p_locator_id character varying) OWNER TO tad;

--
-- Name: m_bom_qty_available(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_bom_qty_available(p_product_id character varying, p_warehouse_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
RETURN M_BOM_QTY_AVAILABLE ($1, $2, NULL);
END
; $_$;


ALTER FUNCTION public.m_bom_qty_available(p_product_id character varying, p_warehouse_id character varying) OWNER TO tad;

--
-- Name: m_bom_qty_onhand(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: m_bom_qty_ordered(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: m_bom_qty_ordered(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_bom_qty_ordered(p_product_id character varying, p_warehouse_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
RETURN M_BOM_QTY_ORDERED ($1, $2, NULL);
END
; $_$;


ALTER FUNCTION public.m_bom_qty_ordered(p_product_id character varying, p_warehouse_id character varying) OWNER TO tad;

--
-- Name: m_bom_qty_reserved(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: m_bom_qty_reserved(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_bom_qty_reserved(p_product_id character varying, p_warehouse_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
RETURN M_BOM_QTY_RESERVED ($1, $2, NULL);
END
; $_$;


ALTER FUNCTION public.m_bom_qty_reserved(p_product_id character varying, p_warehouse_id character varying) OWNER TO tad;

--
-- Name: m_check_stock(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_check_stock(p_m_product_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, OUT p_result numeric, OUT p_message character varying) RETURNS record
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_ExistsNegativeStock NUMERIC;
  v_Stock CHAR:='N';
  v_Name VARCHAR(60) ; --OBTG:VARCHAR2--
  v_AD_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
BEGIN
  v_ResultStr:='Checking stock';
  p_Result:=1;
  SELECT ALLOWNEGATIVESTOCK
  INTO v_Stock
  FROM AD_CLIENTINFO
  WHERE AD_CLIENT_ID=p_AD_Client_ID;
  IF v_Stock='N' THEN
    SELECT COUNT(*)
    INTO v_ExistsNegativeStock
    FROM
      ( SELECT ROUND(COALESCE(QTYONHAND, 0), 2) AS QTY,
        ROUND(COALESCE(QTYORDERONHAND, 0), 2) AS QTYORDER
      FROM M_STORAGE_DETAIL
      WHERE M_PRODUCT_ID=p_M_Product_ID
        AND AD_CLIENT_ID=p_AD_Client_ID
        AND AD_ORG_ID=p_AD_Org_ID
      )
      A
    WHERE QTY<0
      OR QTYORDER<0;
    IF v_ExistsNegativeStock<>0 THEN
      p_Result:=0;
      p_Message:='@NotEnoughStocked@';
    END IF;
  END IF;
  RETURN;
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  RAISE EXCEPTION '%', SQLERRM;
  RETURN;
END ; $$;


ALTER FUNCTION public.m_check_stock(p_m_product_id character varying, p_ad_client_id character varying, p_ad_org_id character varying, OUT p_result numeric, OUT p_message character varying) OWNER TO tad;

--
-- Name: m_copy_product_template(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: m_discountschema_reseq(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_discountschema_reseq(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_DiscountSchema_ReSeq.sql,v 1.2 2002/10/21 04:49:46 jjanke Exp $
  ***
  * Title: Resequence Discount entries
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; -- 0=failure
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    --
    v_NextNo NUMERIC;
    v_Count NUMERIC:=0;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    -- Line
    v_ResultStr:='ResequenceLine';
    DECLARE
      Cur_Line RECORD;
    BEGIN
      v_NextNo:=10;
      FOR Cur_Line IN
        (SELECT M_DiscountSchemaLine_ID
        FROM M_DiscountSchemaLine
        WHERE M_DiscountSchema_ID=v_Record_ID
        ORDER BY SeqNo  FOR UPDATE --OBTG: OF SeqNo--
        )
      LOOP
        UPDATE M_DiscountSchemaLine
          SET SeqNo=v_NextNo
        WHERE M_DiscountSchemaLine.M_DiscountSchemaLine_ID=Cur_Line.M_DiscountSchemaLine_ID;
        v_NextNo:=v_NextNo + 10;
        v_Count:=v_Count + 1;
      END LOOP;
    END; -- Line
    v_Message:='@Updated@ ' || v_Count;
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $_$;


ALTER FUNCTION public.m_discountschema_reseq(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: m_freight_calculate(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: m_generate_average_costs(character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: m_generate_standard_costs(character varying, timestamp without time zone, character); Type: FUNCTION; Schema: public; Owner: tad
--


-- Name: m_get_offer(timestamp without time zone, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_get_offer(p_date timestamp without time zone, p_bpartner_id character varying, p_product_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*
DEPRECATED!
This function should not be used, now more than one offer can be applied
*/
  v_Offer_ID VARCHAR(32); --OBTG:VARCHAR2--
  --TYPE RECORD IS REFCURSOR;
    Cur_Offer RECORD;
  BEGIN
    FOR Cur_Offer IN
      (SELECT M_OFFER_ID
      FROM M_OFFER
      WHERE p_Date BETWEEN DATEFROM AND COALESCE(DATETO, TO_DATE('31-12-9999', 'DD-MM-YYYY'))
        AND((BPARTNER_SELECTION = 'Y'
        AND NOT EXISTS
        (SELECT 1
        FROM M_OFFER_BPARTNER
        WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND C_BPARTNER_ID = p_BPartner_ID
        ))
        OR(BPARTNER_SELECTION = 'N'
        AND EXISTS
        (SELECT 1
        FROM M_OFFER_BPARTNER
        WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND C_BPARTNER_ID = p_BPartner_ID
        )))
        AND((BP_GROUP_SELECTION = 'Y'
        AND NOT EXISTS
        (SELECT 1
        FROM C_BPARTNER B,
          M_OFFER_BP_GROUP OB
        WHERE OB.M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND B.C_BPARTNER_ID = p_BPartner_ID
          AND OB.C_BP_GROUP_ID = B.C_BP_GROUP_ID
        ))
        OR(BP_GROUP_SELECTION = 'N'
        AND EXISTS
        (SELECT 1
        FROM C_BPARTNER B,
          M_OFFER_BP_GROUP OB
        WHERE OB.M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND B.C_BPARTNER_ID = p_BPartner_ID
          AND OB.C_BP_GROUP_ID = B.C_BP_GROUP_ID
        )))
        AND((PRODUCT_SELECTION = 'Y'
        AND NOT EXISTS
        (SELECT 1
        FROM M_OFFER_PRODUCT
        WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND M_PRODUCT_ID = p_Product_ID
        ))
        OR(PRODUCT_SELECTION = 'N'
        AND EXISTS
        (SELECT 1
        FROM M_OFFER_PRODUCT
        WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND M_PRODUCT_ID = p_Product_ID
        )))
        AND((PROD_CAT_SELECTION = 'Y'
        AND NOT EXISTS
        (SELECT 1
        FROM M_PRODUCT P,
          M_OFFER_PROD_CAT OP
        WHERE OP.M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND P.M_PRODUCT_ID = p_Product_ID
          AND OP.M_PRODUCT_CATEGORY_ID = P.M_PRODUCT_CATEGORY_ID
        ))
        OR(PROD_CAT_SELECTION = 'N'
        AND EXISTS
        (SELECT 1
        FROM M_PRODUCT P,
          M_OFFER_PROD_CAT OP
        WHERE OP.M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND P.M_PRODUCT_ID = p_Product_ID
          AND OP.M_PRODUCT_CATEGORY_ID = P.M_PRODUCT_CATEGORY_ID
        )))
      ORDER BY PRIORITY,
        M_OFFER_ID DESC
      )
    LOOP
      v_Offer_ID := Cur_Offer.M_OFFER_ID;
      EXIT;
    END LOOP;
    RETURN v_Offer_ID;
  EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
END ; $$;


ALTER FUNCTION public.m_get_offer(p_date timestamp without time zone, p_bpartner_id character varying, p_product_id character varying) OWNER TO tad;

--
-- Name: m_get_offer_price(character varying, numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_get_offer_price(p_offer_id character varying, p_pricestd numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
/*
DEPRECATED!
This function should not be used. Use instead M_Get_Offers_Price.
*/
  v_Price    NUMERIC;
  v_Fixed    NUMERIC;
  v_AddAmt   NUMERIC;
  v_Discount NUMERIC;
BEGIN
  v_Price := p_PriceStd;
  IF v_Price IS NULL THEN
    v_Price := 0;
  END IF;
  IF p_Offer_ID IS NOT NULL THEN
    SELECT FIXED,
      COALESCE(ADDAMT, 0),
      COALESCE(DISCOUNT, 0)
    INTO  v_Fixed,
      v_AddAmt,
      v_Discount
    FROM M_OFFER
    WHERE M_OFFER_ID = p_Offer_ID
    AND ISACTIVE = 'Y';
    IF v_Fixed IS NOT NULL THEN
      v_Price := v_Fixed;
    ELSE
      v_Price :=(p_PriceStd - v_AddAmt) *(1 - v_Discount/100) ;
    END IF;
  END IF;
  RETURN v_Price;
EXCEPTION
WHEN OTHERS THEN
  RETURN NULL;
END ; $$;


ALTER FUNCTION public.m_get_offer_price(p_offer_id character varying, p_pricestd numeric) OWNER TO tad;

--
-- Name: m_get_offer_std_price(character varying, numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_get_offer_std_price(p_offer_id character varying, p_priceactual numeric) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_Price    NUMERIC;
  v_Fixed    NUMERIC;
  v_AddAmt   NUMERIC;
  v_Discount NUMERIC;
BEGIN
  v_Price := p_PriceActual;
  IF v_Price IS NULL THEN
    v_Price := 0;
  END IF;
  IF p_Offer_ID IS NOT NULL THEN
    SELECT FIXED,
      COALESCE(ADDAMT, 0),
      COALESCE(DISCOUNT, 0)
    INTO  v_Fixed,
      v_AddAmt,
      v_Discount
    FROM M_OFFER
    WHERE M_OFFER_ID = p_Offer_ID;
    IF v_Fixed IS NOT NULL THEN
      v_Price := v_Fixed;
    ELSE
      v_Price := v_AddAmt +(p_PriceActual/(1-v_Discount/100)) ;
    END IF;
  END IF;
  RETURN v_Price;
EXCEPTION
WHEN OTHERS THEN
  RETURN NULL;
END ; $$;


ALTER FUNCTION public.m_get_offer_std_price(p_offer_id character varying, p_priceactual numeric) OWNER TO tad;

--
-- Name: m_get_offers_applied(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_get_offers_applied(p_id character varying, p_type character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --TYPE RECORD IS REFCURSOR;
  CurOffers RECORD;

  v_offers VARCHAR(500); --OBTG:VARCHAR2--
BEGIN
  IF p_Type = 'I' THEN --invoice
    FOR CurOffers IN (SELECT o.addamt, o.discount, o.fixed, cursymbol
                        FROM C_InvoiceLine_Offer io,
                             M_Offer             o,
                             C_Currency          c,
                             C_Invoice           i,
                             C_InvoiceLine       il
                       WHERE o.M_Offer_ID = io.M_Offer_ID
                         AND c.C_Currency_ID = i.C_Currency_ID
                         AND i.C_Invoice_ID  = il.C_Invoice_ID
                         AND il.C_InvoiceLine_ID = io.C_InvoiceLine_ID
                         AND il.C_InvoiceLine_ID = p_Id
                       ORDER BY COALESCE(io.line,0)) LOOP
      IF CurOffers.Fixed IS NOT NULL THEN
        IF v_Offers IS NOT NULL THEN
          v_Offers := v_Offers || ' + ';
        END IF;
        v_Offers := v_Offers || 'F: ' || CurOffers.Fixed ||CurOffers.CurSymbol;
      ELSE
        IF COALESCE(CurOffers.AddAmt,0) <> 0 THEN
          IF v_Offers IS NOT NULL THEN
            v_Offers := v_Offers || ' + ';
          END IF;
          v_Offers := v_Offers || CurOffers.AddAmt || CurOffers.CurSymbol;
        END IF;

        IF COALESCE(CurOffers.Discount,0) <> 0 THEN
          IF v_Offers IS NOT NULL THEN
            v_Offers := v_Offers || ' + ';
          END IF;
          v_Offers := v_Offers || CurOffers.Discount || '%';
        END IF;
      END IF;
    END LOOP;
  ELSE                 --order
    FOR CurOffers IN (SELECT o.addamt, o.discount, o.fixed, cursymbol
                        FROM C_OrderLine_Offer io,
                             M_Offer             o,
                             C_Currency          c,
                             C_Order             i,
                             C_OrderLine       il
                       WHERE o.M_Offer_ID = io.M_Offer_ID
                         AND c.C_Currency_ID = i.C_Currency_ID
                         AND i.C_Order_ID  = il.C_Order_ID
                         AND il.C_OrderLine_ID = io.C_OrderLine_ID
                         AND il.C_OrderLine_ID = p_Id
                       ORDER BY COALESCE(io.line,0)) LOOP
      IF CurOffers.Fixed IS NOT NULL THEN
        IF v_Offers IS NOT NULL THEN
          v_Offers := v_Offers || ' + ';
        END IF;
        v_Offers := v_Offers || 'F: ' || CurOffers.Fixed || CurOffers.CurSymbol;
      ELSE
        IF COALESCE(CurOffers.AddAmt,0) <> 0 THEN
          IF v_Offers IS NOT NULL THEN
            v_Offers := v_Offers || ' + ';
          END IF;
          v_Offers := v_Offers || CurOffers.AddAmt || CurOffers.CurSymbol;
        END IF;

        IF COALESCE(CurOffers.Discount,0) <> 0 THEN
          IF v_Offers IS NOT NULL THEN
            v_Offers := v_Offers || ' + ';
          END IF;
          v_Offers := v_Offers || CurOffers.Discount || '%';
        END IF;
      END IF;
    END LOOP;
  END IF;
  RETURN v_Offers;
END ; $$;


ALTER FUNCTION public.m_get_offers_applied(p_id character varying, p_type character varying) OWNER TO tad;

--
-- Name: m_get_offers_name(timestamp without time zone, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_get_offers_name(p_date timestamp without time zone, p_bpartner_id character varying, p_product_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_Offer_ID VARCHAR(32); --OBTG:VARCHAR2--
  --TYPE RECORD IS REFCURSOR;
    Cur_Offer RECORD;
    v_Names VARCHAR(10000) := ''; --OBTG:varchar2--
  BEGIN
    FOR Cur_Offer IN
      (SELECT NAME
      FROM M_OFFER
      WHERE p_Date BETWEEN DATEFROM AND COALESCE(DATETO, TO_DATE('31-12-9999', 'DD-MM-YYYY'))
        AND IsActive = 'Y'
        AND((BPARTNER_SELECTION = 'Y'
        AND NOT EXISTS
        (SELECT 1
        FROM M_OFFER_BPARTNER
        WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND C_BPARTNER_ID = p_BPartner_ID
        ))
        OR(BPARTNER_SELECTION = 'N'
        AND EXISTS
        (SELECT 1
        FROM M_OFFER_BPARTNER
        WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND C_BPARTNER_ID = p_BPartner_ID
        )))
        AND((BP_GROUP_SELECTION = 'Y'
        AND NOT EXISTS
        (SELECT 1
        FROM C_BPARTNER B,
          M_OFFER_BP_GROUP OB
        WHERE OB.M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND B.C_BPARTNER_ID = p_BPartner_ID
          AND OB.C_BP_GROUP_ID = B.C_BP_GROUP_ID
        ))
        OR(BP_GROUP_SELECTION = 'N'
        AND EXISTS
        (SELECT 1
        FROM C_BPARTNER B,
          M_OFFER_BP_GROUP OB
        WHERE OB.M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND B.C_BPARTNER_ID = p_BPartner_ID
          AND OB.C_BP_GROUP_ID = B.C_BP_GROUP_ID
        )))
        AND((PRODUCT_SELECTION = 'Y'
        AND NOT EXISTS
        (SELECT 1
        FROM M_OFFER_PRODUCT
        WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND M_PRODUCT_ID = p_Product_ID
        ))
        OR(PRODUCT_SELECTION = 'N'
        AND EXISTS
        (SELECT 1
        FROM M_OFFER_PRODUCT
        WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND M_PRODUCT_ID = p_Product_ID
        )))
        AND((PROD_CAT_SELECTION = 'Y'
        AND NOT EXISTS
        (SELECT 1
        FROM M_PRODUCT P,
          M_OFFER_PROD_CAT OP
        WHERE OP.M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND P.M_PRODUCT_ID = p_Product_ID
          AND OP.M_PRODUCT_CATEGORY_ID = P.M_PRODUCT_CATEGORY_ID
        ))
        OR(PROD_CAT_SELECTION = 'N'
        AND EXISTS
        (SELECT 1
        FROM M_PRODUCT P,
          M_OFFER_PROD_CAT OP
        WHERE OP.M_OFFER_ID = M_OFFER.M_OFFER_ID
          AND P.M_PRODUCT_ID = p_Product_ID
          AND OP.M_PRODUCT_CATEGORY_ID = P.M_PRODUCT_CATEGORY_ID
        )))
      ORDER BY PRIORITY,
        M_OFFER_ID DESC
      )
    LOOP
      IF v_Names <> '' THEN
        v_Names := v_Names||'<br/>&nbsp;';
      END IF;
      v_Names := v_Names||Cur_Offer.name;
    END LOOP;
    RETURN v_Names;
EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
END ; $$;


ALTER FUNCTION public.m_get_offers_name(p_date timestamp without time zone, p_bpartner_id character varying, p_product_id character varying) OWNER TO tad;

--
-- Name: m_get_offers_price(timestamp without time zone, character varying, character varying, numeric, numeric, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: m_get_offers_std_price(character varying, numeric, character varying, timestamp without time zone, numeric, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_get_offers_std_price(p_bpartner_id character varying, p_priceactual numeric, p_product_id character varying, p_date timestamp without time zone, p_qty numeric, p_pricelist character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --TYPE RECORD IS REFCURSOR;
  Cur_Offer RECORD;
  v_Price NUMERIC;
BEGIN

  --Get the new "std" price from the Actual price (if actual price is the std price they will be equal)
   v_Price := p_PriceActual;
    FOR Cur_Offer IN (SELECT M_OFFER_ID
         FROM M_OFFER
         WHERE p_Date BETWEEN DATEFROM AND COALESCE(DATETO,TO_DATE('31-12-9999','DD-MM-YYYY'))
         AND IsActive = 'Y'
   AND (p_Qty >= COALESCE(Qty_From,0) OR Qty_From IS NULL)
   AND (p_Qty <= COALESCE(Qty_To,0) OR Qty_To IS NULL)
   AND ((PRICELIST_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM M_OFFER_PRICELIST
           WHERE M_OFFER_ID=M_OFFER.M_OFFER_ID
           AND M_PRICELIST_ID = p_PriceList))
         OR (PRICELIST_SELECTION='N' AND EXISTS(SELECT 1 FROM M_OFFER_PRICELIST
            WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
            AND M_PRICELIST_ID = p_PriceList)))
         AND ((BPARTNER_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM M_OFFER_BPARTNER
           WHERE M_OFFER_ID=M_OFFER.M_OFFER_ID
           AND C_BPARTNER_ID = p_BPartner_ID))
         OR (BPARTNER_SELECTION='N' AND EXISTS(SELECT 1 FROM M_OFFER_BPARTNER
            WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
            AND C_BPARTNER_ID = p_BPartner_ID)))
         AND ((BP_GROUP_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM C_BPARTNER B, M_OFFER_BP_GROUP OB
           WHERE OB.M_OFFER_ID = M_OFFER.M_OFFER_ID
           AND B.C_BPARTNER_ID = p_BPartner_ID
           AND OB.C_BP_GROUP_ID = B.C_BP_GROUP_ID))
         OR (BP_GROUP_SELECTION='N' AND EXISTS (SELECT 1 FROM C_BPARTNER B, M_OFFER_BP_GROUP OB
           WHERE OB.M_OFFER_ID = M_OFFER.M_OFFER_ID
           AND B.C_BPARTNER_ID = p_BPartner_ID
           AND OB.C_BP_GROUP_ID = B.C_BP_GROUP_ID)))
         AND ((PRODUCT_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM M_OFFER_PRODUCT
           WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
           AND M_PRODUCT_ID = p_Product_ID))
         OR (PRODUCT_SELECTION='N' AND EXISTS (SELECT 1 FROM M_OFFER_PRODUCT
            WHERE M_OFFER_ID = M_OFFER.M_OFFER_ID
            AND M_PRODUCT_ID = p_Product_ID)))
         AND ((PROD_CAT_SELECTION='Y' AND NOT EXISTS (SELECT 1 FROM M_PRODUCT P, M_OFFER_PROD_CAT OP
           WHERE OP.M_OFFER_ID = M_OFFER.M_OFFER_ID
           AND P.M_PRODUCT_ID = p_Product_ID
           AND OP.M_PRODUCT_CATEGORY_ID = P.M_PRODUCT_CATEGORY_ID))
         OR (PROD_CAT_SELECTION='N' AND EXISTS (SELECT 1 FROM M_PRODUCT P, M_OFFER_PROD_CAT OP
           WHERE OP.M_OFFER_ID = M_OFFER.M_OFFER_ID
           AND P.M_PRODUCT_ID = p_Product_ID
           AND OP.M_PRODUCT_CATEGORY_ID = P.M_PRODUCT_CATEGORY_ID)))
         ORDER BY PRIORITY DESC, M_OFFER_ID) LOOP
    v_Price := M_Get_Offer_Std_Price(Cur_Offer.M_Offer_ID, v_Price);
   END LOOP;
   RETURN v_Price;
END ; $$;


ALTER FUNCTION public.m_get_offers_std_price(p_bpartner_id character varying, p_priceactual numeric, p_product_id character varying, p_date timestamp without time zone, p_qty numeric, p_pricelist character varying) OWNER TO tad;


--
-- Name: m_get_pricelist_version(character varying, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_get_pricelist_version(p_pricelist_id character varying, p_date timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_M_PriceList_Version_ID VARCHAR(32); --OBTG:VARCHAR2--
  --TYPE RECORD IS REFCURSOR;
    Cur_Pricelist_Version RECORD;
  BEGIN
    FOR Cur_Pricelist_Version IN
      (SELECT PLV.M_PRICELIST_VERSION_ID AS PRICELISTVERSION
      FROM M_PRICELIST PL,
        M_PRICELIST_VERSION PLV
      WHERE PL.M_PRICELIST_ID = PLV.M_PRICELIST_ID
        AND PLV.ISACTIVE = 'Y'
        AND PL.M_PRICELIST_ID = p_Pricelist_Id
        AND PLV.VALIDFROM <= p_Date
      ORDER BY PLV.VALIDFROM DESC
      )
    LOOP
      v_M_PriceList_Version_ID := Cur_Pricelist_Version.PRICELISTVERSION;
      EXIT;
    END LOOP;
    RETURN v_M_PriceList_Version_ID;
END ; $$;


ALTER FUNCTION public.m_get_pricelist_version(p_pricelist_id character varying, p_date timestamp without time zone) OWNER TO tad;

--
-- Name: m_get_product_cost(character varying, timestamp without time zone, character); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: m_get_product_price(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_get_product_price(p_ad_client_id character varying, p_m_product_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_M_PriceList_Version_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Price                  NUMERIC;
  v_BaseCurrency VARCHAR(32); --OBTG:VARCHAR2--
BEGIN
  SELECT AD_CLIENT.C_CURRENCY_ID 
  INTO v_BaseCurrency
  FROM AD_CLIENT
  WHERE AD_CLIENT.AD_CLIENT_ID = p_AD_Client_ID;
  SELECT M_PRICELIST_VERSION_ID
  INTO v_M_PriceList_Version_ID
  FROM M_PRICELIST_VERSION
  WHERE M_PRICELIST_ID IN
    (SELECT M_PRICELIST_ID
    FROM M_PRICELIST
    WHERE ISDEFAULT = 'Y'
      AND AD_CLIENT_ID = p_AD_Client_ID
      AND ISACTIVE = 'Y'
    )
    AND VALIDFROM =
    (SELECT max(VALIDFROM)
    FROM M_PRICELIST_VERSION
    WHERE M_PRICELIST_ID IN
      (SELECT M_PRICELIST_ID
      FROM M_PRICELIST
      WHERE ISDEFAULT = 'Y'
        AND AD_CLIENT_ID = p_AD_Client_ID
        AND ISACTIVE = 'Y'
      )
      AND VALIDFROM <= TO_DATE(TO_DATE(NOW()))
    )
    ;
  IF(v_M_PriceList_Version_ID IS NULL) THEN
    RETURN 0;
  ELSE
    SELECT C_CURRENCY_CONVERT(COALESCE(M_PRODUCTPRICE.PRICESTD, 0), M_PRICELIST.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(TO_DATE(NOW())), NULL, M_PRODUCTPRICE.AD_CLIENT_ID, M_PRODUCTPRICE.AD_ORG_ID)
    INTO v_Price
    FROM M_PRODUCTPRICE, M_PRICELIST_VERSION, M_PRICELIST
    WHERE M_PRODUCTPRICE.M_PRICELIST_VERSION_ID = v_M_PriceList_Version_ID
      AND M_PRODUCTPRICE.AD_CLIENT_ID = p_AD_Client_ID
      AND M_PRODUCTPRICE.M_PRODUCT_ID = p_M_Product_ID
      AND M_PRICELIST_VERSION.M_PRICELIST_VERSION_ID = M_PRODUCTPRICE.M_PRICELIST_VERSION_ID
      AND M_PRICELIST.M_PRICELIST_ID = M_PRICELIST_VERSION.M_PRICELIST_ID;
  END IF;
  IF v_Price IS NULL THEN
    v_Price := 0;
  END IF;
  RETURN v_Price;
END ; $$;


ALTER FUNCTION public.m_get_product_price(p_ad_client_id character varying, p_m_product_id character varying) OWNER TO tad;

--
-- Name: m_get_product_price_date(character varying, character varying, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_get_product_price_date(p_ad_client_id character varying, p_m_product_id character varying, p_date timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2007-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_M_PriceList_Version_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Price                  NUMERIC;
  v_BaseCurrency VARCHAR(32); --OBTG:VARCHAR2--
BEGIN
  SELECT AD_CLIENT.C_CURRENCY_ID 
  INTO v_BaseCurrency
  FROM AD_CLIENT
  WHERE AD_CLIENT.AD_CLIENT_ID = p_AD_Client_ID;
  SELECT MAX(M_PRICELIST_VERSION_ID)
  INTO v_M_PriceList_Version_ID
  FROM M_PRICELIST_VERSION
  WHERE M_PRICELIST_ID IN
    (SELECT M_PRICELIST_ID
    FROM M_PRICELIST
    WHERE ISDEFAULT = 'Y'
      AND AD_CLIENT_ID = p_AD_Client_ID
      AND ISACTIVE = 'Y'
    )
    AND VALIDFROM =
    (SELECT max(VALIDFROM)
    FROM M_PRICELIST_VERSION
    WHERE M_PRICELIST_ID IN
      (SELECT M_PRICELIST_ID
      FROM M_PRICELIST
      WHERE ISDEFAULT = 'Y'
        AND AD_CLIENT_ID = p_AD_Client_ID
        AND ISACTIVE = 'Y'
      )
      AND TO_DATE(VALIDFROM) <= TO_DATE(COALESCE(p_Date, TO_DATE(NOW())))
      AND EXISTS(SELECT 1
                 FROM M_PRODUCTPRICE
                 WHERE M_PRICELIST_VERSION_ID = M_PRICELIST_VERSION.M_PRICELIST_VERSION_ID
                   AND M_PRODUCT_ID = p_M_Product_ID)
    )
    AND EXISTS(SELECT 1
                 FROM M_PRODUCTPRICE
                 WHERE M_PRICELIST_VERSION_ID = M_PRICELIST_VERSION.M_PRICELIST_VERSION_ID
                   AND M_PRODUCT_ID = p_M_Product_ID)
    ;
  IF(v_M_PriceList_Version_ID IS NULL) THEN
    RETURN 0;
  ELSE
   SELECT C_CURRENCY_CONVERT(COALESCE(M_PRODUCTPRICE.PRICESTD, 0), M_PRICELIST.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(COALESCE(p_Date, TO_DATE(NOW()))), NULL, M_PRODUCTPRICE.AD_CLIENT_ID, M_PRODUCTPRICE.AD_ORG_ID)
    INTO v_Price
    FROM M_PRODUCTPRICE, M_PRICELIST_VERSION, M_PRICELIST
    WHERE M_PRODUCTPRICE.M_PRICELIST_VERSION_ID = v_M_PriceList_Version_ID
      AND M_PRODUCTPRICE.AD_CLIENT_ID = p_AD_Client_ID
      AND M_PRODUCTPRICE.M_PRODUCT_ID = p_M_Product_ID
      AND M_PRICELIST_VERSION.M_PRICELIST_VERSION_ID = M_PRODUCTPRICE.M_PRICELIST_VERSION_ID
      AND M_PRICELIST.M_PRICELIST_ID = M_PRICELIST_VERSION.M_PRICELIST_ID;
  END IF;
  IF v_Price IS NULL THEN
    v_Price := 0;
  END IF;
  RETURN v_Price;
END ; $$;


ALTER FUNCTION public.m_get_product_price_date(p_ad_client_id character varying, p_m_product_id character varying, p_date timestamp without time zone) OWNER TO tad;

--
-- Name: m_get_purchase_price(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_get_purchase_price(p_product_id character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_Price NUMERIC;
  --TYPE RECORD IS REFCURSOR;
    Cur_Orderline RECORD;
    Cur_Invoiceline RECORD;
    Cur_Pricelist_Version RECORD;

    v_BaseCurrency VARCHAR(32); --OBTG:VARCHAR2--
  BEGIN
    SELECT AD_CLIENT.C_CURRENCY_ID 
      INTO v_BaseCurrency
      FROM M_PRODUCT, AD_CLIENT
      WHERE M_PRODUCT.M_PRODUCT_ID = p_Product_ID
      AND M_PRODUCT.AD_CLIENT_ID = AD_CLIENT.AD_CLIENT_ID;
    FOR Cur_Invoiceline IN
      (SELECT COALESCE(C_CURRENCY_CONVERT(C_INVOICELINE.PRICEACTUAL, C_INVOICE.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, TO_DATE(NOW()))), NULL, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID), 0) AS Price
      FROM C_INVOICELINE,
        C_INVOICE
      WHERE C_INVOICELINE.C_INVOICE_ID = C_INVOICE.C_INVOICE_ID
        AND C_INVOICE.ISSOTRX = 'N'
        AND C_INVOICE.DOCSTATUS = 'CO'
        AND C_INVOICE.PROCESSED = 'Y'
        AND C_INVOICELINE.M_PRODUCT_ID = p_Product_ID
      ORDER BY C_INVOICE.DATEINVOICED DESC
      )
    LOOP
      v_Price := Cur_Invoiceline.PRICE;
      EXIT;
    END LOOP;
    IF(v_Price IS NULL) THEN
      FOR Cur_Orderline IN
        (SELECT COALESCE(C_CURRENCY_CONVERT(C_ORDERLINE.PRICEACTUAL, COALESCE(C_ORDERLINE.C_CURRENCY_ID, C_ORDER.C_CURRENCY_ID), v_BaseCurrency, TO_DATE(COALESCE(C_ORDERLINE.DATEORDERED, C_ORDER.DATEORDERED, TO_DATE(NOW()))), NULL, C_ORDERLINE.AD_CLIENT_ID, C_ORDERLINE.AD_ORG_ID), 0) AS Price
        FROM C_ORDERLINE,
          C_ORDER
        WHERE C_ORDERLINE.C_ORDER_ID = C_ORDER.C_ORDER_ID
          AND C_ORDER.ISSOTRX = 'N'
          AND C_ORDER.DOCSTATUS = 'CO'
          AND C_ORDER.PROCESSED = 'Y'
          AND C_ORDERLINE.M_PRODUCT_ID = p_Product_ID
        ORDER BY C_ORDER.DATEORDERED DESC
        )
      LOOP
        v_Price := Cur_Orderline.PRICE;
        EXIT;
      END LOOP;
    END IF;
    IF(v_Price IS NULL) THEN
      FOR Cur_Pricelist_Version IN
        (SELECT COALESCE(C_CURRENCY_CONVERT(M_PRODUCTPRICE.PRICESTD, M_PRICELIST.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(TO_DATE(NOW())), NULL, M_PRODUCTPRICE.AD_CLIENT_ID, M_PRODUCTPRICE.AD_ORG_ID), 0) AS Price
        FROM M_PRODUCTPRICE,
          M_PRICELIST_VERSION,
          M_PRICELIST
        WHERE M_PRODUCTPRICE.M_PRICELIST_VERSION_ID = M_PRICELIST_VERSION.M_PRICELIST_VERSION_ID
          AND M_PRICELIST_VERSION.M_PRICELIST_ID = M_PRICELIST.M_PRICELIST_ID
          AND M_PRICELIST.ISSOPRICELIST = 'N'  --  AND M_PRICELIST_VERSION.ISACTIVE= 'Y'
          AND M_PRICELIST_VERSION.VALIDFROM < TO_DATE(TO_DATE(NOW()))
          AND M_PRODUCTPRICE.M_PRODUCT_ID = p_Product_ID
        ORDER BY M_PRICELIST_VERSION.VALIDFROM DESC
        )
      LOOP
        v_Price := Cur_Pricelist_Version.PRICE;
        EXIT;
      END LOOP;
    END IF;
    IF(v_Price IS NULL) THEN
      SELECT COALESCE(MAX(C_CURRENCY_CONVERT(M_PRODUCT_PO.PRICEPO, M_PRODUCT_PO.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(TO_DATE(NOW())), NULL, M_PRODUCT_PO.AD_CLIENT_ID, M_PRODUCT_PO.AD_ORG_ID)), 0)
      INTO v_Price
      FROM M_PRODUCT_PO
      WHERE M_PRODUCT_PO.M_PRODUCT_ID = p_Product_ID
      AND M_PRODUCT_PO.ISCURRENTVENDOR = 'Y';
    END IF;
    IF(v_Price IS NULL) THEN
      v_Price := 0;
    END IF;
    RETURN v_Price;
END ; $$;


ALTER FUNCTION public.m_get_purchase_price(p_product_id character varying) OWNER TO tad;

--
-- Name: m_inout_cancel(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_inout_cancel(p_pinstance_id character varying, p_order_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_InOut_Cancel.sql,v 1.2 2002/08/13 05:27:36 jjanke Exp $
  ***
  * Title:   Cancel Delivery of Order by reversing it
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    --
    Cur_InOut RECORD;
    v_AD_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    
  BEGIN
    --  Update AD_PInstance
    IF(p_PInstance_ID IS NOT NULL) THEN
      RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
      END LOOP; -- Get Parameter
      RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    ELSE
      v_Record_ID:=p_Order_ID;
    END IF;
  BEGIN --BODY
    -- For all Deliveries of Order
    FOR Cur_InOut IN
      (SELECT *
      FROM M_InOut
      WHERE C_Order_ID=v_Record_ID
        AND DocStatus<>'RE' -- Not the existing reversal trx
        FOR UPDATE
      )
    LOOP
      RAISE NOTICE '%','Cancel Shipment ' || Cur_InOut.DocumentNo || ', ID=' || Cur_InOut.M_InOut_ID ;
      -- Cancel Order
      UPDATE M_InOut
        SET DocAction='RC', -- Reverse Correction
        Processed='N',
        Updated=TO_DATE(NOW())
      WHERE M_InOut_ID=Cur_InOut.M_InOut_ID;
      PERFORM M_INOUT_POST(NULL, Cur_InOut.M_InOut_ID) ;
    END LOOP;
    ---- <<FINISH_PROCESS>>
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE EXCEPTION '%', SQLERRM;
  END IF;
  RETURN;
END ; $_$;


ALTER FUNCTION public.m_inout_cancel(p_pinstance_id character varying, p_order_id character varying) OWNER TO tad;

--
-- Name: m_inout_cancel(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_inout_cancel(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 PERFORM M_INOUT_CANCEL($1, NULL);
END
; $_$;


ALTER FUNCTION public.m_inout_cancel(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: m_inout_chk_restrictions_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.m_inout_chk_restrictions_trg() OWNER TO tad;

--
-- Name: m_inout_create(character varying, character varying, character varying, character, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: m_inout_create(character varying, character varying, character varying, character); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_inout_create(p_pinstance_id character varying, OUT p_inout_id character varying, p_order_id character varying, p_invoice_id character varying, p_forcedelivery character) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO  $2 FROM M_INOUT_CREATE($1, $3, $4, $5, NULL);
END
; $_$;


ALTER FUNCTION public.m_inout_create(p_pinstance_id character varying, OUT p_inout_id character varying, p_order_id character varying, p_invoice_id character varying, p_forcedelivery character) OWNER TO tad;

--
-- Name: m_inout_create(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_inout_create(p_pinstance_id character varying, OUT p_inout_id character varying, p_order_id character varying, p_invoice_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO  $2 FROM M_INOUT_CREATE($1, $3, $4, 'N');
END
; $_$;


ALTER FUNCTION public.m_inout_create(p_pinstance_id character varying, OUT p_inout_id character varying, p_order_id character varying, p_invoice_id character varying) OWNER TO tad;

--
-- Name: m_inout_create(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_inout_create(p_pinstance_id character varying, OUT p_inout_id character varying, p_order_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO  $2 FROM M_INOUT_CREATE($1, $3, NULL);
END
; $_$;


ALTER FUNCTION public.m_inout_create(p_pinstance_id character varying, OUT p_inout_id character varying, p_order_id character varying) OWNER TO tad;

--
-- Name: m_inout_create(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_inout_create(p_pinstance_id character varying, OUT p_inout_id character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 SELECT * INTO  $2 FROM M_INOUT_CREATE($1, NULL);
END
; $_$;


ALTER FUNCTION public.m_inout_create(p_pinstance_id character varying, OUT p_inout_id character varying) OWNER TO tad;

--
-- Name: m_inout_create0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_inout_create0(pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_InOut_Create0.sql,v 1.3 2002/10/21 04:49:46 jjanke Exp $
  ***
  * Title: Create Shipment from Order
  ************************************************************************/
  Dummy VARCHAR(32); --OBTG:varchar2--
BEGIN
  -- No forced Delivery
  SELECT * INTO  Dummy FROM M_InOut_Create(PInstance_ID, NULL, NULL, 'N') ;
END ; $_$;


ALTER FUNCTION public.m_inout_create0(pinstance_id character varying) OWNER TO tad;


--
-- Name: m_inout_post0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_inout_post0(pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_InOut_Post0.sql,v 1.1 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: Post M_InOut_ID
  * Description:
  ************************************************************************/
BEGIN
  PERFORM M_INOUT_POST(PInstance_ID, NULL) ;
END ; $_$;


ALTER FUNCTION public.m_inout_post0(pinstance_id character varying) OWNER TO tad;

--
-- Name: m_inout_trg_prov(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: m_inout_updatequantityes(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_inout_updatequantityes(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Result NUMERIC:=0; -- failure
  v_AD_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_M_InOut_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Total NUMERIC;
    FINISH_PROCESS BOOLEAN:=false;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_USER_ID,
        i.AD_ORG_ID,
        i.AD_CLIENT_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      v_AD_Org_ID:=Cur_Parameter.AD_Org_ID;
      v_AD_Client_ID:=Cur_Parameter.AD_Client_ID;
      IF(Cur_Parameter.ParameterName='M_InOut_ID') THEN
        v_M_InOut_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  M_InOut_ID=' || v_M_InOut_ID ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    v_ResultStr:='CheckRestriction';
    SELECT COUNT(*)
    INTO v_Total
    FROM
      (SELECT M_PRODUCT_ID,
        C_UOM_ID,
        ROUND(MOVEMENTQTY, 2),
        COALESCE(M_PRODUCT_UOM_ID, '0') AS M_PRODUCT_UOM_ID,
        COALESCE(QUANTITYORDER, 0) AS QUANTITYORDER,
        COUNT(*)
      FROM M_INOUTLINE
      WHERE M_INOUT_ID=v_M_InOut_ID
        AND ISACTIVE='Y'
      GROUP BY M_PRODUCT_ID,
        C_UOM_ID,
        MOVEMENTQTY,
        COALESCE(M_PRODUCT_UOM_ID, '0'),
        COALESCE(QUANTITYORDER, 0) EXCEPT
      SELECT M_PRODUCT_ID,
        C_UOM_ID,
        ROUND(MOVEMENTQTY, 2),
        COALESCE(M_PRODUCT_UOM_ID, '0') AS M_PRODUCT_UOM_ID,
        COALESCE(QUANTITYORDER, 0) AS QUANTITYORDER,
        COUNT(*)
      FROM M_INOUTLINE
      WHERE M_INOUT_ID=v_Record_ID
        AND ISACTIVE='Y'
      GROUP BY M_PRODUCT_ID,
        C_UOM_ID,
        MOVEMENTQTY,
        COALESCE(M_PRODUCT_UOM_ID, '0'),
        COALESCE(QUANTITYORDER, 0)
      )
      A;
    IF(v_Total>0) THEN
      v_Message:='LinesNotMatch';
      v_Result:=0;
      FINISH_PROCESS:=true;
    END IF;
    IF(NOT FINISH_PROCESS) THEN
      v_ResultStr:='InsertingLines';
      DECLARE
        Cur_Lines RECORD;
        v_Lines VARCHAR(4000):=''; --OBTG:VARCHAR2--
        v_Lines_Aux NUMERIC(10) ;
        v_StrSQL VARCHAR(4000):=''; --OBTG:VARCHAR2--
      BEGIN
        FOR Cur_Lines IN
          (SELECT M_PRODUCT_ID,
            C_UOM_ID,
            ROUND(MOVEMENTQTY, 2) AS MOVEMENTQTY,
            COALESCE(M_PRODUCT_UOM_ID, '0') AS M_PRODUCT_UOM_ID,
            COALESCE(QUANTITYORDER, 0) AS QUANTITYORDER,
            M_ATTRIBUTESETINSTANCE_ID
          FROM M_INOUTLINE
          WHERE M_INOUT_ID=v_M_InOut_ID
            AND ISACTIVE='Y'
          )
        LOOP
          RAISE NOTICE '%','SQL: ' || Cur_Lines.M_Product_ID ;
          v_StrSQL:='SELECT MIN(M_INOUTLINE_ID) FROM M_INOUTLINE ';
          v_StrSQL:=v_StrSQL || 'WHERE M_INOUT_ID = ' || v_Record_ID || ' ';
          v_StrSQL:=v_StrSQL || 'AND ISACTIVE = ''Y'' ';
          v_StrSQL:=v_StrSQL || 'AND M_PRODUCT_ID = ' || Cur_Lines.M_PRODUCT_ID || ' ';
          v_StrSQL:=v_StrSQL || 'AND C_UOM_ID = ' || Cur_Lines.C_UOM_ID || ' ';
          v_StrSQL:=v_StrSQL || 'AND ROUND(MOVEMENTQTY, 2) = TO_NUMBER(''' || Cur_Lines.MOVEMENTQTY || ''') ';
          v_StrSQL:=v_StrSQL || 'AND COALESCE(M_PRODUCT_UOM_ID, ''0'') = ' || Cur_Lines.M_PRODUCT_UOM_ID || ' ';
          v_StrSQL:=v_StrSQL || 'AND COALESCE(QUANTITYORDER, 0) = ' || Cur_Lines.QUANTITYORDER || ' ';
          IF v_Lines IS NOT NULL THEN
            v_StrSQL:=v_StrSQL || 'AND M_INOUTLINE_ID NOT IN (' || v_Lines || ') ';
          END IF;
          EXECUTE v_StrSQL INTO v_Lines_Aux;
          IF v_Lines IS NULL THEN
            v_Lines:=v_Lines_Aux;
          ELSE
            v_Lines:=v_Lines || ', ' || v_Lines_Aux;
          END IF;
          RAISE NOTICE '%','LINES EXECUTED: ' || v_Lines || ' - ACTUAL LINE: ' || v_Lines_Aux ;
          UPDATE M_INOUTLINE
            SET M_ATTRIBUTESETINSTANCE_ID=Cur_Lines.M_ATTRIBUTESETINSTANCE_ID
          WHERE M_INOUTLINE.M_INOUTLINE_ID=v_Lines_Aux;
        END LOOP;
      END;
    END IF;------ <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $$;


ALTER FUNCTION public.m_inout_updatequantityes(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: m_inoutline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: m_internal_consumption_post(character varying); Type: FUNCTION; Schema: public; Owner: tad
--




--
-- Name: m_inventory_listupdate(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_inventory_listupdate(pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_Inventory_ListUpdate.sql,v 1.3 2003/03/14 06:11:21 jjanke Exp $
  ***
  * Title: Update Physical Inventory Count
  * Description:
  * - from M_Storage.QtyOnHand
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Result NUMERIC:=0; -- failure
  v_InProcess CHAR(1) ;
  v_Done CHAR(1) ;
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    END_PROCESS BOOLEAN:=false;
    rowcount NUMERIC;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing' ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    v_ResultStr:='ReadingInventory';
  BEGIN
    SELECT Processing,
      Processed
    INTO v_InProcess,
      v_Done
    FROM M_Inventory
    WHERE M_Inventory_ID=v_Record_ID  FOR UPDATE;
  EXCEPTION
  WHEN OTHERS THEN
    v_Message:='@SaveErrorRowNotFound@';
    END_PROCESS:=true;
  END;
  IF(NOT END_PROCESS) THEN
    IF(v_InProcess='Y') THEN
      v_Message:='@OtherProcessActive@';
      END_PROCESS:=true;
    END IF;
  END IF;--END_PROCESS
  IF(NOT END_PROCESS) THEN
    IF(v_Done='Y') THEN
      v_Message:='@AlreadyPosted@';
      END_PROCESS:=true;
    END IF;
  END IF;--END_PROCESS
  /**
  * Update
  */
  IF(NOT END_PROCESS) THEN
    v_ResultStr:='UpdatingLine';
    UPDATE M_InventoryLine
      SET QtyBook=
      (SELECT QtyOnHand
      FROM M_Storage_Detail s
      WHERE s.M_Product_ID=M_InventoryLine.M_Product_ID
        AND s.M_Locator_ID=M_InventoryLine.M_Locator_ID
        AND COALESCE(s.M_ATTRIBUTESETINSTANCE_ID, '-1')=COALESCE(M_InventoryLine.M_ATTRIBUTESETINSTANCE_ID, '-1')
        AND s.C_UOM_ID=M_InventoryLine.C_UOM_ID
        AND COALESCE(s.M_Product_UOM_ID, '-1')=COALESCE(M_InventoryLine.M_Product_UOM_ID, '-1')
      )
      ,
      QtyCount=
      (SELECT QtyOnHand
      FROM M_Storage_Detail s
      WHERE s.M_Product_ID=M_InventoryLine.M_Product_ID
        AND s.M_Locator_ID=M_InventoryLine.M_Locator_ID
        AND COALESCE(s.M_ATTRIBUTESETINSTANCE_ID, '-1')=COALESCE(M_InventoryLine.M_ATTRIBUTESETINSTANCE_ID, '-1')
        AND s.C_UOM_ID=M_InventoryLine.C_UOM_ID
        AND COALESCE(s.M_Product_UOM_ID, '-1')=COALESCE(M_InventoryLine.M_Product_UOM_ID, '-1')
      )
      ,
      QuantityOrder=
      (SELECT QtyOrderOnHand
      FROM M_Storage_Detail s
      WHERE s.M_Product_ID=M_InventoryLine.M_Product_ID
        AND s.M_Locator_ID=M_InventoryLine.M_Locator_ID
        AND COALESCE(s.M_ATTRIBUTESETINSTANCE_ID, '-1')=COALESCE(M_InventoryLine.M_ATTRIBUTESETINSTANCE_ID, '-1')
        AND s.C_UOM_ID=M_InventoryLine.C_UOM_ID
        AND COALESCE(s.M_Product_UOM_ID, '-1')=COALESCE(M_InventoryLine.M_Product_UOM_ID, '-1')
      )
      ,
      QuantityOrderBook=
      (SELECT QtyOrderOnHand
      FROM M_Storage_Detail s
      WHERE s.M_Product_ID=M_InventoryLine.M_Product_ID
        AND s.M_Locator_ID=M_InventoryLine.M_Locator_ID
        AND COALESCE(s.M_ATTRIBUTESETINSTANCE_ID, '-1')=COALESCE(M_InventoryLine.M_ATTRIBUTESETINSTANCE_ID, '-1')
        AND s.C_UOM_ID=M_InventoryLine.C_UOM_ID
        AND COALESCE(s.M_Product_UOM_ID, '-1')=COALESCE(M_InventoryLine.M_Product_UOM_ID, '-1')
      )
      ,
      Updated=TO_DATE(NOW()),
      UpdatedBy='0'
    WHERE M_Inventory_ID=v_Record_ID
      AND EXISTS
      (SELECT *
      FROM M_Storage_Detail s
      WHERE s.M_Product_ID=M_InventoryLine.M_Product_ID
        AND s.M_Locator_ID=M_InventoryLine.M_Locator_ID
        AND COALESCE(s.M_ATTRIBUTESETINSTANCE_ID, '-1')=COALESCE(M_InventoryLine.M_ATTRIBUTESETINSTANCE_ID, '-1')
        AND s.C_UOM_ID=M_InventoryLine.C_UOM_ID
        AND COALESCE(s.M_Product_UOM_ID, '-1')=COALESCE(M_InventoryLine.M_Product_UOM_ID, '-1')
      )
      ;
   GET DIAGNOSTICS  rowcount:=ROW_COUNT;
    v_Message:='@Updated@=' || rowcount;
    -- Commented by cromero 19102006 -- COMMIT;
    -- Check for products in multiple lines
    UPDATE M_InventoryLine
      SET IsActive='N'
    WHERE M_Inventory_ID=v_Record_ID
      AND(M_Product_ID,
      M_Locator_ID,
      M_AttributeSetInstance_ID,
      M_Product_UOM_ID,
      c_UOM_ID) IN
      (SELECT M_Product_ID,
        M_Locator_ID,
        M_AttributeSetInstance_ID,
        M_Product_UOM_ID,
        c_UOM_ID
      FROM M_InventoryLine
      WHERE M_Inventory_ID=v_Record_ID
      GROUP BY M_Product_ID,
        M_Locator_ID,
        M_AttributeSetInstance_ID,
        M_Product_UOM_ID,
        c_UOM_ID
      HAVING COUNT(*)>1
      )
      ;
   GET DIAGNOSTICS  rowcount:=ROW_COUNT;
    IF(rowcount<>0) THEN
      v_Message:=v_Message || ' @InventoryProductMultiple@';
    END IF;
    -- Commented by cromero 19102006 -- COMMIT;
    v_Result:=1; -- success
  END IF;--END_PROCESS
  ---- <<END_PROCESS>>
  --  Update AD_PInstance
  RAISE NOTICE '%','Updating PInstance - Finished' ;
  RAISE NOTICE '%',v_Message ;
  PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', v_Result, v_Message) ;
  RETURN;
END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $_$;


ALTER FUNCTION public.m_inventory_listupdate(pinstance_id character varying) OWNER TO tad;

--
-- Name: m_inventory_post(character varying); Type: FUNCTION; Schema: public; Owner: tad
--


ALTER FUNCTION public.m_inventory_post(pinstance_id character varying) OWNER TO tad;

--
-- Name: m_inventory_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_inventory_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





/*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2008 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
v_DateNull TIMESTAMP := TO_DATE('01-01-1900','DD-MM-YYYY');
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF TG_OP = 'DELETE' THEN
    IF (old.PROCESSED = 'Y') THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
  END IF;
  IF TG_OP = 'UPDATE' THEN
    IF (old.PROCESSED = 'Y' AND(
       (COALESCE(old.MOVEMENTDATE, v_DateNull) <> COALESCE(new.MOVEMENTDATE, v_DateNull))
       OR (COALESCE(old.AD_ORGTRX_ID, '0') <> COALESCE(new.AD_ORGTRX_ID, '0'))
       OR (COALESCE(old.M_WAREHOUSE_ID, '0') <> COALESCE(new.M_WAREHOUSE_ID, '0'))
       OR(COALESCE(old.AD_ORG_ID, '0') <> COALESCE(new.AD_ORG_ID, '0'))
       OR(COALESCE(old.AD_CLIENT_ID, '0') <> COALESCE(new.AD_CLIENT_ID, '0')))) THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.m_inventory_trg() OWNER TO tad;

--
-- Name: m_inventoryline2_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.m_inventoryline2_trg() OWNER TO tad;

--
-- Name: m_inventoryline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.m_inventoryline_trg() OWNER TO tad;

--
-- Name: m_ioline_chk_restrictions_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: m_matchpo_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.m_matchpo_trg() OWNER TO tad;

--
-- Name: m_move_locator(character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.m_move_locator(pinstance_id character varying) OWNER TO tad;



ALTER FUNCTION public.m_movement_post(pinstance_id character varying) OWNER TO tad;

--
-- Name: m_movement_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_movement_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





/*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2007 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
v_DateNull TIMESTAMP := TO_DATE('01-01-1900', 'DD-MM-YYYY');
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;

    IF TG_OP = 'DELETE' THEN
      IF (old.PROCESSED = 'Y') THEN
        RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
      END IF;
    END IF;
    
 IF TG_OP = 'UPDATE' THEN
  IF (old.PROCESSED = 'Y' AND(
     (COALESCE(old.MOVEMENTDATE, v_DateNull) <> COALESCE(new.MOVEMENTDATE, v_DateNull))
     OR (COALESCE(old.AD_ORGTRX_ID, '0') <> COALESCE(new.AD_ORGTRX_ID, '0'))
     OR (COALESCE(old.DOCUMENTNO, '.') <> COALESCE(new.DOCUMENTNO, '.'))
     OR(COALESCE(old.AD_ORG_ID, '0') <> COALESCE(new.AD_ORG_ID, '0'))
     OR(COALESCE(old.AD_CLIENT_ID, '0') <> COALESCE(new.AD_CLIENT_ID, '0')))) THEN
    RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
  END IF;
 END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.m_movement_trg() OWNER TO tad;

--
-- Name: m_movementline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.m_movementline_trg() OWNER TO tad;

--
-- Name: m_pricelist_create(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_pricelist_create(pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_PriceList_Create.sql,v 1.7 2003/06/16 14:40:03 jjanke Exp $
  ***
  * Title: Create Pricelist
  * Description:
  *  Create PriceList by copying purchase prices (M_Product_PO)
  *  and applying product category discounts (M_CategoryDiscount)
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_PriceList_Version_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_DeleteOld CHAR(1):='N';
    --
    v_Currency_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_UpdatedBy VARCHAR(32); --OBTG:VARCHAR2--
    v_StdPrecision NUMERIC;
    v_DiscountSchema_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_PriceList_Version_Base_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_temp VARCHAR(32); --OBTG:VARCHAR2--
    --
    -- Get PL Parameter
    Cur_DiscountLine RECORD;
    rowcount NUMERIC;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing' ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_PriceList_Version_ID:=Cur_Parameter.Record_ID;
	  
	  SELECT M_PriceList_Version_Base_ID
      INTO v_PriceList_Version_Base_ID
      FROM M_PriceList p,
        M_PriceList_Version v,
        C_Currency c
      WHERE p.M_PriceList_ID=v.M_PriceList_ID
        AND p.C_Currency_ID=c.C_Currency_ID
        AND v.M_PriceList_Version_ID=v_PriceList_Version_ID;
      IF (v_PriceList_Version_Base_ID IS NULL OR v_PriceList_Version_Base_ID='') THEN
	    RAISE EXCEPTION '%', 'Base Pricelist Version required to complete Create PriceList process.'; --OBTG:-20102--
      END IF;
	
      IF(Cur_Parameter.ParameterName='DeleteOld') THEN
        v_DeleteOld:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  DeleteOld=' || v_DeleteOld ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    --Create temporary tables 
    v_temp:=C_CREATE_TEMPORARY_TABLES();
    RAISE NOTICE '%','  PriceList_Version_ID=' || v_PriceList_Version_ID ;
    -- Checking Prerequisites
    -- -- PO Prices must exists
    v_ResultStr:='CorrectingProductPO';
    RAISE NOTICE '%',v_ResultStr ;
    UPDATE M_Product_PO  SET PriceList=0  WHERE PriceList IS NULL;
    UPDATE M_Product_PO  SET PriceLastPO=0  WHERE PriceLastPO IS NULL;
    UPDATE M_Product_PO
      SET PricePO=PriceLastPO
    WHERE(PricePO IS NULL
      OR PricePO=0)
      AND PriceLastPO<>0;
    UPDATE M_Product_PO  SET PricePO=0  WHERE PricePO IS NULL;
    -- Set default current vendor
    UPDATE M_Product_PO
      SET IsCurrentVendor='Y'
    WHERE IsCurrentVendor='N'
      AND NOT EXISTS
      (SELECT pp.M_Product_ID
      FROM M_Product_PO pp
      WHERE pp.M_Product_ID=M_Product_PO.M_Product_ID
      GROUP BY pp.M_Product_ID
      HAVING COUNT(*)>1
      )
      ;
    -- Commented by cromero 19102006 -- COMMIT;
    /**
    * Make sure that we have only one active product
    */
    v_ResultStr:='CorrectingDuplicates';
    RAISE NOTICE '%',v_ResultStr ;
    DECLARE
      -- All duplicate products
      Cur_Duplicates RECORD;
      -- All vendors of Product - expensive first
      DECLARE Cur_Vendors CURSOR (Product_ID VARCHAR)  FOR
        SELECT M_Product_ID,
          C_BPartner_ID
        FROM M_Product_PO
        WHERE IsCurrentVendor='Y'
          AND IsActive='Y'
          AND M_Product_ID=Product_ID
        ORDER BY PriceList DESC;
        --
        Product_ID VARCHAR(32); --OBTG:VARCHAR2--
        BPartner_ID VARCHAR(32); --OBTG:VARCHAR2--
      BEGIN
        FOR Cur_Duplicates IN
          (SELECT DISTINCT M_Product_ID
          FROM M_Product_PO po
          WHERE IsCurrentVendor='Y'
            AND IsActive='Y'
            AND EXISTS
            (SELECT M_Product_ID
            FROM M_Product_PO x
            WHERE x.M_Product_ID=po.M_Product_ID
            GROUP BY M_Product_ID
            HAVING COUNT(*)>1
            )
          ORDER BY 1
          )
        LOOP
          OPEN Cur_Vendors(Cur_Duplicates.M_Product_ID) ;
          FETCH Cur_Vendors INTO Product_ID,
          BPartner_ID; -- Leave First
          LOOP
            FETCH Cur_Vendors INTO Product_ID,
            BPartner_ID; -- Get Record ID
            EXIT WHEN  NOT FOUND ; --OBTG:Cur_Vendors--
            --
            RAISE NOTICE '%','  Record: ' || Product_ID || ' / ' || BPartner_ID ;
            UPDATE M_Product_PO
              SET IsCurrentVendor='N'
            WHERE M_Product_ID=Product_ID
              AND C_BPartner_ID=BPartner_ID;
          END LOOP;
          CLOSE Cur_Vendors;
        END LOOP;
        -- Commented by cromero 19102006 -- COMMIT;
      END;
      /** Delete Old Data */
      v_ResultStr:='DeletingOld';
      IF(v_DeleteOld='Y') THEN
        DELETE
        FROM M_ProductPrice
        WHERE M_PriceList_Version_ID=v_PriceList_Version_ID;
       GET DIAGNOSTICS  rowcount:=ROW_COUNT;
        v_Message:='@Deleted@=' || rowcount || ' - ';
        RAISE NOTICE '%',v_Message ;
      END IF;
      -- Get PriceList Info
      v_ResultStr:='GetPLInfo';
      RAISE NOTICE '%',v_ResultStr ;
      SELECT p.C_Currency_ID,
        c.priceprecision,
        v.AD_Client_ID,
        v.AD_Org_ID,
        v.UpdatedBy,
        v.M_DiscountSchema_ID,
        M_PriceList_Version_Base_ID
      INTO v_Currency_ID,
        v_StdPrecision,
        v_Client_ID,
        v_Org_ID,
        v_UpdatedBy,
        v_DiscountSchema_ID,
        v_PriceList_Version_Base_ID
      FROM M_PriceList p,
        M_PriceList_Version v,
        C_Currency c
      WHERE p.M_PriceList_ID=v.M_PriceList_ID
        AND p.C_Currency_ID=c.C_Currency_ID
        AND v.M_PriceList_Version_ID=v_PriceList_Version_ID;
      /**
      * For All Discount Lines in Sequence
      */
      FOR Cur_DiscountLine IN
        (SELECT *
        FROM M_DiscountSchemaLine
        WHERE M_DiscountSchema_ID=v_DiscountSchema_ID
          AND IsActive='Y'
        ORDER BY SeqNo
        )
      LOOP
        v_ResultStr:='Parameter Seq=' || Cur_DiscountLine.SeqNo;
        -- DBMS_OUTPUT.PUT_LINE(v_ResultStr);
        -- Clear Temporary Table
        DELETE FROM C_TEMP_Selection;
        -- -----------------------------------
        -- Create Selection in temporary table
        -- -----------------------------------
        IF(v_PriceList_Version_Base_ID IS NULL) THEN
          -- Create Selection from M_Product_PO
          INSERT
          INTO C_TEMP_Selection
            (
              C_TEMP_Selection_ID
            )
          SELECT DISTINCT po.M_Product_ID
          FROM M_Product p,
            M_Product_PO po
          WHERE p.M_Product_ID=po.M_Product_ID
            AND(p.AD_Client_ID=v_Client_ID
            OR p.AD_Client_ID='0')
            AND p.IsActive='Y'
            AND po.IsActive='Y'
            AND po.IsCurrentVendor='Y'  -- Optional Restrictions
            AND(Cur_DiscountLine.M_Product_Category_ID IS NULL
            OR p.M_Product_Category_ID=Cur_DiscountLine.M_Product_Category_ID)
            AND(Cur_DiscountLine.C_BPartner_ID IS NULL
            OR po.C_BPartner_ID=Cur_DiscountLine.C_BPartner_ID)
            AND(Cur_DiscountLine.M_Product_ID IS NULL
            OR p.M_Product_ID=Cur_DiscountLine.M_Product_ID) ;
        ELSE
          -- Create Selection from existing PriceList
          INSERT
          INTO C_TEMP_Selection
            (
              C_TEMP_Selection_ID
            )
          SELECT DISTINCT p.M_Product_ID
          FROM M_Product p,
            M_ProductPrice pp
          WHERE p.M_Product_ID=pp.M_Product_ID
            AND pp.M_PriceList_Version_ID=v_PriceList_Version_Base_ID
            AND p.IsActive='Y'
            AND pp.IsActive='Y'  -- Optional Restrictions
            AND(Cur_DiscountLine.M_Product_Category_ID IS NULL
            OR p.M_Product_Category_ID=Cur_DiscountLine.M_Product_Category_ID)
            AND(Cur_DiscountLine.C_BPartner_ID IS NULL
            OR EXISTS
            (SELECT *
            FROM M_Product_PO po
            WHERE po.M_Product_ID=p.M_Product_ID
              AND po.C_BPartner_ID=Cur_DiscountLine.C_BPartner_ID
            ))
            AND(Cur_DiscountLine.M_Product_ID IS NULL
            OR p.M_Product_ID=Cur_DiscountLine.M_Product_ID) ;
        END IF;
       GET DIAGNOSTICS  rowcount:=ROW_COUNT;
        v_Message:=v_Message || '@Selected@=' || rowcount;
        -- DBMS_OUTPUT.PUT_LINE(v_Message);
        -- Delete Prices in Selection, so that we can insert
        IF(v_PriceList_Version_Base_ID IS NULL  OR v_PriceList_Version_Base_ID<>v_PriceList_Version_ID) THEN
          v_ResultStr:=v_ResultStr || ', Delete';
          DELETE
          FROM M_ProductPrice
          WHERE M_ProductPrice.M_PriceList_Version_ID=v_PriceList_Version_ID
            AND EXISTS
            (SELECT *
            FROM C_TEMP_Selection s
            WHERE M_ProductPrice.M_Product_ID=s.C_TEMP_Selection_ID
            )
            ;
         GET DIAGNOSTICS  rowcount:=ROW_COUNT;
          v_Message:=', @Deleted@=' || rowcount;
        END IF;
        -- --------------------
        -- Copy (Insert) Prices
        -- --------------------
        IF(v_PriceList_Version_Base_ID=v_PriceList_Version_ID) THEN
          -- We have Prices already
          NULL;
        ELSIF(v_PriceList_Version_Base_ID IS NULL) THEN
          -- Copy and Convert from Product_PO
          v_ResultStr:=v_ResultStr || ',Copy_PO';
          INSERT
          INTO M_ProductPrice
            (
              M_ProductPrice_ID, M_PriceList_Version_ID, M_Product_ID, AD_Client_ID, AD_Org_ID,
              IsActive, Created, CreatedBy, Updated,
              UpdatedBy,
              PriceList,
              PriceStd,
              PriceLimit
            )
          SELECT  get_uuid(), v_PriceList_Version_ID,
            po.M_Product_ID, v_Client_ID, v_Org_ID, 'Y',
            TO_DATE(NOW()), v_UpdatedBy, TO_DATE(NOW()), v_UpdatedBy,
            -- Price List
            COALESCE(C_Currency_Convert(po.PriceList, po.C_Currency_ID, v_Currency_ID, Cur_DiscountLine.ConversionDate, Cur_DiscountLine.ConversionRateType, v_Client_ID, v_Org_ID), 0),
            -- Price Std
            COALESCE(C_Currency_Convert(po.PriceList, po.C_Currency_ID, v_Currency_ID, Cur_DiscountLine.ConversionDate, Cur_DiscountLine.ConversionRateType, v_Client_ID, v_Org_ID), 0),
            -- Price Limit
            COALESCE(C_Currency_Convert(po.PricePO, po.C_Currency_ID, v_Currency_ID, Cur_DiscountLine.ConversionDate, Cur_DiscountLine.ConversionRateType, v_Client_ID, v_Org_ID), 0)
          FROM M_Product_PO po
          WHERE EXISTS
            (SELECT * FROM C_TEMP_Selection s WHERE po.M_Product_ID=s.C_TEMP_Selection_ID)
            AND po.IsCurrentVendor='Y'
            AND po.IsActive='Y';
        ELSE
          -- Copy and Convert from other PriceList_Version
          v_ResultStr:=v_ResultStr || ',Copy_PL';
          INSERT
          INTO M_ProductPrice
            (
              M_ProductPrice_ID, M_PriceList_Version_ID, M_Product_ID, AD_Client_ID, AD_Org_ID,
              IsActive, Created, CreatedBy, Updated,
              UpdatedBy,
              PriceList,
              PriceStd,
              PriceLimit
            )
          SELECT  get_uuid(), v_PriceList_Version_ID,
            pp.M_Product_ID, v_Client_ID, v_Org_ID, 'Y',
            TO_DATE(NOW()), v_UpdatedBy, TO_DATE(NOW()), v_UpdatedBy,
            -- Price List
            COALESCE(C_Currency_Convert(pp.PriceList, pl.C_Currency_ID, v_Currency_ID, Cur_DiscountLine.ConversionDate, Cur_DiscountLine.ConversionRateType, v_Client_ID, v_Org_ID), 0),
            -- Price Std
            COALESCE(C_Currency_Convert(pp.PriceStd, pl.C_Currency_ID, v_Currency_ID, Cur_DiscountLine.ConversionDate, Cur_DiscountLine.ConversionRateType, v_Client_ID, v_Org_ID), 0),
            -- Price Limit
            COALESCE(C_Currency_Convert(pp.PriceLimit, pl.C_Currency_ID, v_Currency_ID, Cur_DiscountLine.ConversionDate, Cur_DiscountLine.ConversionRateType, v_Client_ID, v_Org_ID), 0)
          FROM M_ProductPrice pp
          INNER JOIN M_PriceList_Version plv
            ON(pp.M_PriceList_Version_ID=plv.M_PriceList_Version_ID)
          INNER JOIN M_PriceList pl
            ON(plv.M_PriceList_ID=pl.M_PriceList_ID)
          WHERE pp.M_PriceList_Version_ID=v_PriceList_Version_Base_ID
            AND EXISTS
            (SELECT * FROM C_TEMP_Selection s WHERE pp.M_Product_ID=s.C_TEMP_Selection_ID)
            AND pp.IsActive='Y';
        END IF;
       GET DIAGNOSTICS  rowcount:=ROW_COUNT;
        v_Message:=v_Message || ', @Inserted@=' || rowcount;
        -- -----------
        -- Calculation
        -- -----------
        v_ResultStr:=v_ResultStr || ',Calc';
        UPDATE M_ProductPrice
          SET PriceList=((
          CASE Cur_DiscountLine.List_Base WHEN 'S' THEN PriceStd WHEN 'X' THEN PriceLimit ELSE PriceList
          END
          ) + Cur_DiscountLine.List_AddAmt) *(1 - Cur_DiscountLine.List_Discount/100),
          PriceStd=((
          CASE Cur_DiscountLine.Std_Base WHEN 'L' THEN PriceList WHEN 'X' THEN PriceLimit ELSE PriceStd
          END
          ) + Cur_DiscountLine.Std_AddAmt) *(1 - Cur_DiscountLine.Std_Discount/100),
          PriceLimit=((
          CASE Cur_DiscountLine.Limit_Base WHEN 'L' THEN PriceList WHEN 'S' THEN PriceStd ELSE PriceLimit
          END
          ) + Cur_DiscountLine.Limit_AddAmt) *(1 - Cur_DiscountLine.Limit_Discount/100)
        WHERE M_PriceList_Version_ID=v_PriceList_Version_ID
          AND EXISTS
          (SELECT *
          FROM C_TEMP_Selection s
          WHERE s.C_TEMP_Selection_ID=M_ProductPrice.M_Product_ID
          )
          ;
        -- --------
        --  Rounding (AD_Reference_ID='155')
        -- --------
        v_ResultStr:=v_ResultStr || ',Round';
        UPDATE M_ProductPrice
          SET PriceList=(
          CASE Cur_DiscountLine.List_Rounding  WHEN 'N' THEN PriceList  WHEN '0' THEN ROUND(PriceList, 0) -- Even .00
                                               WHEN 'D' THEN ROUND(PriceList, 1) -- Dime .10
                                               WHEN 'D' THEN ROUND(PriceList, 1) -- Dime .10
                                               WHEN '2' THEN ROUND(PriceList, 2) -- 2 Deci
                                               WHEN '3' THEN ROUND(PriceList, 3) -- 3 Deci
                                               WHEN '4' THEN ROUND(PriceList, 4) -- 4 Deci
                                               WHEN 'T' THEN ROUND(PriceList, -1) -- Ten 10.00
                                               WHEN '5' THEN ROUND(PriceList*20, 0) /20 -- Nickle .05
                                               WHEN 'Q' THEN ROUND(PriceList*4, 0) /4 -- Quarter .25
                                               ELSE ROUND(PriceList, v_StdPrecision)
          END
          ), -- Currency
          PriceStd=(
          CASE Cur_DiscountLine.Std_Rounding  WHEN 'N' THEN PriceStd  WHEN '0' THEN ROUND(PriceStd, 0) -- Even .00
                                              WHEN 'D' THEN ROUND(PriceStd, 1) -- Dime .10
                                              WHEN '2' THEN ROUND(PriceStd, 2) -- 2 Deci
                                              WHEN '3' THEN ROUND(PriceStd, 3) -- 3 Deci
                                              WHEN '4' THEN ROUND(PriceStd, 4) -- 4 Deci
                                              WHEN 'T' THEN ROUND(PriceStd, -1) -- Ten 10.00
                                              WHEN '5' THEN ROUND(PriceStd*20, 0) /20 -- Nickle .05
                                              WHEN 'Q' THEN ROUND(PriceStd*4, 0) /4 -- Quarter .25
                                              ELSE ROUND(PriceStd, v_StdPrecision)
          END
          ), -- Currency
          PriceLimit=(
          CASE Cur_DiscountLine.Limit_Rounding  WHEN 'N' THEN PriceLimit  WHEN '0' THEN ROUND(PriceLimit, 0) -- Even .00
                                                WHEN 'D' THEN ROUND(PriceLimit, 1) -- Dime .10
                                                WHEN '2' THEN ROUND(PriceLimit, 2) -- 2 Deci
                                                WHEN '3' THEN ROUND(PriceLimit, 3) -- 3 Deci
                                                WHEN '4' THEN ROUND(PriceLimit, 4) -- 4 Deci
                                                WHEN 'T' THEN ROUND(PriceLimit, -1) -- Ten 10.00
                                                WHEN '5' THEN ROUND(PriceLimit*20, 0) /20 -- Nickle .05
                                                WHEN 'Q' THEN ROUND(PriceLimit*4, 0) /4 -- Quarter .25
                                                ELSE ROUND(PriceLimit, v_StdPrecision)
          END
          ) -- Currency
        WHERE M_PriceList_Version_ID=v_PriceList_Version_ID
          AND EXISTS
          (SELECT *
          FROM C_TEMP_Selection s
          WHERE s.C_TEMP_Selection_ID=M_ProductPrice.M_Product_ID
          )
          ;
       GET DIAGNOSTICS  rowcount:=ROW_COUNT;
        v_Message:=v_Message || ', @Updated@=' || rowcount;
        -- Fixed Price overwrite
        v_ResultStr:=v_ResultStr || ',Fix';
        UPDATE M_ProductPrice
          SET PriceList=(
          CASE Cur_DiscountLine.List_Base WHEN 'F' THEN Cur_DiscountLine.List_Fixed ELSE PriceList
          END
          ),
          PriceStd=(
          CASE Cur_DiscountLine.Std_Base WHEN 'F' THEN Cur_DiscountLine.Std_Fixed ELSE PriceStd
          END
          ),
          PriceLimit=(
          CASE Cur_DiscountLine.Limit_Base WHEN 'F' THEN Cur_DiscountLine.Limit_Fixed ELSE PriceLimit
          END
          ),
	      updated=TO_DATE(NOW())
        WHERE M_PriceList_Version_ID=v_PriceList_Version_ID
          AND EXISTS
          (SELECT *
          FROM C_TEMP_Selection s
          WHERE s.C_TEMP_Selection_ID=M_ProductPrice.M_Product_ID
          )
          ;
        --
        v_Message:='';
      END LOOP; -- For all DiscountLines
      -- Delete Temporary Selection
      DELETE FROM C_TEMP_Selection;
      ---- <<FINISH_PROCESS>>
      --  Update AD_PInstance
      RAISE NOTICE '%',v_Message ;
      RAISE NOTICE '%','Updating PInstance - Finished' ;
      PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
      RETURN;
    END; --BODY
EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    RAISE NOTICE '%',v_ResultStr ;
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END ; $_$;


ALTER FUNCTION public.m_pricelist_create(pinstance_id character varying) OWNER TO tad;

--
-- Name: m_pricelistversiongenerate(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_pricelistversiongenerate(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Result NUMERIC:=1;
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_M_PriceList_Version_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_NameFrom VARCHAR(60) ; --OBTG:NVARCHAR2--
  v_NameTo VARCHAR(60) ; --OBTG:NVARCHAR2--
  v_Count NUMERIC:=1;
  v_ValidFrom TIMESTAMP;
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
  BEGIN
    v_ResultStr:='Checking stock';
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        i.AD_Client_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.AD_User_ID;
      v_Client_ID:=Cur_Parameter.AD_Client_ID;
      IF(Cur_Parameter.ParameterName='M_PriceList_Version_Origen_ID') THEN
        v_M_PriceList_Version_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  M_PriceList_Version_Origen_ID=' || v_M_PriceList_Version_ID ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    SELECT NAME,
      ValidFrom
    INTO v_NameTo,
      v_ValidFrom
    FROM M_PRICELIST_VERSION
    WHERE M_PriceList_Version_ID=v_Record_ID;
    SELECT NAME
    INTO v_NameFrom
    FROM M_PRICELIST_VERSION
    WHERE M_PriceList_Version_ID=v_M_PriceList_Version_ID;
    WHILE(v_Count<=LENGTH(v_NameFrom) AND v_Count<=LENGTH(v_Nameto)) AND(SUBSTR(v_NameFrom, v_Count, 1)=SUBSTR(v_NameTo, v_Count, 1))
    LOOP
      v_Count:=v_Count + 1;
    END LOOP;
    INSERT
    INTO M_PRICELIST_VERSION
      (
        M_PRICELIST_VERSION_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE,
        CREATED, CREATEDBY, UPDATED, UPDATEDBY,
        NAME, DESCRIPTION, M_PRICELIST_ID, M_DISCOUNTSCHEMA_ID,
        VALIDFROM, PROCCREATE, M_PRICELIST_VERSION_BASE_ID
      )
    SELECT Ad_Get_Next_Sequence('M_PriceList_Version', v_Client_ID),
      AD_CLIENT_ID, AD_ORG_ID, ISACTIVE, TO_DATE(NOW()),
      v_User_ID, TO_DATE(NOW()), v_User_ID, REPLACE(NAME, SUBSTR(v_NameFrom, v_Count, 60), SUBSTR(v_NameTo, v_Count, 60)),
      REPLACE(DESCRIPTION, SUBSTR(v_NameFrom, v_Count, 60), SUBSTR(v_NameTo, v_Count, 60)), M_PRICELIST_ID, M_DISCOUNTSCHEMA_ID, v_ValidFrom,
       'N', v_Record_ID
    FROM M_PRICELIST_VERSION
    WHERE M_PRICELIST_VERSION_BASE_ID=v_M_PriceList_Version_ID
      AND M_PRICELIST_VERSION_ID<>v_Record_ID;
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $$;


ALTER FUNCTION public.m_pricelistversiongenerate(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: m_product_category_acct_copy(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_product_category_acct_copy(pinstance_id character varying, p_product_category_id character varying, p_c_acctschema_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_Product_Category_Acct_Copy.sql,v 1.3 2002/10/28 15:14:35 jjanke Exp $
  ***
  * Title: Copy Accounts
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --
    v_M_Product_Category_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_C_Acctschema_ID VARCHAR(32); --OBTG:VARCHAR2--
    -- Product Category is unique to Client
    Cur_Acct RECORD;
    --
    v_Updated NUMERIC:=0;
    v_Created NUMERIC:=0;
    v_Updated_Total NUMERIC:=0;
    v_Created_Total NUMERIC:=0;
    rowcount NUMERIC;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      IF(Cur_Parameter.ParameterName='M_Product_Category_ID') THEN
        v_M_Product_Category_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  M_Product_Category_ID=' || v_M_Product_Category_ID ;
      ELSIF(Cur_Parameter.ParameterName='C_AcctSchema_ID') THEN
        v_C_Acctschema_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  C_AcctSchema_ID=' || v_C_Acctschema_ID ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    -- Direct Call
    IF(p_Product_Category_ID IS NOT NULL) THEN
      v_M_Product_Category_ID:=p_Product_Category_ID;
      RAISE NOTICE '%','  M_Product_Category_ID=' || v_M_Product_Category_ID ;
    ELSIF(p_C_Acctschema_ID IS NOT NULL) THEN
      v_C_Acctschema_ID:=p_C_Acctschema_ID;
      RAISE NOTICE '%','  C_Acctschema_ID=' || v_C_Acctschema_ID ;
    END IF;
    /**
    * For all Accounting Schema of the Category
    */
    FOR Cur_Acct IN
      (SELECT *
      FROM M_Product_Category_Acct
      WHERE M_Product_Category_ID=v_M_Product_Category_ID
	  AND (M_Product_Category_Acct.C_ACCTSCHEMA_ID = v_C_Acctschema_ID OR v_C_Acctschema_ID IS NULL)
          AND EXISTS (SELECT 1 FROM AD_Org_AcctSchema oa
	     WHERE M_Product_Category_Acct.C_AcctSchema_ID = oa.C_AcctSchema_ID
	    AND (AD_IsOrgIncluded(oa.AD_Org_ID, M_Product_Category_Acct.AD_Org_ID, M_Product_Category_Acct.AD_Client_ID)<>-1
	    OR AD_IsOrgIncluded(M_Product_Category_Acct.AD_Org_ID, oa.AD_Org_ID, M_Product_Category_Acct.AD_Client_ID)<>-1))	
      )
    LOOP
      -- Update existing Products
      UPDATE M_Product_Acct
        SET P_Revenue_Acct=Cur_Acct.P_Revenue_Acct,
        P_Expense_Acct=Cur_Acct.P_Expense_Acct,
        P_Asset_Acct=Cur_Acct.P_Asset_Acct,
        P_CoGs_Acct=Cur_Acct.P_CoGs_Acct,
        P_PurchasePriceVariance_Acct=Cur_Acct.P_PurchasePriceVariance_Acct,
        P_InvoicePriceVariance_Acct=Cur_Acct.P_InvoicePriceVariance_Acct,
        P_TradeDiscountRec_Acct=Cur_Acct.P_TradeDiscountRec_Acct,
        P_TradeDiscountGrant_Acct=Cur_Acct.P_TradeDiscountGrant_Acct,
        Updated=TO_DATE(NOW()),
        UpdatedBy='0'
      WHERE M_Product_Acct.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        AND EXISTS
        (SELECT *
        FROM M_Product p
        WHERE p.M_Product_ID=M_Product_Acct.M_Product_ID
          AND p.M_Product_Category_ID=Cur_Acct.M_Product_Category_ID
        )
        ;
     GET DIAGNOSTICS  rowcount:=ROW_COUNT;
      v_Updated:=rowcount;
      -- Insert new Products
      INSERT
      INTO M_Product_Acct
        (
          M_Product_Acct_ID, M_Product_ID, C_AcctSchema_ID, AD_Client_ID, AD_Org_ID,
          IsActive, Created, CreatedBy, Updated,
          UpdatedBy, P_Revenue_Acct, P_Expense_Acct, P_Asset_Acct,
          P_CoGs_Acct, P_PurchasePriceVariance_Acct, P_InvoicePriceVariance_Acct, P_TradeDiscountRec_Acct,
          P_TradeDiscountGrant_Acct
        )
      SELECT get_uuid(), p.M_Product_ID,
        Cur_Acct.C_AcctSchema_ID, p.AD_Client_ID, p.AD_Org_ID, 'Y',
        TO_DATE(NOW()), '0', TO_DATE(NOW()), '0',
        Cur_Acct.P_Revenue_Acct, Cur_Acct.P_Expense_Acct, Cur_Acct.P_Asset_Acct, Cur_Acct.P_CoGs_Acct,
        Cur_Acct.P_PurchasePriceVariance_Acct, Cur_Acct.P_InvoicePriceVariance_Acct, Cur_Acct.P_TradeDiscountRec_Acct, Cur_Acct.P_TradeDiscountGrant_Acct
      FROM M_Product p
      WHERE p.M_Product_Category_ID=Cur_Acct.M_Product_Category_ID
        AND NOT EXISTS
        (SELECT *
        FROM M_Product_Acct pa
        WHERE pa.M_Product_ID=p.M_Product_ID
          AND pa.C_AcctSchema_ID=Cur_Acct.C_AcctSchema_ID
        )
        ;
     GET DIAGNOSTICS  rowcount:=ROW_COUNT;
      v_Created:=rowcount;
      RAISE NOTICE '%','Product = ' || v_Updated || ' / ' || v_Created ;
      v_Updated_Total:=v_Updated_Total + v_Updated;
      v_Created_Total:=v_Created_Total + v_Created;
    END LOOP;
    v_Message:='@Created@=' || v_Created_Total || ', @Updated@=' || v_Updated_Total;
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $_$;


ALTER FUNCTION public.m_product_category_acct_copy(pinstance_id character varying, p_product_category_id character varying, p_c_acctschema_id character varying) OWNER TO tad;

--
-- Name: m_product_category_acct_copy(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_product_category_acct_copy(pinstance_id character varying, p_product_category_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 PERFORM M_PRODUCT_CATEGORY_ACCT_COPY($1, $2, NULL);
END
; $_$;


ALTER FUNCTION public.m_product_category_acct_copy(pinstance_id character varying, p_product_category_id character varying) OWNER TO tad;

--
-- Name: m_product_category_acct_copy(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_product_category_acct_copy(pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
 PERFORM M_PRODUCT_CATEGORY_ACCT_COPY($1, NULL);
END
; $_$;


ALTER FUNCTION public.m_product_category_acct_copy(pinstance_id character varying) OWNER TO tad;

--
-- Name: m_product_delete(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_product_delete(whereclause character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * Delete Products
  */
  --TYPE RECORD IS REFCURSOR;
    CUR_DEL RECORD;
    --
    SQL_Base VARCHAR(255):='SELECT M_Product_ID FROM M_Product WHERE '; --OBTG:VARCHAR2--
    -- SQL_Where  VARCHAR2(255) := 'ValueX IN (SELECT ValueX FROM M_Product GROUP BY ValueX HAVING Count(*) <> 1) AND INSTR(Value,''@'') <> 0';
    SQL_Statement VARCHAR(255):=''; --OBTG:VARCHAR2--
  BEGIN
    -- Delete inactive
    IF(whereClause IS NULL OR LENGTH(whereClause)=0) THEN
      For CUR_DEL IN
        (SELECT M_Product_ID, Value, Name  FROM M_Product  WHERE IsActive='N')
      LOOP
      BEGIN
        RAISE NOTICE '%','Deleting ' || CUR_DEL.Name || ' - ' ;
        DELETE FROM M_Product  WHERE M_Product_ID=CUR_DEL.M_Product_ID;
        RAISE NOTICE '%','OK' ;
      EXCEPTION
      WHEN OTHERS THEN
        RAISE NOTICE '%','Error ' || SQLERRM ;
      END;
    END LOOP;
  END IF;
END ; $$;


ALTER FUNCTION public.m_product_delete(whereclause character varying) OWNER TO tad;

--
-- Name: m_product_delete(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_product_delete() RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
BEGIN
 PERFORM M_PRODUCT_DELETE(NULL);
END
; $$;


ALTER FUNCTION public.m_product_delete() OWNER TO tad;

--
-- Name: m_product_trg(); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: m_production_run(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_production_run(pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2009 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_Production_Run.sql,v 1.4 2003/09/05 04:58:06 jjanke Exp $
  ***
  * Title: Production of BOMs
  * Description:
  *  1) Creating ProductionLines when IsCreated = 'N'
  *  2) Posting the Lines (optionally only when fully stocked)
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Result NUMERIC:=1;
  v_is_included NUMERIC:=0;
  v_MovementDate TIMESTAMP;
  v_available_period NUMERIC:=0;
  v_is_ready AD_Org.IsReady%TYPE;
  v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
  v_isacctle AD_OrgType.IsAcctLegalEntity%TYPE;
  v_org_bule_id AD_Org.AD_Org_ID%TYPE;
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    MustBeStocked CHAR(1) ;
    v_IsCreated CHAR(1) ;
    v_Processed VARCHAR(60) ; --OBTG:VARCHAR2--
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
    --
    v_Line NUMERIC;
    NextNo VARCHAR(32); --OBTG:VARCHAR2--
    CountNo NUMERIC;
    v_Count NUMERIC;
    v_Qty NUMERIC;
    v_QtyAcumulated NUMERIC;
    v_QtyOrder NUMERIC;
    p_Warehouse VARCHAR(32); --OBTG:VARCHAR2--
    p_User VARCHAR(32); --OBTG:VARCHAR2--
    v_Product_Name VARCHAR(2000):=''; --OBTG:VARCHAR2--
    -- ProductionPlan
    CUR_PP RECORD;
    -- BOM Lines
    CUR_BOM RECORD;
    -- Stocked BOMs
    DECLARE CUR_STOCK CURSOR (Product_ID VARCHAR, UOM VARCHAR, Warehouse_ID VARCHAR, Org_ID VARCHAR)  FOR
      SELECT T.M_PRODUCT_ID,
        T.C_UOM_ID,
        T.M_LOCATOR_ID,
        T.M_ATTRIBUTESETINSTANCE_ID,
        T.M_PRODUCT_UOM_ID,
        COALESCE(T.QtyOnHand, 0) AS Qty,
        T.QtyOrderOnHand AS QtyOrder
      FROM M_STORAGE_DETAIL T,
        M_LOCATOR L, M_WAREHOUSE W
      WHERE T.M_PRODUCT_ID=Product_ID
        AND T.C_UOM_ID=UOM
        AND T.M_LOCATOR_ID=L.M_LOCATOR_ID
        AND COALESCE(T.QtyOnHand, 0)<>0
        AND L.M_WAREHOUSE_ID = W.M_WAREHOUSE_ID
        AND ad_isorgincluded(Org_ID, W.AD_ORG_ID, W.AD_CLIENT_ID) <> -1
      ORDER BY(
        CASE L.M_WAREHOUSE_ID WHEN Warehouse_ID THEN 1 ELSE 2
        END
        ),
        L.PRIORITYNO,
        T.M_ATTRIBUTESETINSTANCE_ID,
        T.M_PRODUCT_UOM_ID;
      v_storage RECORD; --OBTG:CUR_STOCK--
      -- ProductionLines which are non-stocked BOMs (need to be resolved)
      CUR_PLineBOM RECORD;
      CUR_BOM_PRODUCT RECORD;
      -- Posting
      CUR_PL_Post RECORD;
      FINISH_PROCESS BOOLEAN:=false;
      NEXT_PRODUCT BOOLEAN:=false;
      CUR_STOCK_ISOPEN BOOLEAN:=false;
    BEGIN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Processing ' || PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
    BEGIN --BODY
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        p_User:=Cur_Parameter.AD_User_ID;
        IF(Cur_Parameter.ParameterName='MustBeStocked') THEN
          MustBeStocked:=Cur_Parameter.P_String;
          RAISE NOTICE '%','  MustBeStocked=' || MustBeStocked ;
        ELSE
          RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
        END IF;
      END LOOP; -- Get Parameter
      RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
      -- Processing:1:2:3 Lock :4:5:6:7
      -- TODO
      /**
      * Get Info + Lock
      */
      v_ResultStr:='ReadingRecord';
      SELECT IsCreated,
        Processed,
        AD_Client_ID,
        AD_Org_ID, MovementDate
      INTO v_IsCreated,
        v_Processed,
        v_Client_ID,
        v_Org_ID, v_MovementDate
      FROM M_PRODUCTION
      WHERE M_Production_ID=v_Record_ID  FOR UPDATE;
      /**
      * No Action
      */
      IF(v_Processed<>'N') THEN
        v_Message:='@AlreadyPosted@';
        RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
        FINISH_PROCESS:=true;
      END IF;
      /**************************************************************************
      * Create Lines
      */
      IF(NOT FINISH_PROCESS) THEN
        /***************************************************************************/
        -- Check the header belongs to a organization where transactions are posible and ready to use
        SELECT AD_Org.IsReady, Ad_OrgType.IsTransactionsAllowed
        INTO v_is_ready, v_is_tr_allow
        FROM M_PRODUCTION, AD_Org, AD_OrgType
        WHERE AD_Org.AD_Org_ID=M_PRODUCTION.AD_Org_ID
        AND AD_Org.AD_OrgType_ID=AD_OrgType.AD_OrgType_ID
        AND M_PRODUCTION.M_PRODUCTION_ID=v_Record_ID;
        IF (v_is_ready='N') THEN
          RAISE EXCEPTION '%', '@OrgHeaderNotReady@'; --OBTG:-20000--
        END IF;
        IF (v_is_tr_allow='N') THEN
          RAISE EXCEPTION '%', '@OrgHeaderNotTransAllowed@'; --OBTG:-20000--
        END IF;
        
	    -- Check the lines belong to the same business unit or legal entity as the header    
        SELECT AD_ORG_CHK_DOCUMENTS('M_PRODUCTION', 'M_PRODUCTIONPLAN', v_Record_ID, 'M_PRODUCTION_ID', 'M_PRODUCTION_ID') INTO v_is_included FROM dual;
        IF (v_is_included=-1) THEN
          RAISE EXCEPTION '%', '@LinesAndHeaderDifferentLEorBU@'; --OBTG:-20000--
        END IF;
        FOR CUR_PP IN
          (SELECT M_PRODUCTIONPLAN_ID
           FROM M_PRODUCTIONPLAN
           WHERE M_PRODUCTION_ID = v_Record_ID) LOOP
          SELECT AD_ORG_CHK_DOCUMENTS('M_PRODUCTIONPLAN', 'M_PRODUCTIONLINE', CUR_PP.M_PRODUCTIONPLAN_ID, 'M_PRODUCTIONPLAN_ID', 'M_PRODUCTIONPLAN_ID') INTO v_is_included FROM dual;
          IF (v_is_included=-1) THEN
            RAISE EXCEPTION '%', '@LinesAndHeaderDifferentLEorBU@'; --OBTG:-20000--
          END IF;
        END LOOP;        
        
        -- Check the period control is opened (only if it is legal entity with accounting)
        -- Gets the BU or LE of the document
        SELECT AD_GET_DOC_LE_BU('M_PRODUCTION', v_Record_ID, 'M_PRODUCTION_ID', 'LE')
        INTO v_org_bule_id
        FROM DUAL;
        
        SELECT AD_OrgType.IsAcctLegalEntity
        INTO v_isacctle
        FROM AD_OrgType, AD_Org
        WHERE AD_Org.AD_OrgType_ID = AD_OrgType.AD_OrgType_ID
        AND AD_Org.AD_Org_ID=v_org_bule_id;
        
        IF (v_isacctle='Y') THEN
          SELECT C_CHK_OPEN_PERIOD(v_Org_ID, v_MovementDate, 'MMP', NULL) 
          INTO v_available_period
          FROM DUAL;
          
          IF (v_available_period<>1) THEN
            RAISE EXCEPTION '%', '@PeriodNotAvailable@'; --OBTG:-20000--
          END IF;
        END IF;
        
        
        
        IF(v_IsCreated<>'Y') THEN
          -- For every Production Plan
          FOR CUR_PP IN
            (SELECT M_PRODUCTIONPLAN.*,
              M_PRODUCT.C_UOM_ID,  M_PRODUCT.M_AttributeSetInstance_ID 
            FROM M_PRODUCTIONPLAN,
              M_PRODUCT
            WHERE M_PRODUCTIONPLAN.M_Product_ID=M_PRODUCT.M_Product_ID
              AND M_PRODUCTIONPLAN.M_Production_ID=v_Record_ID
            ORDER BY M_PRODUCTIONPLAN.Line,
              M_PRODUCTIONPLAN.M_Product_ID
            )
          LOOP
            -- Delete prior lines
            DELETE
            FROM M_PRODUCTIONLINE
            WHERE M_ProductionPlan_ID=CUR_PP.M_ProductionPlan_ID;
            -- Create BOM Line
            v_ResultStr:='CreatingLine BOM';
            v_Line:=10; -- OriginLine
            SELECT * INTO  NextNo FROM Ad_Sequence_Next('M_ProductionLine', CUR_PP.AD_Client_ID) ;
            INSERT
            INTO M_PRODUCTIONLINE
              (
                M_ProductionLine_ID, M_ProductionPlan_ID, Line, AD_Client_ID,
                AD_Org_ID, IsActive, Created, CreatedBy,
                Updated, UpdatedBy, M_Product_ID, MovementQty,
                M_Locator_ID, Description, C_UOM_ID,
                M_AttributeSetInstance_ID
              )
              VALUES
              (
                NextNo, CUR_PP.M_ProductionPlan_ID, v_Line, CUR_PP.AD_Client_ID,
                CUR_PP.AD_Org_ID, 'Y', TO_DATE(NOW()), '0',
                TO_DATE(NOW()), '0', CUR_PP.M_Product_ID, CUR_PP.ProductionQty,
                CUR_PP.M_Locator_ID, CUR_PP.Description, CUR_PP.C_UOM_ID,
                CUR_PP.M_AttributeSetInstance_ID
              )
              ;
          END LOOP;
          --Creating BOM Lines
          DECLARE
            v_Product_old VARCHAR(32); --OBTG:VARCHAR2--
            v_Warehouse_old VARCHAR(32); --OBTG:VARCHAR2--
            v_UOM_old VARCHAR(32); --OBTG:VARCHAR2--
            v_Warehouse_old_org VARCHAR(32); --OBTG:VARCHAR2--
            v_QtyStorage NUMERIC:=0;
          BEGIN
            FOR CUR_BOM IN
              (SELECT pb.*,
                p.C_UOM_ID,
                p.IsStocked,
                pp.M_LOCATOR_ID,
                pp.AD_Org_ID AS ORG_ID,
                pp.ProductionQty,
                pp.M_ProductionPlan_ID,
                pp.AD_Client_ID AS Client_ID,
                p.name as pname
              FROM M_PRODUCT_BOM pb,
                M_PRODUCT p,
                M_PRODUCTIONPLAN pp
              WHERE pb.M_ProductBOM_ID=p.M_Product_ID
                AND pb.M_Product_ID=pp.M_PRODUCT_ID
                AND pp.M_PRODUCTION_ID=v_Record_ID
              ORDER BY pb.M_PRODUCTBOM_ID,
                pb.Line
              )
            LOOP
              v_ResultStr:='CreatingLine Products';
              IF(CUR_BOM.IsStocked='Y') THEN
                v_QtyAcumulated:=0;
                SELECT M_WAREHOUSE_ID
                INTO p_Warehouse
                FROM M_LOCATOR
                WHERE M_LOCATOR_ID=CUR_BOM.M_LOCATOR_ID;
                IF(NOT CUR_STOCK_ISOPEN) OR (v_Product_old<>CUR_BOM.M_ProductBOM_ID OR v_Warehouse_old<>p_Warehouse OR  v_UOM_old<>CUR_BOM.C_UOM_ID) THEN
                  v_Product_old:=CUR_BOM.M_ProductBOM_ID;
                  v_Warehouse_old:=p_Warehouse;
                  v_UOM_old:=CUR_BOM.C_UOM_ID;
                  SELECT ad_org_id INTO v_Warehouse_old_org
                  FROM m_warehouse
                  WHERE m_warehouse_id = v_Warehouse_old;
                  IF(CUR_STOCK_ISOPEN) THEN
                    CLOSE CUR_STOCK;
                    CUR_STOCK_ISOPEN:=false;
                  END IF;
                  OPEN CUR_STOCK(v_Product_old, v_UOM_old, v_Warehouse_old, v_warehouse_old_org);
                  CUR_STOCK_ISOPEN:=true;
                  FETCH CUR_STOCK INTO v_storage;
                  IF  NOT FOUND  THEN --OBTG:CUR_STOCK--
                    NEXT_PRODUCT:=true;
                  END IF;
                  v_QtyStorage:=v_storage.Qty;
                END IF;
                IF(NOT NEXT_PRODUCT) THEN
                  LOOP
                    v_Qty:=LEAST(v_QtyStorage, CUR_BOM.ProductionQty*CUR_BOM.BOMQty - v_QtyAcumulated) ;
                    v_QtyStorage:=v_QtyStorage - v_Qty;
                    v_QtyAcumulated:=v_QtyAcumulated + v_Qty;
                    v_QtyOrder:=v_storage.QtyOrder*(v_Qty/v_storage.Qty) ;
                    SELECT COALESCE(MAX(Line), 0) + 10
                    INTO v_Line
                    FROM M_PRODUCTIONLINE
                    WHERE M_ProductionPlan_ID=CUR_BOM.M_ProductionPlan_ID;
                    SELECT * INTO  NextNo FROM Ad_Sequence_Next('M_ProductionLine', CUR_BOM.Client_ID) ;
                    INSERT
                    INTO M_PRODUCTIONLINE
                      (
                        M_ProductionLine_ID, M_ProductionPlan_ID, Line, AD_Client_ID,
                        AD_Org_ID, IsActive, Created, CreatedBy,
                        Updated, UpdatedBy, M_Product_ID, C_UOM_ID,
                        MovementQty, M_Locator_ID, M_AttributeSetInstance_ID, M_Product_UOM_ID,
                        QuantityOrder
                      )
                      VALUES
                      (
                        NextNo, CUR_BOM.M_ProductionPlan_ID, v_Line, CUR_BOM.Client_ID,
                        CUR_BOM.Org_ID, 'Y', TO_DATE(NOW()), '0',
                        TO_DATE(NOW()), '0', CUR_BOM.M_ProductBOM_ID, CUR_BOM.C_UOM_ID,
                        -v_Qty, v_storage.M_Locator_ID, v_storage.M_AttributeSetInstance_ID, v_storage.M_Product_UOM_ID,
                        -v_QtyOrder
                      )
                      ;
                    IF(v_QtyAcumulated>=CUR_BOM.ProductionQty*CUR_BOM.BOMQty) THEN
                      EXIT;
                    END IF;
                    v_QtyStorage:=0;
                    v_ResultStr:='FetchingData';
                    FETCH CUR_STOCK INTO v_storage;
                    EXIT WHEN  NOT FOUND ; --OBTG:CUR_STOCK--
                    v_QtyStorage:=v_storage.Qty;
                  END LOOP;
                END IF; --NEXT_PRODUCT
              ELSE
                SELECT COALESCE(MAX(Line), 0) + 10
                INTO v_Line
                FROM M_PRODUCTIONLINE
                WHERE M_ProductionPlan_ID=CUR_BOM.M_ProductionPlan_ID;
                SELECT * INTO  NextNo FROM Ad_Sequence_Next('M_ProductionLine', CUR_BOM.Client_ID) ;
                INSERT
                INTO M_PRODUCTIONLINE
                  (
                    M_ProductionLine_ID, M_ProductionPlan_ID, Line, AD_Client_ID,
                    AD_Org_ID, IsActive, Created, CreatedBy,
                    Updated, UpdatedBy, M_Product_ID, MovementQty,
                    M_Locator_ID, C_UOM_ID
                  )
                  VALUES
                  (
                    NextNo, CUR_BOM.M_ProductionPlan_ID, v_Line, CUR_BOM.Client_ID,
                    CUR_BOM.Org_ID, 'Y', TO_DATE(NOW()), '0',
                    TO_DATE(NOW()), '0', CUR_BOM.M_ProductBOM_ID, -CUR_BOM.ProductionQty*CUR_BOM.BOMQty,
                    CUR_BOM.M_Locator_ID, CUR_BOM.C_UOM_ID
                  )
                  ;
              END IF;
              ---- <<NEXT_PRODUCT>>
              NEXT_PRODUCT:=false;
              v_Line:=v_Line;
              IF (v_QtyAcumulated < CUR_BOM.BOMQTY*CUR_BOM.ProductionQty) THEN
                v_Message := '@NotEnoughStocked@: ' || CUR_BOM.pname || ' ' || v_QtyAcumulated || ' / '|| CUR_BOM.BOMQTY*CUR_BOM.ProductionQty;
                -- ROLLBACK;
                RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
              END IF;
            END LOOP;
            IF(CUR_STOCK_ISOPEN) THEN
              CLOSE CUR_STOCK;
              CUR_STOCK_ISOPEN:=false;
            END IF;
          END; --END OF DECLARE FOR BOM PRODUCTS INSERTION
          -- While we have BOMs
          LOOP
            -- Are there non-stored BOMs to list details:8
            v_ResultStr:='CreatingLine CheckBOM';
            SELECT COUNT(*)
            INTO CountNo
            FROM M_PRODUCTIONLINE pl,
              M_PRODUCT p,
              M_PRODUCTIONPLAN pp
            WHERE pl.M_Product_ID=p.M_Product_ID
              AND pl.M_ProductionPlan_ID=pp.M_ProductionPlan_ID
              AND pp.M_PRODUCTION_ID=v_Record_ID
              AND pl.Line<>10 -- Origin Line
              AND p.IsBOM='Y'
              AND p.IsStocked='N';
            -- Nothing to do
            EXIT
          WHEN(CountNo=0) ;
            --
            -- Resolve BOMs in ProductLine which are not stocked
            FOR CUR_PLineBOM IN
              (SELECT pl.M_ProductionLine_ID,
                pl.Line,
                pl.M_Product_ID,
                pl.MovementQty,
                pp.M_LOCATOR_ID,
                pp.AD_Org_ID AS ORG_ID,
                pp.ProductionQty,
                pp.M_ProductionPlan_ID,
                pp.AD_Client_ID AS Client_ID
              FROM M_PRODUCTIONLINE pl,
                M_PRODUCT p,
                M_PRODUCTIONPLAN pp
              WHERE pl.M_ProductionPlan_ID=pp.M_ProductionPlan_ID
                AND pp.M_Production_ID=v_Record_ID
                AND pl.M_Product_ID=p.M_Product_ID
                AND pl.Line<>10 -- Origin Line
                AND p.IsBOM='Y'
                AND p.IsStocked='N'
              )
            LOOP
              v_ResultStr:='CreatingLineBOM Resolution';
              v_Line:=CUR_PLineBOM.Line;
              -- Resolve BOM Line in product line
              FOR CUR_BOM_PRODUCT IN
                (SELECT pb.*,
                  p.C_UOM_ID,
                  p.IsStocked
                FROM M_PRODUCT_BOM pb,
                  M_PRODUCT p
                WHERE pb.M_ProductBOM_ID=p.M_Product_ID
                  AND pb.M_Product_ID=CUR_PLineBOM.M_Product_ID
                ORDER BY pb.M_PRODUCTBOM_ID,
                  pb.Line
                )
              LOOP
                v_ResultStr:='CreatingLine Products2';
                SELECT COALESCE(MAX(Line), 0) + 10
                INTO v_Line
                FROM M_PRODUCTIONLINE
                WHERE M_ProductionPlan_ID=CUR_PLineBOM.M_ProductionPlan_ID;
                SELECT * INTO  NextNo FROM Ad_Sequence_Next('M_ProductionLine', CUR_PLineBOM.Client_ID) ;
                INSERT
                INTO M_PRODUCTIONLINE
                  (
                    M_ProductionLine_ID, M_ProductionPlan_ID, Line, AD_Client_ID,
                    AD_Org_ID, IsActive, Created, CreatedBy,
                    Updated, UpdatedBy, M_Product_ID, MovementQty,
                    M_Locator_ID
                  )
                  VALUES
                  (
                    NextNo, CUR_PLineBOM.M_ProductionPlan_ID, v_Line, CUR_PLineBOM.Client_ID,
                    CUR_PLineBOM.Org_ID, 'Y', TO_DATE(NOW()), '0',
                    TO_DATE(NOW()), '0', CUR_BOM_PRODUCT.M_ProductBOM_ID, CUR_PLineBOM.MovementQty*CUR_BOM_PRODUCT.BOMQty,
                    CUR_PLineBOM.M_Locator_ID
                  )
                  ;
              END LOOP;
              -- Delete BOM line
              DELETE
              FROM M_PRODUCTIONLINE
              WHERE M_ProductionLine_ID=CUR_PLineBOM.M_ProductionLine_ID;
            END LOOP;
          END LOOP; -- While we have BOMs
          -- Modifying locator to have sufficient stock
          -- Indicate that it is Created
          UPDATE M_PRODUCTION  SET IsCreated='Y'  WHERE M_Production_ID=v_Record_ID;
          /**************************************************************************
          * Post Lines
          */
        ELSE
          v_ResultStr:='CheckingRestrictions';
          SELECT COUNT(*)
          INTO v_Count
          FROM M_PRODUCTIONPLAN PP,
            M_PRODUCTIONLINE PL,
            M_PRODUCT P
          WHERE PL.M_PRODUCT_ID=P.M_PRODUCT_ID
            AND P.M_ATTRIBUTESET_ID IS NOT NULL
            AND P.M_ATTRIBUTESETINSTANCE_ID IS NULL
            AND COALESCE(PL.M_ATTRIBUTESETINSTANCE_ID, '0') = '0'
            AND PL.M_ProductionPlan_ID=pp.M_ProductionPlan_ID
            AND pp.M_Production_ID=v_Record_ID;
          IF v_Count<>0 THEN
          SELECT max(P.name) INTO v_Product_Name          
          FROM M_PRODUCTIONPLAN PP,
            M_PRODUCTIONLINE PL,
            M_PRODUCT P
          WHERE PL.M_PRODUCT_ID=P.M_PRODUCT_ID
            AND P.M_ATTRIBUTESET_ID IS NOT NULL
            AND P.M_ATTRIBUTESETINSTANCE_ID IS NULL
            AND COALESCE(PL.M_ATTRIBUTESETINSTANCE_ID, '0') = '0'
            AND PL.M_ProductionPlan_ID=pp.M_ProductionPlan_ID
            AND pp.M_Production_ID=v_Record_ID;
            v_Message:='@Product@'||' "' ||v_Product_Name ||'" ' || '@ProductWithoutAttributeSet@';
            RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
            FINISH_PROCESS:=true;
          END IF;
          -- All Production Lines
          IF(NOT FINISH_PROCESS) THEN
            FOR CUR_PL_Post IN
              (SELECT pl.M_ProductionLine_ID,
                pl.AD_Client_ID,
                pl.AD_Org_ID,
                p.MovementDate,
                pl.M_Product_ID,
                pl.M_AttributeSetInstance_ID,
                pl.MovementQty,
                pl.M_Locator_ID,
                pl.M_Product_UOM_ID,
                pl.QuantityOrder,
                pl.C_UOM_ID,
                pl.LINE
              FROM M_PRODUCTION p,
                M_PRODUCTIONLINE pl,
                M_PRODUCTIONPLAN pp
              WHERE p.M_Production_ID=pp.M_Production_ID
                AND pp.M_ProductionPlan_ID=pl.M_ProductionPlan_ID
                AND pp.M_Production_ID=v_Record_ID
              ORDER BY pp.Line,
                pl.Line
              )
            LOOP
              -- M_ProductionLine_ID, AD_Client_ID, AD_Org_ID, MovementDate, M_Product_ID, MovementQty, M_Locator_ID
              -- DBMS_OUTPUT.PUT_LINE('ProductionLine=' || pl.M_ProductionLine_ID);
              -- DBMS_OUTPUT.PUT_LINE('  Qty=' || pl.MovementQty || ', OnHand=' || M_BOM_Qty_OnHand(pl.M_Product_ID, NULL, pl.M_Locator_ID));
              -- Check Stock levels for reductions
              IF(CUR_PL_Post.MovementQty<0 AND MustBeStocked<>'N'  AND M_BOM_Qty_OnHand(CUR_PL_Post.M_Product_ID, NULL, CUR_PL_Post.M_Locator_ID) +CUR_PL_Post.MovementQty<0) THEN
                -- ROLLBACK;
                SELECT '@NotEnoughStocked@: ' || Name
                INTO v_Message
                FROM M_PRODUCT
                WHERE M_Product_ID=CUR_PL_Post.M_Product_ID;
                RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
                FINISH_PROCESS:=true;
              END IF;
              IF(NOT FINISH_PROCESS) THEN
                -- Create Transaction Entry
                v_ResultStr:='CreateTransaction';
                SELECT * INTO  NextNo FROM Ad_Sequence_Next('M_Transaction', CUR_PL_Post.AD_Org_ID) ;
                INSERT
                INTO M_TRANSACTION
                  (
                    M_Transaction_ID, M_ProductionLine_ID, AD_Client_ID, AD_Org_ID,
                    IsActive, Created, CreatedBy, Updated,
                    UpdatedBy, MovementType, M_Locator_ID, M_Product_ID,
                    M_AttributeSetInstance_ID,
                    MovementDate, MovementQty, M_Product_UOM_ID, QuantityOrder,
                    C_UOM_ID
                  )
                  VALUES
                  (
                    NextNo, CUR_PL_Post.M_ProductionLine_ID, CUR_PL_Post.AD_Client_ID, CUR_PL_Post.AD_Org_ID,
                     'Y', TO_DATE(NOW()), '0', TO_DATE(NOW()),
                    '0', 'P+', CUR_PL_Post.M_Locator_ID, CUR_PL_Post.M_Product_ID,
                    COALESCE(CUR_PL_Post.M_AttributeSetInstance_ID, '0'), -- not distinguishing between assemby/disassembly
                    CUR_PL_Post.MovementDate, CUR_PL_Post.MovementQty, CUR_PL_Post.M_Product_UOM_ID, CUR_PL_Post.QuantityOrder,
                    CUR_PL_Post.C_UOM_ID
                  )
                  ;
                SELECT * INTO  v_Result, v_Message FROM M_Check_Stock(CUR_PL_Post.M_Product_ID, v_Client_ID, v_Org_ID) ;
                IF v_Result=0 THEN
                  v_Message:=v_Message || ' @Inline@ ' || CUR_PL_Post.line;
                  RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
                  FINISH_PROCESS:=true;
                END IF;
              END IF; --FINISH_PROCESS
            END LOOP;
          END IF;--FINISH_PROCESS
          IF(NOT FINISH_PROCESS) THEN
            -- Indicate that we are done
            UPDATE M_PRODUCTION
              SET Processed='Y',
              updated=TO_DATE(NOW()),
              updatedby=p_User
            WHERE M_Production_ID=v_Record_ID;
          END IF; --FINISH_PROCESS
        END IF;
      END IF;--FINISH_PROCESS
      IF(NOT FINISH_PROCESS) THEN
        -- Only commit when entire job successful
        -- COMMIT;
      END IF; --FINISH_PROCESS
      ---- <<FINISH_PROCESS>>
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
      PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', v_Result, v_Message) ;
      RETURN;
    END; --BODY
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE '%',v_ResultStr ;
    v_ResultStr:= '@ERROR=' || SQLERRM;
    RAISE NOTICE '%',v_ResultStr ;
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END ; $_$;


ALTER FUNCTION public.m_production_run(pinstance_id character varying) OWNER TO tad;

--
-- Name: m_production_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_production_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





/*************************************************************************
    * The contents of this file are subject to the Openbravo  Public  License
    * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
    * Version 1.1  with a permitted attribution clause; you may not  use this
    * file except in compliance with the License. You  may  obtain  a copy of
    * the License at http://www.openbravo.com/legal/license.html
    * Software distributed under the License  is  distributed  on  an "AS IS"
    * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
    * License for the specific  language  governing  rights  and  limitations
    * under the License.
    * The Original Code is Openbravo ERP.
    * The Initial Developer of the Original Code is Openbravo SL
    * All portions are Copyright (C) 2007 Openbravo SL
    * All Rights Reserved.
    * Contributor(s):  ______________________________________.
    ************************************************************************/
v_DateNull TIMESTAMP := TO_DATE('01-01-1900', 'DD-MM-YYYY');
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF (old.PROCESSED = 'Y') THEN 
   IF (TG_OP = 'DELETE') THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
    IF (TG_OP = 'UPDATE') AND(
     (COALESCE(old.MOVEMENTDATE, v_DateNull) <> COALESCE(new.MOVEMENTDATE, v_DateNull))
     OR (COALESCE(old.AD_ORGTRX_ID, '0') <> COALESCE(new.AD_ORGTRX_ID, '0'))
     OR (COALESCE(old.DOCUMENTNO, '0') <> COALESCE(new.DOCUMENTNO, '0'))) THEN
        RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
 END IF;    
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.m_production_trg() OWNER TO tad;

--
-- Name: m_productionline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--




ALTER FUNCTION public.m_productionline_trg() OWNER TO tad;

--
-- Name: m_productionplan_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_productionplan_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: M_ProductionPlan_Trg.sql,v 1.2 2002/05/23 17:31:12 jjanke Exp $
    ***
    * Title: ReadOnly Check
    * Description:
    ************************************************************************/
    v_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_RO NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  -- Get ID
  IF(TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
    v_ID:=new.M_Production_ID;
  ELSE
    v_ID:=old.M_Production_ID;
  END IF;
  -- ReadOnly Check
  SELECT COUNT(*)
  INTO v_RO
  FROM M_Production
  WHERE M_Production_ID=v_ID
    AND(Processed='Y'
    OR Posted='Y') ;
  IF (v_RO > 0) THEN
    IF (TG_OP = 'DELETE' OR TG_OP = 'INSERT') THEN
      RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
    END IF;
    IF (TG_OP = 'UPDATE') THEN
      IF (new.M_PRODUCT_ID <> old.M_PRODUCT_ID
         OR new.PRODUCTIONQTY <> old.PRODUCTIONQTY
         OR new.M_LOCATOR_ID <> old.M_LOCATOR_ID
         OR new.CONVERSIONRATE <> old.CONVERSIONRATE
         OR new.MA_COSTCENTERUSE <> old.MA_COSTCENTERUSE
         OR new.MA_WRPHASE_ID <> old.MA_WRPHASE_ID
         OR new.NEEDEDQUANTITY <> old.NEEDEDQUANTITY
         OR new.REJECTEDQUANTITY <> old.REJECTEDQUANTITY
         OR new.SECONDARYQTY <> old.SECONDARYQTY
        OR new.SECONDARYUNIT <> old.SECONDARYUNIT
         OR new.PROCESSED <> old.PROCESSED
        ) THEN
        RAISE EXCEPTION '%', 'Document processed/posted' ; --OBTG:-20501--
      END IF;
    END IF;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.m_productionplan_trg() OWNER TO tad;

--
-- Name: m_rappel_invoice_create(character varying); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: m_rappel_invoice_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_rappel_invoice_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

     
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  DELETE FROM c_invoicetax WHERE c_invoice_id=old.c_invoice_id;
  DELETE FROM c_invoiceline  WHERE c_invoice_id=old.c_invoice_id;
  DELETE FROM c_invoice WHERE c_invoice_id=old.c_invoice_id;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.m_rappel_invoice_trg() OWNER TO tad;

--
-- Name: m_requisitionline_status(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_requisitionline_status(p_pinstance_id character varying, p_requisitionline_id character varying, p_user_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; -- 0=failure
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_User_ID VARCHAR(32):='0'; --OBTG:VARCHAR2--

  --  Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
BEGIN
  IF (p_PInstance_ID IS NOT NULL) THEN
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  END IF;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    IF (p_PInstance_ID IS NOT NULL) THEN
      FOR Cur_Parameter IN
        (SELECT i.Record_ID, i.AD_User_ID, i.AD_Client_ID, i.AD_Org_ID,
          p.ParameterName, p.P_String, p.P_Number, p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo) LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_User_ID:=Cur_Parameter.AD_User_ID;
      END LOOP; -- Get Parameter
    ELSE
      v_Record_ID:=p_RequisitionLine_ID;
      v_User_ID := p_User_ID;
    END IF;
    v_ResultStr := 'Updating reqstatus';
    UPDATE M_RequisitionLine
    SET ReqStatus = (CASE ReqStatus
                    WHEN 'P' THEN 'P'
                    WHEN 'C' THEN 'O'
                    WHEN 'D' THEN 'O'
                    ELSE (CASE OrderedQty
                         WHEN 0 THEN 'D'
                         ELSE 'C' END) END),
        Updated = TO_DATE(NOW()),
        UpdatedBy = v_User_ID
    WHERE M_RequisitionLine_ID = v_Record_ID;

    UPDATE M_Requisition
    SET DocStatus = 'CL'
    WHERE M_Requisition_ID = (SELECT M_Requisition_ID FROM M_RequisitionLine WHERE M_RequisitionLine_ID = v_Record_ID)
      AND NOT EXISTS (SELECT 1
                      FROM M_RequisitionLine rl
                      WHERE rl.REQSTATUS = 'O'
                        AND rl.M_Requisition_ID = (SELECT M_Requisition_ID FROM M_RequisitionLine WHERE M_RequisitionLine_ID = v_Record_ID));

  END; --BODY
  IF (p_PInstance_ID IS NOT NULL) THEN
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  RAISE NOTICE '%','M_RequisitionLine_Status error: ' || v_ResultStr;
  IF (p_PInstance_ID IS NOT NULL) THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    RAISE NOTICE '%',v_ResultStr ;
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr);
  ELSE
    RAISE EXCEPTION '%', SQLERRM;
  END IF;
END ; $$;


ALTER FUNCTION public.m_requisitionline_status(p_pinstance_id character varying, p_requisitionline_id character varying, p_user_id character varying) OWNER TO tad;

--
-- Name: m_requisitionline_status0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_requisitionline_status0(pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
  PERFORM M_REQUISITIONLINE_STATUS(PInstance_ID, NULL, NULL);
END ; $$;


ALTER FUNCTION public.m_requisitionline_status0(pinstance_id character varying) OWNER TO tad;

--
-- Name: m_requisitionorder_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.m_requisitionorder_trg() OWNER TO tad;

--
-- Name: m_transaction_trg(); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.m_transaction_trg() OWNER TO tad;


--
-- Name: m_update_pareto_product(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.m_update_pareto_product0(pinstance_id character varying) OWNER TO tad;

--
-- Name: m_update_storage_pending(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric, numeric, numeric, numeric); Type: FUNCTION; Schema: public; Owner: tad
--


--
-- Name: m_warehouse_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_warehouse_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * New Accounting Defaults
    */


  --TYPE RECORD IS REFCURSOR;
  Cur_Defaults RECORD;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF(TG_OP = 'INSERT') THEN
    FOR Cur_Defaults IN
      (
      SELECT *
      FROM C_AcctSchema_Default d
      WHERE EXISTS
        (
      SELECT 1 
      FROM AD_Org_AcctSchema
      WHERE AD_IsOrgIncluded(AD_Org_ID, new.AD_ORG_ID, new.AD_Client_ID)<>-1
      AND IsActive = 'Y'
      AND AD_Org_AcctSchema.C_AcctSchema_ID = d.C_AcctSchema_ID
        )
      )
    LOOP
      INSERT
      INTO M_Warehouse_Acct
        (
          M_Warehouse_Acct_ID, M_Warehouse_ID, C_AcctSchema_ID, AD_Client_ID,
          AD_Org_ID, IsActive, Created,
          CreatedBy, Updated, UpdatedBy,
          W_Inventory_Acct, W_Differences_Acct, W_Revaluation_Acct,
          W_InvActualAdjust_Acct
        )
        VALUES
        (
          get_uuid(), new.M_Warehouse_ID, Cur_Defaults.C_AcctSchema_ID, new.AD_Client_ID,
          new.AD_ORG_ID,  'Y', TO_DATE(NOW()),
          new.CreatedBy, TO_DATE(NOW()), new.UpdatedBy,
          Cur_Defaults.W_Inventory_Acct, Cur_Defaults.W_Differences_Acct, Cur_Defaults.W_Revaluation_Acct,
          Cur_Defaults.W_InvActualAdjust_Acct
        )
        ;
    END LOOP;
  ELSIF (TG_OP = 'UPDATE') THEN
    UPDATE M_WAREHOUSE_ACCT SET AD_ORG_ID = new.AD_ORG_ID
    WHERE M_WAREHOUSE_ID = new.M_WAREHOUSE_ID;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.m_warehouse_trg() OWNER TO tad;

--
-- Name: m_wh_activate_periods(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_wh_activate_periods(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    v_WHSchedule_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_DateFrom TIMESTAMP;
    v_DateTo TIMESTAMP;
    v_Activate CHAR(1) ;
    --
    v_no NUMERIC;
    v_count NUMERIC;
    v_nextNo VARCHAR(32) ; --OBTG:VARCHAR2--
    v_startDate TIMESTAMP;
    v_endDate TIMESTAMP;
    v_ResultStr VARCHAR(60) ;
    --  WHSchedule Variables
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  BEGIN
    --  Update AD_PInstance
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date,
        i.CreatedBy
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_WHSchedule_ID:=Cur_Parameter.Record_ID;
      RAISE NOTICE '%','  Record_ID=' || v_WHSchedule_ID ;
      v_User_ID:=Cur_Parameter.CreatedBy;
      IF(Cur_Parameter.ParameterName='DateFrom') THEN
        v_DateFrom:=Cur_Parameter.P_Date;
        RAISE NOTICE '%','  DateFrom=' || v_DateFrom ;
      ELSIF(Cur_Parameter.ParameterName='DateTo') THEN
        v_DateTo:=Cur_Parameter.P_Date;
        RAISE NOTICE '%','  DateTo=' || v_DateTo ;
      ELSIF(Cur_Parameter.ParameterName='Activate') THEN
        v_Activate:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  Activate=' || v_Activate ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    --  Get C_Year Record
    RAISE NOTICE '%','Get Year info' ;
    v_ResultStr:='YearNotFound';
    SELECT AD_Client_ID,
      AD_Org_ID
    INTO v_Client_ID,
      v_Org_ID
    FROM M_WH_Schedule
    WHERE M_WH_Schedule_ID=v_WHSchedule_ID;
    UPDATE M_WH_PERIOD
      SET ISACTIVE=v_Activate
    WHERE M_WH_PERIOD_ID IN
      ( SELECT M_WH_PERIOD.M_WH_PERIOD_ID
      FROM M_WH_SCHEDULE,
        M_WH_PERIOD
      WHERE M_WH_SCHEDULE.M_WH_SCHEDULE_ID=M_WH_PERIOD.M_WH_SCHEDULE_ID
        AND M_WH_SCHEDULE.M_WH_SCHEDULE_ID=v_WHSchedule_ID
        AND M_WH_PERIOD.STARTDATE>=v_DateFrom
        AND M_WH_PERIOD.ENDDATE<=v_DateTo
      )
      ;
    --  Update AD_PInstance
    ---- <<END_PROCEDURE>>
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, NULL) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
  RETURN;
END ; $$;


ALTER FUNCTION public.m_wh_activate_periods(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: m_wh_period_generate(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION m_wh_period_generate(pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    v_WHSchedule_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_DateFrom TIMESTAMP;
    v_DateTo TIMESTAMP;
    --
    v_no NUMERIC;
    v_count NUMERIC;
    v_nextNo VARCHAR(32) ; --OBTG:VARCHAR2--
    v_startDate TIMESTAMP;
    v_endDate TIMESTAMP;
    v_ResultStr VARCHAR(60) ;
    --  WHSchedule Variables
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Periodicity VARCHAR(60) ; --OBTG:VARCHAR2--
    v_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  BEGIN
    --  Update AD_PInstance
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date,
        i.CreatedBy
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_WHSchedule_ID:=Cur_Parameter.Record_ID;
      RAISE NOTICE '%','  Record_ID=' || v_WHSchedule_ID ;
      v_User_ID:=Cur_Parameter.CreatedBy;
      IF(Cur_Parameter.ParameterName='DateFrom') THEN
        v_DateFrom:=Cur_Parameter.P_Date;
        RAISE NOTICE '%','  DateFrom=' || v_DateFrom ;
      ELSIF(Cur_Parameter.ParameterName='DateTo') THEN
        v_DateTo:=Cur_Parameter.P_Date;
        RAISE NOTICE '%','  DateTo=' || v_DateTo ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    --  Get C_Year Record
    RAISE NOTICE '%','Get Year info' ;
    v_ResultStr:='YearNotFound';
    SELECT AD_Client_ID,
      AD_Org_ID,
      Periodicity
    INTO v_Client_ID,
      v_Org_ID,
      v_Periodicity
    FROM M_WH_Schedule
    WHERE M_WH_Schedule_ID=v_WHSchedule_ID;
    IF(v_Periodicity='D') THEN --daily
      v_startDate:=v_DateFrom;
    ELSIF(v_Periodicity='F') THEN --Fortnightly
      IF(TO_NUMBER(TO_CHAR(v_DateFrom, 'DD'))=1) THEN
        v_startDate:=v_DateFrom;
      ELSIF(TO_NUMBER(TO_CHAR(v_DateFrom, 'DD'))>15) THEN
        v_startDate:=TO_DATE('01/'||TO_CHAR(ADD_MONTHS(v_startDate, 1), 'MM/YYYY'), 'DD/MM/YYYY') ;
      ELSE
        v_startDate:=TO_DATE('01/'||TO_CHAR(v_startDate, 'MM/YYYY'), 'DD/MM/YYYY') ;
      END IF;
    ELSIF(v_Periodicity='M') THEN
      IF(TO_NUMBER(TO_CHAR(v_DateFrom, 'DD'))=1) THEN
        v_startDate:=v_DateFrom;
      ELSE
        v_startDate:=TO_DATE('01/'||TO_CHAR(ADD_MONTHS(v_startDate, 1), 'MM/YYYY'), 'DD/MM/YYYY') ;
      END IF;
    END IF;
    FOR v_no IN 1..1000
    LOOP -- max number of periods inserted: 1000
      IF(v_startDate>v_DateTo) THEN
        EXIT; -- Stop inserting
      END IF;
      IF(v_Periodicity='D') THEN
        v_endDate:=v_startDate;
      ELSIF(v_Periodicity='F') THEN
        IF(TO_NUMBER(TO_CHAR(v_startDate, 'DD'))=1) THEN
          v_endDate:=TO_DATE('15/'||TO_CHAR(v_startDate, 'MM/YYYY'), 'DD/MM/YYYY') ;
        ELSE
          v_endDate:=LAST_DAY(v_startDate) ;
        END IF;
      ELSE
        v_endDate:=LAST_DAY(v_startDate) ;
      END IF;
      --  Do we have the period already:1
      v_ResultStr:='Checking Period no: '||v_no;
      SELECT COUNT(*)
      INTO v_count
      FROM M_WH_PERIOD
      WHERE M_WH_Schedule_ID=v_WHSchedule_ID
        AND STARTDATE=v_startDate;
      IF v_count=0 THEN
        -- get new NextNo
        SELECT * INTO  v_nextNo FROM AD_Sequence_Next('M_WH_Period', v_WHSchedule_ID) ;
        INSERT
        INTO M_WH_Period
          (
            M_WH_Period_ID, AD_Client_ID, AD_Org_ID, IsActive,
            Created, CreatedBy, Updated, UpdatedBy,
            M_WH_Schedule_ID, StartDate, EndDate)
          VALUES
          (
            v_nextNo, v_Client_ID, v_Org_ID, 'Y',
            TO_DATE(NOW()), v_User_ID, TO_DATE(NOW()), v_User_ID,
            v_WHSchedule_ID, v_startDate, v_endDate)
          ;
        RAISE NOTICE '%','Period Added' ;
      END IF;
      --next Date
      IF(v_Periodicity='D') THEN
        v_startDate:=v_startDate + 1;
      ELSIF(v_Periodicity='F') THEN
        IF(TO_NUMBER(TO_CHAR(v_startDate, 'DD'))=1) THEN
          v_startDate:=TO_DATE('16/'||TO_CHAR(v_startDate, 'MM/YYYY'), 'DD/MM/YYYY') ;
        ELSE
          v_startDate:=TO_DATE('01/'||TO_CHAR(ADD_MONTHS(v_startDate, 1), 'MM/YYYY'), 'DD/MM/YYYY') ;
        END IF;
      ELSE
        v_startDate:=ADD_MONTHS(v_startDate, 1) ;
      END IF;
    END LOOP;
    --  Update AD_PInstance
    ---- <<END_PROCEDURE>>
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, NULL) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  IF(PInstance_ID IS NOT NULL) THEN
    PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
  RETURN;
END ; $$;


ALTER FUNCTION public.m_wh_period_generate(pinstance_id character varying) OWNER TO tad;

--
-- Name: ma_copy_version(character varying); Type: FUNCTION; Schema: public; Owner: tad
--



ALTER FUNCTION public.ma_copy_version(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ma_globaluse_distribute(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_globaluse_distribute(p_client_id character varying, p_org_id character varying, p_user_id character varying, p_production_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; --  Success
  --  Parameter
  --TYPE RECORD IS REFCURSOR;
    --  Record Info
    v_UpdatedBy VARCHAR(32); --OBTG:VARCHAR2--
    --  v_Processing        CHAR;
    --  v_Processed         CHAR;
    v_Count NUMERIC;
    v_Total NUMERIC;
    v_Factor NUMERIC;
    v_ProductionLine_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Line NUMERIC;
    v_ProductName VARCHAR(100); --OBTG:VARCHAR2--
    Cur_GlobalUse RECORD;
    Cur_ProductionPlan RECORD;
    v_AD_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
  BEGIN
    --  Get Parameters
    v_ResultStr:='ReadingParameters';
    RAISE NOTICE '%','--<<MA_GlobalUse_Distribute>>' ;

  BEGIN --BODY
    --It should only be generated products in M_ProductionLine in GlobalUse case.
    DELETE
    FROM M_PRODUCTIONLINE
    WHERE M_ProductionPlan_ID IN
      (SELECT M_ProductionPlan_ID
      FROM M_PRODUCTIONPLAN pp,
        MA_WRPHASE wp
      WHERE pp.MA_WRPHASE_ID=wp.MA_WRPHASE_ID
        AND pp.M_PRODUCTION_ID=p_Production_ID
        AND wp.GROUPUSE='Y'
        AND ProductionType='-' );
    v_ResultSTR:='checking products';
    SELECT COUNT(*), MAX(p.NAME)
    INTO v_Count, v_ProductName
    FROM MA_WRPHASEPRODUCT wpp, MA_WRPHASE wp, M_PRODUCTIONPLAN pp, M_PRODUCT p
    WHERE pp.MA_WRPHASE_ID=wp.MA_WRPHASE_ID
      AND wp.MA_WRPHASE_ID=wpp.MA_WRPHASE_ID
      AND wpp.M_PRODUCT_ID = p.M_PRODUCT_ID
      AND pp.M_PRODUCTION_ID=p_Production_ID
      AND wp.GROUPUSE='Y'
      AND wpp.PRODUCTIONTYPE='-'
      AND wpp.M_PRODUCT_ID NOT IN (SELECT M_Product_ID
                                   FROM MA_GLOBALUSE
                                   WHERE M_Production_ID=p_Production_ID);
    IF(v_count<>0) THEN
      RAISE EXCEPTION '%', '@ProductMissing@ ' || v_ProductName; --OBTG:-20000--
    END IF;
    v_ResultSTR:='Distributing Products';
    FOR Cur_GlobalUse IN
      (SELECT *  FROM MA_GLOBALUSE  WHERE M_Production_ID=p_Production_ID)
    LOOP
      SELECT SUM(wpp.MOVEMENTQTY*pp.PRODUCTIONQTY)
      INTO v_Total
      FROM MA_WRPHASEPRODUCT wpp,
        MA_WRPHASE wp,
        M_PRODUCTIONPLAN pp
      WHERE pp.MA_WRPHASE_ID=wp.MA_WRPHASE_ID
        AND wp.MA_WRPHASE_ID=wpp.MA_WRPHASE_ID
        AND pp.M_PRODUCTION_ID=p_Production_ID
        AND wp.GROUPUSE='Y'
        AND wpp.M_PRODUCT_ID=Cur_GlobalUse.M_Product_ID;
      FOR Cur_ProductionPlan IN
        (SELECT pp.*
        FROM M_PRODUCTIONPLAN pp,
          MA_WRPHASEPRODUCT wrpp
        WHERE M_Production_ID=p_Production_ID
          AND pp.MA_WRPHASE_ID=wrpp.MA_WRPHASE_ID
          AND wrpp.M_PRODUCT_ID=Cur_GlobalUse.M_Product_ID
        )
      LOOP
        v_ResultSTR:='Calculate factor';
        SELECT ROUND(COALESCE(wpp.MOVEMENTQTY*pp.PRODUCTIONQTY, 0) /v_Total, 4)
        INTO v_Factor
        FROM MA_WRPHASEPRODUCT wpp,
          MA_WRPHASE wp,
          M_PRODUCTIONPLAN pp
        WHERE pp.MA_WRPHASE_ID=wp.MA_WRPHASE_ID
          AND wp.MA_WRPHASE_ID=wpp.MA_WRPHASE_ID
          AND pp.M_PRODUCTIONPLAN_ID=Cur_ProductionPlan.M_ProductionPlan_ID
          AND wp.GROUPUSE='Y'
          AND wpp.M_PRODUCT_ID=Cur_GlobalUse.M_Product_ID;
        IF(v_Factor<>0) THEN
          SELECT MAX(Line) +10
          INTO v_Line
          FROM M_PRODUCTIONLINE
          WHERE M_ProductionPlan_ID=Cur_ProductionPlan.M_ProductionPlan_ID;
          SELECT * INTO  v_ProductionLine_ID FROM Ad_Sequence_Next('M_ProductionLine', p_Client_ID) ;
          INSERT
          INTO M_PRODUCTIONLINE
            (
              M_ProductionLine_ID, AD_Client_ID, AD_Org_ID, Created,
              Createdby, Isactive, M_ProductionPlan_ID, M_Product_ID,
              Productiontype, M_AttributesetInstance_ID, MovementQty, Updated,
              Updatedby, C_UOM_ID, M_Locator_ID, Line,
              M_Product_UOM_ID, quantityorder
            )
            VALUES
            (
              v_ProductionLine_ID, Cur_GlobalUse.AD_Client_ID, Cur_GlobalUse.AD_Org_ID, TO_DATE(NOW()),
              p_User_ID, 'Y', Cur_ProductionPlan.M_ProductionPlan_ID, Cur_GlobalUse.M_Product_ID,
               '-', Cur_GlobalUse.M_AttributeSetInstance_ID, Cur_GlobalUse.MovementQty*v_Factor, TO_DATE(NOW()),
              p_User_ID, Cur_GlobalUse.C_UOM_ID, Cur_GlobalUse.M_Locator_ID, v_Line,
              Cur_GlobalUse.M_Product_UOM_ID, Cur_GlobalUse.quantityorder*v_Factor
            )
            ;
        END IF;
      END LOOP;
    END LOOP;
    --  End Processing --------------------------------------------------------
    ---- <<END_PROCESSING>>
    ---- <<FINISH_PROCESS>>
    RAISE NOTICE '%','--<<MA_GlobalUse_Distribute finished>> ' || v_Message ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  RAISE NOTICE '%','MA_GLOBALUSE_DISTRIBUTE exception: ' || v_ResultStr ;
  RAISE EXCEPTION '%', SQLERRM;
END ; $$;


ALTER FUNCTION public.ma_globaluse_distribute(p_client_id character varying, p_org_id character varying, p_user_id character varying, p_production_id character varying) OWNER TO tad;

--
-- Name: ma_indirect_cost_calculate(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: ma_maint_all(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_maint_all(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; --  Success
  v_AD_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_InitDate TIMESTAMP;
  v_EndDate TIMESTAMP;
  --  Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --  Record Info
    Cur_Maintenance RECORD;
  BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          i.AD_Client_ID,
          i.AD_Org_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PINSTANCE i
        LEFT JOIN AD_PINSTANCE_PARA p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_AD_User_ID:=Cur_Parameter.AD_User_ID;
        v_Client_ID:=Cur_Parameter.AD_Client_ID;
        v_Org_ID:=Cur_Parameter.AD_Org_ID;
        IF(Cur_Parameter.ParameterName='InitDate') THEN
          v_InitDate:=Cur_Parameter.P_Date;
          RAISE NOTICE '%','  InitDate=' || v_InitDate ;
        ELSIF(Cur_Parameter.ParameterName='EndDate') THEN
          v_EndDate:=Cur_Parameter.P_Date;
          RAISE NOTICE '%','  EndDate=' || v_EndDate ;
        ELSE
          RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
        END IF;
      END LOOP; -- Get Parameter
      RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    END IF;
  BEGIN --BODY
    v_ResultStr:='ProcesingMaintenances';
    FOR Cur_Maintenance IN
      (SELECT MA_Maintenance_ID
      FROM MA_Maintenance
      WHERE isActive='Y'
        AND EXISTS
        (SELECT 1
        FROM MA_Maint_Periodicity
        WHERE MA_Maint_Periodicity.MA_MAINTENANCE_ID=MA_MAINTENANCE_ID
        )
      )
    LOOP
      RAISE NOTICE '%','  MA_Maintenance_ID=' || Cur_Maintenance.MA_Maintenance_ID ;
      PERFORM MA_MAINTENANCE_SCHEDULE(NULL, Cur_Maintenance.MA_Maintenance_ID, v_InitDate, v_EndDate, v_Client_ID, v_Org_ID, v_AD_User_ID) ;
    END LOOP;
    ---- <<FINISH_PROCESS>>
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Finished - ' || v_Message ;
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, v_AD_User_ID, 'N', v_Result, v_Message) ;
    ELSE
      RAISE NOTICE '%','--<<MA_Maintenance escheduling finished>> ' || v_Message ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE EXCEPTION '%', SQLERRM;
  END IF;
  RETURN;
END ; $$;


ALTER FUNCTION public.ma_maint_all(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ma_maintenance_schedule(character varying, character varying, timestamp without time zone, timestamp without time zone, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_maintenance_schedule(p_pinstance_id character varying, p_ma_maintenance_id character varying, p_initdate timestamp without time zone, p_enddate timestamp without time zone, p_client_id character varying, p_org_id character varying, p_user_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; --  Success
  v_AD_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_InitDate TIMESTAMP;
  v_EndDate TIMESTAMP;
  v_Date TIMESTAMP;
  v_DateInt TIMESTAMP;
  v_Int NUMERIC;
  --  Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --  Record Info
    Cur_Periodicity RECORD;
    Cur_Machine RECORD;
    v_Count NUMERIC;
    v_InsertCount NUMERIC:=0;
    v_MA_Maint_Scheduled VARCHAR(32); --OBTG:VARCHAR2--
    v_Maint RECORD; --OBTG:MA_Maintenance--
    v_InitDay NUMERIC;
  BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          i.AD_Client_ID,
          i.AD_Org_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PINSTANCE i
        LEFT JOIN AD_PINSTANCE_PARA p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_AD_User_ID:=Cur_Parameter.AD_User_ID;
        v_Client_ID:=Cur_Parameter.AD_Client_ID;
        v_Org_ID:=Cur_Parameter.AD_Org_ID;
        IF(Cur_Parameter.ParameterName='InitDate') THEN
          v_InitDate:=Cur_Parameter.P_Date;
          RAISE NOTICE '%','  InitDate=' || p_InitDate ;
        ELSIF(Cur_Parameter.ParameterName='EndDate') THEN
          v_EndDate:=Cur_Parameter.P_Date;
          RAISE NOTICE '%','  EndDate=' || p_EndDate ;
        ELSE
          RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
        END IF;
      END LOOP;
      RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    ELSE
      RAISE NOTICE '%','--<<MA_Maintenance_Schedule>>' ;
      v_Record_ID:=p_MA_Maintenance_ID;
      v_InitDate:=p_InitDate;
      v_EndDate:=p_EndDate;
      v_AD_User_ID:=p_User_ID;
      v_Client_ID:=p_Client_ID;
      v_Org_ID:=p_Org_ID;
    END IF;
  BEGIN --BODY
    IF(v_EndDate IS NULL) THEN
      v_EndDate:=v_InitDate +1;
    END IF;
    SELECT *
    INTO v_Maint
    FROM MA_Maintenance
    WHERE MA_Maintenance_ID=v_Record_ID;
    v_ResultStr:='ProcessingPeriodicities';
    FOR Cur_Periodicity IN
      (SELECT *
      FROM MA_Maint_Periodicity
      WHERE MA_Maintenance_Id=v_Record_ID
        AND isActive='Y'
      )
    LOOP
      RAISE NOTICE '%','  Periodicity_ID=' || Cur_Periodicity.MA_Maint_Periodicity_ID ;
      IF(Cur_Periodicity.Periodicity_Type='DA') THEN
        v_ResultStr:='Daily Periodicity';
        v_Date:=v_InitDate;
        WHILE(v_Date<v_EndDate)
        LOOP
          SELECT count(*)
          INTO v_Count
          FROM MA_Maint_Scheduled
          WHERE MA_Maintenance_ID=Cur_Periodicity.MA_Maintenance_ID
            AND SCHEDULEDDATE=v_Date;
          IF NOT(v_Count!=0 OR(Cur_Periodicity.ExcludeWeekend='Y' AND(TO_CHAR(v_Date, 'd')='6' OR TO_CHAR(v_Date, 'd')='7'))) THEN
            IF(v_Maint.MA_Machine_Type_ID IS NOT NULL AND v_Maint.Explode='Y') THEN
              FOR Cur_Machine IN
                (SELECT MA_Machine_ID
                FROM MA_Machine
                WHERE MA_Machine_Type_ID=v_Maint.MA_Machine_Type_ID
                  AND isActive='Y'
                )
              LOOP
                SELECT * INTO  v_MA_Maint_Scheduled FROM Ad_Sequence_Next('MA_Maint_Scheduled', v_Org_ID) ;
                INSERT
                INTO MA_Maint_Scheduled
                  (
                    MA_Maint_Scheduled_ID, AD_Client_ID, AD_Org_ID, Isactive,
                    Created, Createdby, Updated, Updatedby,
                    MA_Maintenance_ID, MA_Machine_ID, MA_Machine_Type_ID, Maintenance_Type,
                    Scheduleddate, Confirmed, Shift, Description
                  )
                  VALUES
                  (
                    v_MA_Maint_Scheduled, v_Client_ID, v_Org_ID, 'Y',
                    TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
                    v_Record_ID, Cur_Machine.MA_Machine_ID, NULL, v_Maint.Maintenance_Type,
                    v_Date, 'N', Cur_Periodicity.Shift, v_Maint.description
                  )
                  ;
                v_InsertCount:=v_InsertCount + 1;
              END LOOP;
            ELSE
              SELECT * INTO  v_MA_Maint_Scheduled FROM Ad_Sequence_Next('MA_Maint_Scheduled', v_Org_ID);
              INSERT
              INTO MA_Maint_Scheduled
                (
                  MA_Maint_Scheduled_ID, AD_Client_ID, AD_Org_ID, Isactive,
                  Created, Createdby, Updated, Updatedby,
                  MA_Maintenance_ID, MA_Machine_ID, MA_Machine_Type_ID, Maintenance_Type,
                  Scheduleddate, Confirmed, Shift, Description
                )
                VALUES
                (
                  v_MA_Maint_Scheduled, v_Client_ID, v_Org_ID, 'Y',
                  TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
                  v_Record_ID, v_Maint.MA_Machine_ID, v_Maint.MA_Machine_Type_ID, v_Maint.Maintenance_Type,
                  v_Date, 'N', Cur_Periodicity.Shift, v_Maint.description
                )
                ;
              v_InsertCount:=v_InsertCount + 1;
            END IF;
          END IF;
          v_Date:=v_Date+1;
        END LOOP;
      ELSIF(Cur_Periodicity.Periodicity_Type='WE') THEN
        v_ResultStr:='Weekly Periodicity';
        SELECT next_day(v_InitDate-1, to_number(Cur_Periodicity.weekday))
        INTO v_Date
        FROM DUAL;
        WHILE(v_Date<v_EndDate)
        LOOP
          SELECT count(*)
          INTO v_Count
          FROM MA_Maint_Scheduled
          WHERE MA_Maintenance_ID=Cur_Periodicity.MA_Maintenance_ID
            AND SCHEDULEDDATE=v_Date;
          IF(v_Count=0) THEN
            IF(v_Maint.MA_Machine_Type_ID IS NOT NULL AND v_Maint.Explode='Y') THEN
              FOR Cur_Machine IN
                (SELECT MA_Machine_ID
                FROM MA_Machine
                WHERE MA_Machine_Type_ID=v_Maint.MA_Machine_Type_ID
                  AND isActive='Y'
                )
              LOOP
                SELECT * INTO  v_MA_Maint_Scheduled FROM Ad_Sequence_Next('MA_Maint_Scheduled', v_Org_ID) ;
                INSERT
                INTO MA_Maint_Scheduled
                  (
                    MA_Maint_Scheduled_ID, AD_Client_ID, AD_Org_ID, Isactive,
                    Created, Createdby, Updated, Updatedby,
                    MA_Maintenance_ID, MA_Machine_ID, MA_Machine_Type_ID, Maintenance_Type,
                    Scheduleddate, Confirmed, Shift, Description
                  )
                  VALUES
                  (
                    v_MA_Maint_Scheduled, v_Client_ID, v_Org_ID, 'Y',
                    TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
                    v_Record_ID, Cur_Machine.MA_Machine_ID, NULL, v_Maint.Maintenance_Type,
                    v_Date, 'N', Cur_Periodicity.Shift, v_Maint.description
                  )
                  ;
                v_InsertCount:=v_InsertCount + 1;
              END LOOP;
            ELSE
              SELECT * INTO  v_MA_Maint_Scheduled FROM Ad_Sequence_Next('MA_Maint_Scheduled', v_Org_ID) ;
              INSERT
              INTO MA_Maint_Scheduled
                (
                  MA_Maint_Scheduled_ID, AD_Client_ID, AD_Org_ID, Isactive,
                  Created, Createdby, Updated, Updatedby,
                  MA_Maintenance_ID, MA_Machine_ID, MA_Machine_Type_ID, Maintenance_Type,
                  Scheduleddate, Confirmed, Shift, Description
                )
                VALUES
                (
                  v_MA_Maint_Scheduled, v_Client_ID, v_Org_ID, 'Y',
                  TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
                  v_Record_ID, v_Maint.MA_Machine_ID, v_Maint.MA_Machine_Type_ID, v_Maint.Maintenance_Type,
                  v_Date, 'N', Cur_Periodicity.Shift, v_Maint.description
                )
                ;
              v_InsertCount:=v_InsertCount + 1;
            END IF;
          END IF;
          v_Date:=v_Date+7;
        END LOOP;
      ELSIF(Cur_Periodicity.Periodicity_Type='M1') THEN
        v_ResultStr:='Monthly Periodicity';
        v_Date:=TO_DATE(Cur_Periodicity.Monthday || '/' || TO_CHAR(v_InitDate, 'mm/yyyy'), 'dd/mm/yyyy') ;
        IF(v_date<v_InitDate) THEN
          v_Date:=ADD_MONTHS(v_Date, to_number(1)) ;
        END IF;
        WHILE(v_Date<v_EndDate)
        LOOP
          v_DateInt:=v_Date;
          IF(Cur_Periodicity.ExcludeWeekend='Y' AND TO_CHAR(v_Date, 'd')='6') THEN
            v_DateInt:=v_Date +2;
          ELSIF(Cur_Periodicity.ExcludeWeekend='Y' AND TO_CHAR(v_Date, 'd')='7') THEN
            v_DateInt:=v_Date +1;
          END IF;
          SELECT count(*)
          INTO v_Count
          FROM MA_Maint_Scheduled
          WHERE MA_Maintenance_ID=Cur_Periodicity.MA_Maintenance_ID
            AND SCHEDULEDDATE=v_DateInt;
          IF(v_Count=0) THEN
            IF(v_Maint.MA_Machine_Type_ID IS NOT NULL AND v_Maint.Explode='Y') THEN
              FOR Cur_Machine IN
                (SELECT MA_Machine_ID
                FROM MA_Machine
                WHERE MA_Machine_Type_ID=v_Maint.MA_Machine_Type_ID
                  AND isActive='Y'
                )
              LOOP
                SELECT * INTO  v_MA_Maint_Scheduled FROM Ad_Sequence_Next('MA_Maint_Scheduled', v_Org_ID) ;
                INSERT
                INTO MA_Maint_Scheduled
                  (
                    MA_Maint_Scheduled_ID, AD_Client_ID, AD_Org_ID, Isactive,
                    Created, Createdby, Updated, Updatedby,
                    MA_Maintenance_ID, MA_Machine_ID, MA_Machine_Type_ID, Maintenance_Type,
                    Scheduleddate, Confirmed, Shift, Description
                  )
                  VALUES
                  (
                    v_MA_Maint_Scheduled, v_Client_ID, v_Org_ID, 'Y',
                    TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
                    v_Record_ID, Cur_Machine.MA_Machine_ID, NULL, v_Maint.Maintenance_Type,
                    v_DateInt, 'N', Cur_Periodicity.Shift, v_Maint.description
                  )
                  ;
                v_InsertCount:=v_InsertCount + 1;
              END LOOP;
            ELSE
              SELECT * INTO  v_MA_Maint_Scheduled FROM Ad_Sequence_Next('MA_Maint_Scheduled', v_Org_ID) ;
              INSERT
              INTO MA_Maint_Scheduled
                (
                  MA_Maint_Scheduled_ID, AD_Client_ID, AD_Org_ID, Isactive,
                  Created, Createdby, Updated, Updatedby,
                  MA_Maintenance_ID, MA_Machine_ID, MA_Machine_Type_ID, Maintenance_Type,
                  Scheduleddate, Confirmed, Shift, Description
                )
                VALUES
                (
                  v_MA_Maint_Scheduled, v_Client_ID, v_Org_ID, 'Y',
                  TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
                  v_Record_ID, v_Maint.MA_Machine_ID, v_Maint.MA_Machine_Type_ID, v_Maint.Maintenance_Type,
                  v_DateInt, 'N', Cur_Periodicity.Shift, v_Maint.description
                )
                ;
              v_InsertCount:=v_InsertCount + 1;
            END IF;
          END IF;
          v_Date:=ADD_MONTHS(v_Date, to_number(1)) ;
        END LOOP;
      ELSIF(Cur_Periodicity.Periodicity_Type='M2') THEN
        v_ResultStr:='Bi-Monthly Periodicity';
        v_Int := 2*(TRUNC(MONTHS_BETWEEN(v_InitDate, Cur_Periodicity.initdate) /2));
        v_Date:=ADD_MONTHS(Cur_Periodicity.initdate, v_Int) ;
        --v_Date := TRUNC(Cur_Periodicity.lastdatecalc, 'mm/yyyy')+Cur_Periodicity.Monthday;
        IF(v_date<v_InitDate) THEN
          v_Date:=ADD_MONTHS(v_Date, to_number(2)) ;
        END IF;
        WHILE(v_Date<v_EndDate)
        LOOP
          v_DateInt:=v_Date;
          IF(Cur_Periodicity.ExcludeWeekend='Y' AND TO_CHAR(v_Date, 'd')='6') THEN
            v_DateInt:=v_Date +2;
          ELSIF(Cur_Periodicity.ExcludeWeekend='Y' AND TO_CHAR(v_Date, 'd')='7') THEN
            v_DateInt:=v_Date +1;
          END IF;
          SELECT count(*)
          INTO v_Count
          FROM MA_Maint_Scheduled
          WHERE MA_Maintenance_ID=Cur_Periodicity.MA_Maintenance_ID
            AND SCHEDULEDDATE=v_DateInt;
          IF(v_Count=0) THEN
            IF(v_Maint.MA_Machine_Type_ID IS NOT NULL AND v_Maint.Explode='Y') THEN
              FOR Cur_Machine IN
                (SELECT MA_Machine_ID
                FROM MA_Machine
                WHERE MA_Machine_Type_ID=v_Maint.MA_Machine_Type_ID
                  AND isActive='Y'
                )
              LOOP
                SELECT * INTO  v_MA_Maint_Scheduled FROM Ad_Sequence_Next('MA_Maint_Scheduled', v_Org_ID) ;
                INSERT
                INTO MA_Maint_Scheduled
                  (
                    MA_Maint_Scheduled_ID, AD_Client_ID, AD_Org_ID, Isactive,
                    Created, Createdby, Updated, Updatedby,
                    MA_Maintenance_ID, MA_Machine_ID, MA_Machine_Type_ID, Maintenance_Type,
                    Scheduleddate, Confirmed, Shift, Description
                  )
                  VALUES
                  (
                    v_MA_Maint_Scheduled, v_Client_ID, v_Org_ID, 'Y',
                    TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
                    v_Record_ID, Cur_Machine.MA_Machine_ID, NULL, v_Maint.Maintenance_Type,
                    v_DateInt, 'N', Cur_Periodicity.Shift, v_Maint.description
                  )
                  ;
                v_InsertCount:=v_InsertCount + 1;
              END LOOP;
            ELSE
              SELECT * INTO  v_MA_Maint_Scheduled FROM Ad_Sequence_Next('MA_Maint_Scheduled', v_Org_ID);
              INSERT
              INTO MA_Maint_Scheduled
                (
                  MA_Maint_Scheduled_ID, AD_Client_ID, AD_Org_ID, Isactive,
                  Created, Createdby, Updated, Updatedby,
                  MA_Maintenance_ID, MA_Machine_ID, MA_Machine_Type_ID, Maintenance_Type,
                  Scheduleddate, Confirmed, Shift, Description
                )
                VALUES
                (
                  v_MA_Maint_Scheduled, v_Client_ID, v_Org_ID, 'Y',
                  TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
                  v_Record_ID, v_Maint.MA_Machine_ID, v_Maint.MA_Machine_Type_ID, v_Maint.Maintenance_Type,
                  v_DateInt, 'N', Cur_Periodicity.Shift, v_Maint.description
                )
                ;
              v_InsertCount:=v_InsertCount + 1;
            END IF;
          END IF;
          v_Date:=ADD_MONTHS(v_Date, to_number(2)) ;
        END LOOP;
      ELSIF(Cur_Periodicity.Periodicity_Type='M3') THEN
        v_ResultStr:='Quarterly Periodicity';
        v_Int := 3*(TRUNC(MONTHS_BETWEEN(v_InitDate, Cur_Periodicity.initdate) /3));
        v_Date:=ADD_MONTHS(Cur_Periodicity.initdate, v_Int) ;
        IF(v_date<v_InitDate) THEN
          v_Date:=ADD_MONTHS(v_Date, to_number(3)) ;
        END IF;
        WHILE(v_Date<v_EndDate)
        LOOP
          v_DateInt:=v_Date;
          IF(Cur_Periodicity.ExcludeWeekend='Y' AND TO_CHAR(v_Date, 'd')='6') THEN
            v_DateInt:=v_Date +2;
          ELSIF(Cur_Periodicity.ExcludeWeekend='Y' AND TO_CHAR(v_Date, 'd')='7') THEN
            v_DateInt:=v_Date +1;
          END IF;
          SELECT count(*)
          INTO v_Count
          FROM MA_Maint_Scheduled
          WHERE MA_Maintenance_ID=Cur_Periodicity.MA_Maintenance_ID
            AND SCHEDULEDDATE=v_DateInt;
          IF(v_Count=0) THEN
            IF(v_Maint.MA_Machine_Type_ID IS NOT NULL AND v_Maint.Explode='Y') THEN
              FOR Cur_Machine IN
                (SELECT MA_Machine_ID
                FROM MA_Machine
                WHERE MA_Machine_Type_ID=v_Maint.MA_Machine_Type_ID
                  AND isActive='Y'
                )
              LOOP
                SELECT * INTO  v_MA_Maint_Scheduled FROM Ad_Sequence_Next('MA_Maint_Scheduled', v_Org_ID) ;
                INSERT
                INTO MA_Maint_Scheduled
                  (
                    MA_Maint_Scheduled_ID, AD_Client_ID, AD_Org_ID, Isactive,
                    Created, Createdby, Updated, Updatedby,
                    MA_Maintenance_ID, MA_Machine_ID, MA_Machine_Type_ID, Maintenance_Type,
                    Scheduleddate, Confirmed, Shift, Description
                  )
                  VALUES
                  (
                    v_MA_Maint_Scheduled, v_Client_ID, v_Org_ID, 'Y',
                    TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
                    v_Record_ID, Cur_Machine.MA_Machine_ID, NULL, v_Maint.Maintenance_Type,
                    v_DateInt, 'N', Cur_Periodicity.Shift, v_Maint.description
                  )
                  ;
                v_InsertCount:=v_InsertCount + 1;
              END LOOP;
            ELSE
              SELECT * INTO  v_MA_Maint_Scheduled FROM Ad_Sequence_Next('MA_Maint_Scheduled', v_Org_ID) ;
              INSERT
              INTO MA_Maint_Scheduled
                (
                  MA_Maint_Scheduled_ID, AD_Client_ID, AD_Org_ID, Isactive,
                  Created, Createdby, Updated, Updatedby,
                  MA_Maintenance_ID, MA_Machine_ID, MA_Machine_Type_ID, Maintenance_Type,
                  Scheduleddate, Confirmed, Shift, Description
                )
                VALUES
                (
                  v_MA_Maint_Scheduled, v_Client_ID, v_Org_ID, 'Y',
                  TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
                  v_Record_ID, v_Maint.MA_Machine_ID, v_Maint.MA_Machine_Type_ID, v_Maint.Maintenance_Type,
                  v_DateInt, 'N', Cur_Periodicity.Shift, v_Maint.description
                )
                ;
              v_InsertCount:=v_InsertCount + 1;
            END IF;
          END IF;
          v_Date:=ADD_MONTHS(v_Date, to_number(3)) ;
        END LOOP;
      ELSIF(Cur_Periodicity.Periodicity_Type='M6') THEN
        v_ResultStr:='Half-yearly Periodicity';
        v_Int := 3*(TRUNC(MONTHS_BETWEEN(v_InitDate, Cur_Periodicity.initdate) /3));
        v_Date:=ADD_MONTHS(Cur_Periodicity.initdate, v_Int) ;
        IF(v_date<v_InitDate) THEN
          v_Date:=ADD_MONTHS(v_Date, to_number(6)) ;
        END IF;
        WHILE(v_Date<v_EndDate)
        LOOP
          v_DateInt:=v_Date;
          IF(Cur_Periodicity.ExcludeWeekend='Y' AND TO_CHAR(v_Date, 'd')='6') THEN
            v_DateInt:=v_Date +2;
          ELSIF(Cur_Periodicity.ExcludeWeekend='Y' AND TO_CHAR(v_Date, 'd')='7') THEN
            v_DateInt:=v_Date +1;
          END IF;
          SELECT count(*)
          INTO v_Count
          FROM MA_Maint_Scheduled
          WHERE MA_Maintenance_ID=Cur_Periodicity.MA_Maintenance_ID
            AND SCHEDULEDDATE=v_DateInt;
          IF(v_Count=0) THEN
            IF(v_Maint.MA_Machine_Type_ID IS NOT NULL AND v_Maint.Explode='Y') THEN
              FOR Cur_Machine IN
                (SELECT MA_Machine_ID
                FROM MA_Machine
                WHERE MA_Machine_Type_ID=v_Maint.MA_Machine_Type_ID
                  AND isActive='Y'
                )
              LOOP
                SELECT * INTO  v_MA_Maint_Scheduled FROM Ad_Sequence_Next('MA_Maint_Scheduled', v_Org_ID);
                INSERT
                INTO MA_Maint_Scheduled
                  (
                    MA_Maint_Scheduled_ID, AD_Client_ID, AD_Org_ID, Isactive,
                    Created, Createdby, Updated, Updatedby,
                    MA_Maintenance_ID, MA_Machine_ID, MA_Machine_Type_ID, Maintenance_Type,
                    Scheduleddate, Confirmed, Shift, Description
                  )
                  VALUES
                  (
                    v_MA_Maint_Scheduled, v_Client_ID, v_Org_ID, 'Y',
                    TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
                    v_Record_ID, Cur_Machine.MA_Machine_ID, NULL, v_Maint.Maintenance_Type,
                    v_DateInt, 'N', Cur_Periodicity.Shift, v_Maint.description
                  )
                  ;
                v_InsertCount:=v_InsertCount + 1;
              END LOOP;
            ELSE
              SELECT * INTO  v_MA_Maint_Scheduled FROM Ad_Sequence_Next('MA_Maint_Scheduled', v_Org_ID);
              INSERT
              INTO MA_Maint_Scheduled
                (
                  MA_Maint_Scheduled_ID, AD_Client_ID, AD_Org_ID, Isactive,
                  Created, Createdby, Updated, Updatedby,
                  MA_Maintenance_ID, MA_Machine_ID, MA_Machine_Type_ID, Maintenance_Type,
                  Scheduleddate, Confirmed, Shift, Description
                )
                VALUES
                (
                  v_MA_Maint_Scheduled, v_Client_ID, v_Org_ID, 'Y',
                  TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
                  v_Record_ID, v_Maint.MA_Machine_ID, v_Maint.MA_Machine_Type_ID, v_Maint.Maintenance_Type,
                  v_DateInt, 'N', Cur_Periodicity.Shift, v_Maint.description
                )
                ;
              v_InsertCount:=v_InsertCount + 1;
            END IF;
          END IF;
          v_Date:=ADD_MONTHS(v_Date, to_number(6)) ;
        END LOOP;
      END IF;
    END LOOP;
    v_Message:='@Created@=' || v_InsertCount;
    ---- <<FINISH_PROCESS>>
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Finished - ' || v_Message ;
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, v_AD_User_ID, 'N', v_Result, v_Message) ;
    ELSE
      RAISE NOTICE '%','--<<MA_Maintenance escheduling finished>> ' || v_Message ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE EXCEPTION '%', SQLERRM;
  END IF;
  RETURN;
END ; $$;


ALTER FUNCTION public.ma_maintenance_schedule(p_pinstance_id character varying, p_ma_maintenance_id character varying, p_initdate timestamp without time zone, p_enddate timestamp without time zone, p_client_id character varying, p_org_id character varying, p_user_id character varying) OWNER TO tad;

--
-- Name: ma_measure_shift_explode(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_measure_shift_explode(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; --  Success
  --  Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --  Record Info
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_User_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Shift VARCHAR(60); --OBTG:VARCHAR2--
    v_CCP_Group NUMERIC;
    v_Line NUMERIC;
    v_Processed CHAR;
    v_Time TIMESTAMP;
    v_Measure_Group VARCHAR(32); --OBTG:VARCHAR2--
    v_Measure_Time VARCHAR(32); --OBTG:VARCHAR2--
    Cur_CCP_Group RECORD;
    FINISH_PROCESS BOOLEAN:=false;
  BEGIN
    --p_Result := 1;
    --  Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date,
        i.AD_Org_ID,
        i.AD_Client_ID
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.AD_User_ID;
      v_Org_ID:=Cur_Parameter.AD_Org_ID;
      v_Client_ID:=Cur_Parameter.AD_Client_ID;
    END LOOP; --  Get Parameter
    RAISE NOTICE '%','  v_Record_ID=' || v_Record_ID ;
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    SELECT processed
    INTO v_Processed
    FROM MA_Measure_Shift
    WHERE MA_Measure_Shift_ID=v_Record_ID;
    IF v_Processed='Y' THEN
      v_ResultStr:='Document is Processed';
      RAISE NOTICE '%','Measure Shift is already Processed' ;
      v_Message:='@MeasureTimeProcessed@';
      RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
    END IF;
    IF(NOT FINISH_PROCESS) THEN
      SELECT shift
      INTO v_Shift
      FROM MA_Measure_Shift
      WHERE MA_Measure_Shift_ID=v_Record_ID;
      FOR Cur_CCP_Group IN
        (SELECT g.*,
          s.STARTTIME,
          s.ENDTIME
        FROM MA_CCP_Group g,
          MA_CCP_Shift s
        WHERE g.MA_CCP_GROUP_ID=s.MA_CCP_GROUP_ID
          AND s.SHIFT=v_Shift
        ORDER BY g.SEQNO
        )
      LOOP
        SELECT * INTO  v_Measure_Group FROM Ad_Sequence_Next('MA_Measure_Group', v_Org_ID);
        INSERT
        INTO MA_Measure_Group
          (
            MA_Measure_Group_ID, AD_Client_ID, AD_Org_ID, Isactive,
            Created, Createdby, Updated, Updatedby,
            MA_CCP_Group_ID, MA_Measure_Shift_ID, Seqno
          )
          VALUES
          (
            v_Measure_Group, v_Client_ID, v_Org_ID, 'Y',
            TO_DATE(NOW()), v_User_ID, TO_DATE(NOW()), v_User_ID,
            Cur_CCP_Group.MA_CCP_Group_ID, v_Record_ID, Cur_CCP_Group.SEQNO
          )
          ;
        -- v_time is equal to now() at starttime
        v_Time:=TRUNC(TO_DATE(NOW())) +(Cur_CCP_Group.STARTTIME - TRUNC(Cur_CCP_Group.STARTTIME)) ;
        WHILE(v_Time - TRUNC(v_Time))<=(Cur_CCP_Group.ENDTIME - TRUNC(Cur_CCP_Group.ENDTIME))
        LOOP
          SELECT * INTO  v_Measure_Time FROM Ad_Sequence_Next('MA_Measure_Time', v_Org_ID);
          INSERT
          INTO MA_Measure_Time
            (
              MA_Measure_Time_ID, AD_Client_ID, AD_Org_ID, Isactive,
              Created, Createdby, Updated, Updatedby,
              MA_Measure_Group_ID, Measurehour, Explode, Processed
            )
            VALUES
            (
              v_Measure_Time, v_Client_ID, v_Org_ID, 'Y',
              TO_DATE(NOW()), v_User_ID, TO_DATE(NOW()), v_User_ID,
              v_Measure_Group, v_Time, 'Y', 'N'
            )
            ;
          PERFORM MA_MEASURE_TIME_EXPLODE(p_PInstance_ID, v_Measure_Time) ;
          --Frecuency is stored in date/time format. Convert to hours is needed
          v_Time:=v_Time +(Cur_CCP_Group.FRECUENCY - TRUNC(Cur_CCP_Group.FRECUENCY)) ;
        END LOOP;
      END LOOP;
      v_ResultStr:='Update Processed Shift';
      UPDATE MA_Measure_Shift
        SET Processed='Y'
      WHERE MA_Measure_Shift_ID=v_Record_ID;
    END IF;--FINISH_PROCESS
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished - ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, v_User_ID, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  RAISE NOTICE '%','MA_MEASURE_SHIFT_EXPLODE exception: ' || v_ResultStr ;
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $$;


ALTER FUNCTION public.ma_measure_shift_explode(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ma_measure_time_explode(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_measure_time_explode(p_pinstance_id character varying, p_measure_time_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; --  Success
  --  Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --  Record Info
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_User_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_CCP_Group NUMERIC;
    v_MeasureQty NUMERIC;
    v_Line NUMERIC;
    v_Processed CHAR;
    Cur_CCP RECORD;
    FINISH_PROCESS BOOLEAN:=false;
    v_NextNo VARCHAR(32); --OBTG:VARCHAR2--
  BEGIN
    --p_Result := 1;
    --  Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date,
        i.AD_Org_ID,
        i.AD_Client_ID
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.AD_User_ID;
      v_Org_ID:=Cur_Parameter.AD_Org_ID;
      v_Client_ID:=Cur_Parameter.AD_Client_ID;
    END LOOP; --  Get Parameter
    RAISE NOTICE '%','  v_Record_ID=' || v_Record_ID ;
    IF(p_Measure_Time_ID IS NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
    ELSE
      RAISE NOTICE '%','--<<MA_GlobalUse_Distribute>>' ;
      v_Record_ID:=p_Measure_Time_ID;
    END IF;
  BEGIN --BODY
    SELECT processed
    INTO v_Processed
    FROM MA_Measure_Time
    WHERE MA_Measure_Time_ID=v_Record_ID;
    IF v_Processed='Y' THEN
      v_ResultStr:='Document is Processed';
      RAISE NOTICE '%','Measure Time is already Processed' ;
      v_Message:='@MeasureTimeProcessed@';
      RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
    END IF;
    IF(NOT FINISH_PROCESS) THEN
      v_ResultStr:='Inserting Measure Values';
      v_Line:=0;
      FOR Cur_CCP IN
        (SELECT c.*
        FROM MA_CCP c,
          MA_Measure_Group g,
          MA_Measure_Time t
        WHERE t.MA_MEASURE_GROUP_ID=g.MA_MEASURE_GROUP_ID
          AND g.MA_CCP_GROUP_ID=c.MA_CCP_GROUP_ID
          AND t.MA_MEASURE_TIME_ID=v_Record_ID
        ORDER BY c.SEQNO
        )
      LOOP
        v_MeasureQty:=0;
        WHILE v_MeasureQty<Cur_CCP.VALUENUMBER
        LOOP
          v_Line:=v_Line + 10;
          SELECT * INTO  v_NextNo FROM Ad_Sequence_Next('MA_Measure_Values', v_Org_ID);
          INSERT
          INTO MA_MEASURE_VALUES
            (
              MA_Measure_Values_ID, AD_Client_ID, AD_Org_ID, Isactive,
              Created, Createdby, Updated, Updatedby,
              MA_Measure_Time_ID, MA_Ccp_ID, Valuetype, SeqNo
            )
            VALUES
            (
              v_NextNo, v_Client_ID, v_Org_ID, 'Y',
              TO_DATE(NOW()), v_User_ID, TO_DATE(NOW()), V_User_ID,
              v_Record_ID, Cur_CCP.MA_Ccp_ID, Cur_CCP.VALUETYPE, v_Line
            )
            ;
          v_MeasureQty:=v_MeasureQty+1;
        END LOOP;
      END LOOP;
      v_ResultStr:='Update Processed Time';
      UPDATE MA_Measure_Time
        SET Processed='Y'
      WHERE MA_Measure_Time_ID=v_Record_ID;
    END IF; --FINISH_PROCESS
    ---- <<FINISH_PROCESS>>
    IF(p_Measure_Time_ID IS NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Finished - ' || v_Message ;
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, v_User_ID, 'N', v_Result, v_Message) ;
    ELSE
      RAISE NOTICE '%','--<<MA_Measure_Time_Explode finished>> ' || v_Message ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  RAISE NOTICE '%',v_ResultStr ;
  IF(p_Measure_Time_ID IS NULL) THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    RAISE NOTICE '%',v_ResultStr ;
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE EXCEPTION '%', SQLERRM;
  END IF;
END ; $$;


ALTER FUNCTION public.ma_measure_time_explode(p_pinstance_id character varying, p_measure_time_id character varying) OWNER TO tad;

--
-- Name: ma_measure_time_explode0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_measure_time_explode0(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
BEGIN
  PERFORM MA_MEASURE_TIME_EXPLODE(p_PInstance_ID, NULL) ;
END ; $$;


ALTER FUNCTION public.ma_measure_time_explode0(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ma_pc_case_create(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_pc_case_create(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  --  Parameter
  v_NextNo VARCHAR(32); --OBTG:VARCHAR2--
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --
    p_Record_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    --  Tests to include
    Cur_PC_Test RECORD;
    --
    v_StartDate TIMESTAMP;
    v_Periodic_Control_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_User_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Result NUMERIC:=1;
  BEGIN
    --  Process Parameters
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      --  Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          i.AD_Org_ID,
          i.AD_Client_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        p_Record_ID:=Cur_Parameter.Record_ID;
        v_User_ID:=Cur_Parameter.AD_User_ID;
        v_Client_ID:=Cur_Parameter.AD_Client_ID;
        v_Org_ID:=Cur_Parameter.AD_Org_ID;
      END LOOP; --  Get Parameter
    ELSE
      RAISE NOTICE '%','--<<MA_WorkRequirement_Close>>' ;
    END IF;
  BEGIN --BODY
    v_ResultStr:='Read Periodic control and date';
    SELECT MA_PERIODIC_CONTROL_ID,
      STARTDATE
    INTO v_Periodic_Control_ID,
      v_StartDate
    FROM MA_PC_CASE
    WHERE MA_PC_Case_ID=p_Record_ID;
    FOR Cur_PC_Test IN
      (SELECT MA_PC_Test_ID,
        days
      FROM MA_PC_Test
      WHERE MA_Periodic_Control_ID=v_Periodic_Control_ID
      )
    LOOP
      SELECT * INTO  v_NextNo FROM AD_Sequence_Next('MA_PC_Value', v_Org_ID);
      INSERT
      INTO MA_PC_Value
        (
          MA_Pc_Value_ID, AD_Client_ID, AD_Org_ID, Isactive,
          Created, Createdby, Updated, Updatedby,
          MA_Pc_Case_ID, MA_Pc_Test_ID, Datadate)
        VALUES
        (
          v_NextNo, v_Client_ID, v_Org_ID, 'Y',
          TO_DATE(NOW()), v_User_ID, TO_DATE(NOW()), v_User_ID,
          p_Record_ID, Cur_PC_Test.MA_PC_Test_ID, ( CASE TO_CHAR(v_StartDate + Cur_PC_Test.days, 'd') WHEN '7' THEN v_StartDate + Cur_PC_Test.days+1 ELSE v_StartDate + Cur_PC_Test.days END
          )
        )
        ;
    END LOOP;
    UPDATE MA_PC_Case  SET launched='Y'  WHERE MA_PC_Case_ID=p_Record_ID;
    ---- <<FINISH_PROCESS>>
    --v_Message := v_Message || '@Created@: ' || v_NoRecords;
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    ELSE
      RAISE NOTICE '%','--<<MA_WorkRequirement_Process finished>> ' || v_Message ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
  --p_Invoice_ID := 0;        --  Error Indicator
  RETURN;
END ; $$;


ALTER FUNCTION public.ma_pc_case_create(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ma_production_cost(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: ma_production_cost_generate(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_production_cost_generate(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SL
 * All portions are Copyright (C) 2001-2007 Openbravo SL
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************/
 -- Logistice
 v_ResultStr      VARCHAR(2000); --OBTG:VARCHAR2--
 v_Result NUMERIC:= 1;
 v_Message        VARCHAR(2000); --OBTG:VARCHAR2--
 p_User VARCHAR(32); --OBTG:VARCHAR2--
 v_Deleted        NUMERIC;
 -- Parameter
--TYPE RECORD IS REFCURSOR;
  Cur_Parameter RECORD;
  Cur_Production RECORD;
  rowcount NUMERIC;
BEGIN

  --  Update AD_PInstance
  RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID;
  v_ResultStr := 'PInstanceNotFound';

  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL);
  BEGIN --BODY
    --  Get Parameters
    v_ResultStr := 'ReadingParameters';
    SELECT AD_User_ID INTO p_User
    FROM AD_PINSTANCE
    WHERE AD_PINSTANCE_ID = p_PInstance_ID;
--    p_User := 0;
/*    FOR Cur_Parameter IN (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date, i.UpdatedBy
                          FROM AD_PINSTANCE i LEFT JOIN AD_PINSTANCE_PARA p ON i.AD_PInstance_ID=p.AD_PInstance_ID
                          WHERE i.AD_PInstance_ID=p_PInstance_ID
                          ORDER BY p.SeqNo) LOOP
        p_User := Cur_Parameter.AD_User_ID;
      END LOOP;  --  Get Parameter*/

    v_ResultStr := 'Deleting previous cost results';
    DELETE FROM M_COSTING
    WHERE ispermanent = 'N'
      AND ismanual = 'N'
      AND costtype = 'AV'
      AND isproduction = 'Y';

     GET DIAGNOSTICS  rowcount:=ROW_COUNT;
      v_Deleted := v_Deleted + rowcount;
      RAISE NOTICE '%','  deleted=' || rowcount;

    v_ResultStr := 'Initializing productions as not calculated';
    UPDATE M_PRODUCTIONLINE
    SET calculated = 'N'
    WHERE m_productionline_id IN (SELECT m_productionline_id
                                  FROM M_PRODUCTION p, M_PRODUCTIONPLAN pp, M_PRODUCTIONLINE pl
                                  WHERE p.m_production_id = pp.m_production_id
                                    AND p.ISSOTRX = 'N'
                                    AND pp.m_productionplan_id = pl.m_productionplan_id
                                    AND pl.productiontype = '+'
                                    AND p.processed = 'Y'
      AND NOT EXISTS (SELECT 1
                      FROM M_COSTING
                      WHERE M_COSTING.m_productionline_id = pl.m_productionline_id));

      FOR Cur_Production IN (SELECT m_production_id
                             FROM M_PRODUCTION
                             WHERE processed = 'Y'
                             AND issotrx = 'N'
                             AND EXISTS (SELECT 1
                                         FROM M_PRODUCTIONLINE pl, M_PRODUCTIONPLAN pp
                                         WHERE pp.m_production_id=M_PRODUCTION.m_production_id
                                           AND pp.m_productionplan_id = pl.m_productionplan_id
                                           AND pl.calculated='N'
                                           AND pp.ma_costcenter_version_id IS NOT NULL)
                             ORDER BY movementdate, m_production_id) LOOP
        SELECT * INTO  v_Message FROM Ma_Production_Cost(Cur_Production.M_Production_ID, p_User);
      END LOOP;

---- <<FINISH_PROCESS>>
      --  Update AD_PInstance
       IF (v_Message IS NOT NULL) THEN
        v_Result := 2;
        v_Message := '@Success@<br>' || v_Message;
      END IF;
      RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message;
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, p_User, 'N', v_Result, v_Message);
      RETURN;

  END; --BODY
EXCEPTION
    WHEN  OTHERS THEN
    -- ROLLBACK;
    v_ResultStr:= '@ERROR=' || SQLERRM;
    RAISE NOTICE '%',v_ResultStr;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr);
    RETURN;
END ; $$;


ALTER FUNCTION public.ma_production_cost_generate(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ma_productionrun_standard(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_productionrun_standard(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_result NUMERIC:=1;
  --  Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --
    v_Record_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_User_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_PlanOrg_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_WRPhase_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_DoneQuantity NUMERIC;
    v_Process_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Toolset_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_ToolsetUsed_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_ProductionLine_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_GlobalUse_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Processed CHAR;
    v_NoQty CHAR;
    v_GlobalUse CHAR;
    v_Qty NUMERIC;
    v_QtyAcumulated NUMERIC;
    v_QtyOrder NUMERIC;
    v_Count NUMERIC;
    v_Product_old VARCHAR(32); --OBTG:VARCHAR2--
    v_UOM_old VARCHAR(32); --OBTG:VARCHAR2--
    v_Product_UOM_old VARCHAR(32); --OBTG:VARCHAR2--
    v_Production_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_QtyStorage NUMERIC:=0;
    v_Line NUMERIC;
    v_PlanLine NUMERIC;
    v_CostCenterCost NUMERIC;
    v_CostCenterUse NUMERIC;
    v_Calculated CHAR(1);
    v_ByDefault CHAR(1);
    --  Toolset Types to process
    Cur_ToolsetProcess RECORD;
    --  WRPhase products created
    Cur_WRPProduct RECORD;
    --  WRPhase products useed
    Cur_WRPUsed RECORD;
    --  Stocked Products
    DECLARE Cur_Stock CURSOR (v_Product_old VARCHAR, v_UOM_old VARCHAR, v_Product_UOM_old VARCHAR, v_Org_old VARCHAR, v_Production_Id VARCHAR, v_Line NUMERIC)  FOR
      SELECT T.M_PRODUCT_ID, T.C_UOM_ID, T.M_LOCATOR_ID, T.M_ATTRIBUTESETINSTANCE_ID,
        T.M_PRODUCT_UOM_ID, COALESCE(T.QtyOnHand, 0) AS Qty, T.QtyOrderOnHand AS QtyOrder,
        U.STDPRECISION, L.PRIORITYNO, T.UPDATED AS lastupdated
      FROM M_LOCATOR L, M_WAREHOUSE W, M_STORAGE_DETAIL T LEFT JOIN M_PRODUCT_UOM PU ON T.M_PRODUCT_UOM_ID = PU.M_PRODUCT_UOM_ID
                         LEFT JOIN C_UOM U ON PU.C_UOM_ID = U.C_UOM_ID
      WHERE T.M_PRODUCT_ID=v_Product_old
        AND T.C_UOM_ID=v_UOM_old
        AND (v_Product_UOM_old IS NULL OR T.M_Product_UOM_id = v_Product_UOM_old)
        AND T.M_LOCATOR_ID=L.M_LOCATOR_ID
        AND L.M_WAREHOUSE_ID = W.M_WAREHOUSE_ID
        AND AD_ISORGINCLUDED(v_Org_old,W.AD_ORG_ID,W.AD_CLIENT_ID)<>-1
        AND COALESCE(T.QtyOnHand, 0)>0
      UNION
      SELECT M_PRODUCTIONLINE.M_PRODUCT_ID, m_productionline.c_uom_id, m_productionline.m_locator_id, m_productionline.m_attributesetinstance_id,
        m_productionline.m_product_uom_id, m_productionline.movementqty as qty, m_productionline.quantityorder as qtyorder,
        c_uom.stdprecision, -1 as priorityno, m_productionline.updated as lastupdated
      FROM M_PRODUCTIONLINE, M_PRODUCTIONPLAN, c_uom
      WHERE M_PRODUCTIONLINE.M_PRODUCTIONPLAN_ID = M_PRODUCTIONPLAN.M_PRODUCTIONPLAN_ID
        AND M_PRODUCTIONLINE.C_UOM_ID = C_UOM.C_UOM_ID
        AND M_PRODUCTION_ID = v_Production_Id     
        AND M_PRODUCTIONPLAN.line < v_Line
        AND M_PRODUCTIONLINE.M_PRODUCT_ID = v_product_old
        AND M_PRODUCTIONLINE.C_UOM_ID = v_UOM_Old
        AND (v_Product_UOM_old IS NULL OR M_PRODUCTIONLINE.M_Product_UOM_id = v_Product_UOM_old)
      ORDER BY PRIORITYNO, LASTUPDATED;
      v_storage RECORD; --OBTG:CUR_STOCK--
      NEXT_PRODUCT BOOLEAN:=false;
      Cur_Stock_ISOPEN BOOLEAN:=false;
    BEGIN
      --  Process Parameters
      IF(p_PInstance_ID IS NOT NULL) THEN
        --  Update AD_PInstance
        RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
        v_ResultStr:='PInstanceNotFound';
        PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
        --  Get Parameters
        v_ResultStr:='ReadingParameters';
        FOR Cur_Parameter IN
          (SELECT i.Record_ID, i.AD_User_ID, i.AD_Org_ID, i.AD_Client_ID, p.ParameterName,
            p.P_String, p.P_Number, p.P_Date
          FROM AD_PInstance i LEFT JOIN AD_PInstance_Para p ON i.AD_PInstance_ID=p.AD_PInstance_ID
          WHERE i.AD_PInstance_ID=p_PInstance_ID
          ORDER BY p.SeqNo )
        LOOP
          v_Record_ID:=Cur_Parameter.Record_ID;
          v_User_ID:=Cur_Parameter.AD_User_ID;
          v_Client_ID:=Cur_Parameter.AD_Client_ID;
        END LOOP; --  Get Parameter
      ELSE
        RAISE NOTICE '%','--<<MA_ProductionRun_Standard>>' ;
      END IF;
    BEGIN --BODY
      v_ResultStr:='Getting DoneQuantity and process_ID';
      SELECT M_ProductionPlan.AD_Org_ID, M_ProductionPlan.MA_WRPhase_ID,
             M_ProductionPlan.ProductionQty, M_ProductionPlan.Processed,
             COALESCE(MA_CostCenter.CALCULATED, 'N') AS CALCULATED, COALESCE(MA_CostCenter.BYDEFAULT, 'N') AS BYDEFAULT,
             M_ProductionPlan.line, M_ProductionPlan.M_Production_ID
      INTO v_PlanOrg_ID, v_WRPhase_ID, v_DoneQuantity, v_Processed,
           v_Calculated, v_ByDefault, v_PlanLine, v_Production_ID
      FROM M_ProductionPlan LEFT JOIN MA_CostCenter_Version ON M_ProductionPlan.MA_CostCenter_Version_ID = MA_CostCenter_Version.MA_CostCenter_Version_ID
                            LEFT JOIN MA_CostCenter ON MA_CostCenter_version.MA_CostCenter_ID = MA_CostCenter.MA_CostCenter_ID
      WHERE M_ProductionPlan_ID=v_Record_ID;
      SELECT MA_Process_ID, NoQty INTO v_Process_ID, v_NoQty
      FROM MA_WRPhase
      WHERE MA_WRPhase_ID=v_WRPhase_ID;
      IF v_Processed='Y' THEN
        v_ResultStr:='Production Run is Processed';
        RAISE NOTICE '%','Production Run is already processed' ;
        v_Message:='@ProductionRunProcessed@';
        RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
      END IF;
        --Insert toolsets if necessary
        v_ResultStr:='ToolsetProcess Processing';
        FOR Cur_ToolsetProcess IN
          (SELECT MA_Toolset_Type_ID, UseCoef
          FROM MA_ToolsetProcess
          WHERE MA_Process_ID=v_Process_ID)
        LOOP
          DECLARE
            Cur_MAToolSet RECORD;
          BEGIN
            --It's taken the toolset with higher number of uses
            FOR Cur_MAToolSet IN
              (SELECT MA_Toolset_ID AS Toolset_ID
              FROM MA_Toolset
              WHERE MA_Toolset_Type_ID=Cur_ToolsetProcess.MA_Toolset_Type_ID
                AND Discarded='N'
              ORDER BY NumberUses DESC
              )
            LOOP
              v_Toolset_ID:=Cur_MAToolSet.Toolset_ID;
              EXIT;
            END LOOP;
          END;
          SELECT * INTO  v_ToolsetUsed_ID FROM Ad_Sequence_Next('MA_ToolsetUsed', v_Client_ID) ;
          INSERT
          INTO MA_ToolsetUsed
            (
              MA_ToolsetUsed_ID, AD_Client_ID, AD_Org_ID, Created,
              Createdby, Isactive, M_ProductionPlan_ID, MA_Toolset_ID,
              Updated, Updatedby, Used
            )
            VALUES
            (
              v_ToolsetUsed_ID, v_Client_ID, v_PlanOrg_ID, TO_DATE(NOW()),
              v_User_ID, 'Y', v_Record_ID, v_Toolset_ID,
              TO_DATE(NOW()), v_User_ID, Cur_ToolsetProcess.UseCoef*v_DoneQuantity
            );
        END LOOP;
        --Insert Products
        v_Line:=0;
        v_ResultStr:='ProdRunProduct P+ Processing';
        FOR Cur_WRPProduct IN
          (SELECT wrpp.*, COALESCE(po.M_Locator_ID, p.M_Locator_ID) AS M_Locator_ID, p.name as pname
          FROM M_Product p, MA_WRPhaseProduct wrpp
            left join M_Product_Org po on wrpp.M_Product_ID = po.M_Product_ID
                                    AND po.AD_Org_ID = v_PlanOrg_ID
          WHERE MA_WRPhase_ID=v_WRPhase_ID
            AND ProductionType='+'
            AND wrpp.M_PRODUCT_ID=p.M_Product_ID
          )
        LOOP
	  IF Cur_WRPProduct.M_Locator_ID IS NULL THEN
	    v_ResultStr:='There are produts without Locator';
            v_Message:='@ILS_PRODUCT_NAME@ ' ||  Cur_WRPProduct.pname || ' @ProductLocatorNeeded@';
            RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
          END IF;
          SELECT * INTO  v_ProductionLine_ID FROM Ad_Sequence_Next('M_ProductionLine', v_Client_ID) ;
          v_Line:=v_Line + 10;
          INSERT
          INTO M_ProductionLine
            (
              M_ProductionLine_ID, AD_Client_ID, AD_Org_ID, Created,
              Createdby, Isactive, M_ProductionPlan_ID, M_Product_ID,
              Productiontype, MovementQty, Updated, Updatedby,
              C_UOM_ID, M_Locator_ID, Line
            )
            VALUES
            (
              v_ProductionLine_ID, v_Client_ID, v_PlanOrg_ID, TO_DATE(NOW()),
              v_User_ID, 'Y', v_Record_ID, Cur_WRPProduct.M_Product_ID,
              Cur_WRPProduct.ProductionType, (CASE v_NoQty WHEN 'Y' THEN 0 ELSE Cur_WRPProduct.MovementQty*v_DoneQuantity END), TO_DATE(NOW()), v_User_ID,
              Cur_WRPProduct.C_UOM_ID,
              COALESCE(Cur_WRPProduct.M_Locator_ID, (SELECT MIN(M_LOCATOR_ID)
                                                    FROM M_LOCATOR L, M_WAREHOUSE W
                                                    WHERE L.M_WAREHOUSE_ID = W.M_WAREHOUSE_ID
                                                    AND W.AD_ORG_ID = v_PlanOrg_ID)),
              v_Line
            )
            ;
          --v_Line:=v_Line + 10;
        END LOOP;
        -- Insert production plan for used products P-
        SELECT wrp.GROUPUSE INTO v_GlobalUse
        FROM MA_WRPhase wrp, M_ProductionPlan pp
        WHERE wrp.MA_WRPHASE_ID=pp.MA_WRPHASE_ID
          AND pp.M_PRODUCTIONPLAN_ID=v_Record_ID;
        FOR Cur_WRPUsed IN
          (SELECT wrpp.*, p.IsStocked, pp.AD_Client_ID AS Client_ID, pp.AD_Org_ID AS Org_ID,
            p.M_LOCATOR_ID, pp.M_PRODUCTION_ID, p.Name as pname
          FROM MA_WRPhaseProduct wrpp, M_Product p, M_ProductionPlan pp
          WHERE pp.M_PRODUCTIONPLAN_ID=v_Record_ID
            AND pp.MA_WRPHASE_ID=wrpp.MA_WRPHASE_ID
            AND p.M_PRODUCT_ID=wrpp.M_PRODUCT_ID
            AND wrpp.PRODUCTIONTYPE='-'
          )
        LOOP
          v_ResultStr:='CreatingLine Products';
          IF(Cur_WRPUsed.IsStocked='Y') THEN
            v_QtyAcumulated:=0;
            IF(NOT Cur_Stock_ISOPEN) OR(v_Product_old<>Cur_WRPUsed.M_Product_ID  OR v_UOM_old<>Cur_WRPUsed.C_UOM_ID) THEN
              v_Product_old:=Cur_WRPUsed.M_Product_ID;
              v_UOM_old:=Cur_WRPUsed.C_UOM_ID;
              v_Product_UOM_old := Cur_WRPUsed.M_Product_UOM_ID;
              IF(Cur_Stock_ISOPEN) THEN
                CLOSE Cur_Stock;
                Cur_Stock_ISOPEN:=false;
              END IF;
              OPEN CUR_STOCK(v_Product_old, v_UOM_old, v_Product_UOM_old, v_PlanOrg_ID, v_Production_ID, v_PlanLine) ;
              Cur_Stock_ISOPEN:=true;
              FETCH CUR_STOCK INTO v_storage;
              IF  NOT FOUND  THEN --OBTG:CUR_STOCK--
                NEXT_PRODUCT:=true;
              END IF;
              v_QtyStorage:=v_storage.Qty;
            END IF;
            IF(NOT NEXT_PRODUCT) THEN
              LOOP
                v_Qty:=LEAST(v_QtyStorage, v_DoneQuantity*Cur_WRPUsed.MovementQty - v_QtyAcumulated) ;
                v_QtyStorage:=v_QtyStorage - v_Qty;
                v_QtyAcumulated:=v_QtyAcumulated + v_Qty;
                v_QtyOrder:=ROUND(v_storage.QtyOrder*(v_Qty/v_storage.Qty),v_storage.stdprecision) ;
                  IF(v_GlobalUse='Y') THEN
                    SELECT count(*)
                    INTO v_Count
                    FROM MA_GlobalUse
                    WHERE M_Production_ID=Cur_WRPUsed.M_Production_ID
                      AND M_Product_ID=Cur_WRPUsed.M_Product_ID;
                    IF(v_Count=0) THEN
                      SELECT * INTO  v_GlobalUse_ID FROM AD_Sequence_Next('MA_GlobalUse', Cur_WRPUsed.Client_ID) ;
                      INSERT
                      INTO MA_GlobalUse
                        (
                          MA_GlobalUse_ID, M_Production_ID, AD_Client_ID, AD_Org_ID,
                          IsActive, Created, CreatedBy, Updated,
                          UpdatedBy, M_Product_ID, C_UOM_ID, MovementQty,
                          M_Locator_ID, M_AttributeSetInstance_ID, M_Product_UOM_ID,
                          QuantityOrder
                        )
                        VALUES
                        (
                          v_GlobalUse_ID, Cur_WRPUsed.M_Production_ID, Cur_WRPUsed.Client_ID, Cur_WRPUsed.Org_ID,
                           'Y', TO_DATE(NOW()), '0', TO_DATE(NOW()),
                          '0', Cur_WRPUsed.M_Product_ID, Cur_WRPUsed.C_UOM_ID, 0,
                          v_storage.M_Locator_ID, v_storage.M_AttributeSetInstance_ID, v_storage.M_Product_UOM_ID,
                          (CASE
                             WHEN v_QtyOrder is null THEN null
                             ELSE 0
                           END
                          )
                        );
                    END IF;
                    EXIT;
                  ELSE
                    v_Line := v_Line + 10;
                    SELECT * INTO  v_ProductionLine_ID FROM AD_Sequence_Next('M_ProductionLine', Cur_WRPUsed.Client_ID) ;
                    INSERT
                    INTO M_ProductionLine
                      (
                        M_ProductionLine_ID, M_ProductionPlan_ID, Line, AD_Client_ID,
                        AD_Org_ID, IsActive, Created, CreatedBy,
                        Updated, UpdatedBy, M_Product_ID, C_UOM_ID,
                        MovementQty, ProductionType, M_Locator_ID, M_AttributeSetInstance_ID,
                        M_Product_UOM_ID, QuantityOrder
                      )
                      VALUES
                      (
                        v_ProductionLine_ID, v_Record_ID, v_Line, Cur_WRPUsed.Client_ID,
                        Cur_WRPUsed.Org_ID, 'Y', TO_DATE(NOW()), 0,
                        TO_DATE(NOW()), 0, Cur_WRPUsed.M_Product_ID, Cur_WRPUsed.C_UOM_ID,
                        (CASE v_NoQty WHEN 'Y' THEN 0 ELSE v_Qty END), '-', v_storage.M_Locator_ID, v_storage.M_AttributeSetInstance_ID,
                        v_storage.M_Product_UOM_ID,
                        (CASE v_NoQty
                          WHEN 'Y' THEN (CASE
                                           WHEN v_QtyOrder IS null THEN null
                                           ELSE 0
                                         END)
                          ELSE v_QtyOrder
                         END)
                      )
                      ;
                    IF(v_QtyAcumulated>=v_DoneQuantity*Cur_WRPUsed.MovementQty) THEN
                      EXIT;
                    END IF;
                    v_QtyStorage:=0;
                    v_ResultStr:='FetchingData';
                    FETCH CUR_STOCK INTO v_storage;
                    EXIT WHEN  NOT FOUND ; --OBTG:CUR_STOCK--
                    v_QtyStorage:=v_storage.Qty;
                  END IF;
              END LOOP;
            END IF; --NEXT_PRODUCT
            IF (v_QtyAcumulated < v_DoneQuantity*Cur_WRPUsed.MovementQty) THEN
              v_Message := '@NotEnoughStocked@: ' || Cur_WRPUsed.pname;
            RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
            END IF;
          ELSE
            IF Cur_WRPUsed.M_Locator_ID IS NULL THEN
              v_Message:='El producto ' || Cur_WRPUsed.pname || ' no tiene almacen definido.';
            RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
            END IF;
          IF(v_GlobalUse='Y') THEN
            SELECT count(*)
                INTO v_Count
                FROM MA_GlobalUse
                WHERE M_Production_ID=Cur_WRPUsed.M_Production_ID
                  AND M_Product_ID=Cur_WRPUsed.M_Product_ID;
                IF(v_Count=0) THEN
                  SELECT * INTO  v_GlobalUse_ID FROM AD_Sequence_Next('MA_GlobalUse', Cur_WRPUsed.Client_ID) ;
                  INSERT
                  INTO MA_GlobalUse
                    (
                      MA_GlobalUse_ID, M_Production_ID, AD_Client_ID, AD_Org_ID,
                      IsActive, Created, CreatedBy, Updated,
                      UpdatedBy, M_Product_ID, C_UOM_ID, MovementQty,
                      M_Locator_ID
                    )
                    VALUES
                    (
                      v_GlobalUse_ID, Cur_WRPUsed.M_Production_ID, Cur_WRPUsed.Client_ID, Cur_WRPUsed.Org_ID,
                       'Y', TO_DATE(NOW()), '0', TO_DATE(NOW()),
                      '0', Cur_WRPUsed.M_Product_ID, Cur_WRPUsed.C_UOM_ID, 0,
                      Cur_WRPUsed.M_Locator_ID
                    )
                    ;
                END IF;
              ELSE
                v_Line := v_Line + 10;
                SELECT * INTO  v_ProductionLine_ID FROM AD_Sequence_Next('M_ProductionLine', Cur_WRPUsed.Client_ID) ;
                INSERT
                INTO M_ProductionLine
                  (
                    M_ProductionLine_ID, M_ProductionPlan_ID, Line, AD_Client_ID,
                    AD_Org_ID, IsActive, Created, CreatedBy,
                    Updated, UpdatedBy, M_Product_ID, MovementQty,
                    ProductionType, C_UOM_ID, M_Locator_ID
                  )
                  VALUES
                  (
                    v_ProductionLine_ID, v_Record_ID, v_Line, Cur_WRPUsed.Client_ID,
                    Cur_WRPUsed.Org_ID, 'Y', TO_DATE(NOW()), '0',
                    TO_DATE(NOW()), '0', Cur_WRPUsed.M_Product_ID,( CASE v_NoQty WHEN 'Y' THEN 0 ELSE v_DoneQuantity*Cur_WRPUsed.MovementQty END),
                    '-', Cur_WRPUsed.C_UOM_ID, Cur_WRPUsed.M_Locator_ID
                  )
                  ;
              END IF;
          END IF;
            ---- <<NEXT_PRODUCT>>
            NEXT_PRODUCT:=false;
            --v_Line:=v_Line + 10;
        END LOOP; --Used Products
        --Insert salary categories.

        INSERT INTO MA_PL_EMPLOYEE
        (MA_PL_EMPLOYEE_ID,
         CREATED, CREATEDBY, UPDATED, UPDATEDBY, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE,
         M_PRODUCTIONPLAN_ID, C_SALARY_CATEGORY_ID, QUANTITY)
        SELECT AD_Get_Next_Sequence('MA_PL_Employee', v_Client_ID),
         TO_DATE(NOW()), v_User_ID, TO_DATE(NOW()), v_User_ID, v_Client_ID, v_PlanOrg_ID, 'Y',
         v_Record_ID, C_Salary_Category_ID, Quantity
        FROM MA_COSTCENTER_EMPLOYEE cce, M_ProductionPlan pp
        WHERE cce.MA_Costcenter_version_ID = pp.MA_COstCenter_Version_ID
          AND pp.M_ProductionPlan_ID = v_Record_ID
          AND cce.IsActive = 'Y';

        --Insert machines.

        INSERT INTO MA_PL_MACHINE
        (MA_PL_MACHINE_ID,
         CREATED,CREATEDBY,UPDATED,UPDATEDBY,AD_CLIENT_ID,AD_ORG_ID,ISACTIVE,
         M_PRODUCTIONPLAN_ID,MA_MACHINE_ID,USE)
        SELECT AD_Get_Next_Sequence('MA_PL_Machine', v_Client_ID),
         TO_DATE(NOW()), v_User_ID, TO_DATE(NOW()), v_User_ID, v_Client_ID, v_PlanOrg_ID, 'Y',
         v_Record_ID, MA_Machine_ID, Use
        FROM MA_COSTCENTER_MACHINE ccm, M_ProductionPlan pp
        WHERE ccm.MA_Costcenter_version_ID = pp.MA_CostCenter_Version_ID
          AND pp.M_ProductionPlan_ID = v_Record_ID
          AND ccm.IsActive = 'Y';

        --Insert indirect costs

        INSERT INTO MA_PL_IC
        (MA_PL_IC_ID,
         CREATED,CREATEDBY,UPDATED,UPDATEDBY,AD_CLIENT_ID,AD_ORG_ID,ISACTIVE,
         M_PRODUCTIONPLAN_ID,MA_INDIRECT_COST_ID)
        SELECT AD_Get_Next_Sequence('MA_PL_IC', v_Client_ID),
         TO_DATE(NOW()), v_User_ID, TO_DATE(NOW()), v_User_ID, v_Client_ID, v_PlanOrg_ID, 'Y',
         v_Record_ID, MA_Indirect_Cost_ID
        FROM MA_COSTCENTER_IC ccic, M_ProductionPlan pp
        WHERE ccic.MA_Costcenter_version_ID = pp.MA_CostCenter_Version_ID
          AND pp.M_ProductionPlan_ID = v_Record_ID
          AND ccic.IsActive = 'Y';

        IF (v_Calculated = 'Y') THEN
          IF (v_ByDefault = 'N') THEN
            SELECT TO_NUMBER((M_Production.ENDTIME - M_Production.STARTTIME)*24) INTO v_CostCenterUse
            FROM M_Production, M_ProductionPlan
            WHERE M_Production.M_Production_ID = M_ProductionPlan.M_PRODUCTION_ID
              AND M_ProductionPlan.M_PRODUCTIONPLAN_ID = v_Record_ID;
          ELSE
            SELECT M_ProductionPlan.PRODUCTIONQTY * MA_WRPhase.COSTCENTERUSE INTO v_CostCenterUse
            FROM M_PRoductionPlan, MA_WRPhase
            WHERE M_ProductionPlan.M_PRODUCTIONPLAN_ID = v_Record_ID
              AND M_ProductionPlan.MA_WRPHASE_ID = MA_WRPhase.MA_WRPHASE_ID;
          END IF;
          UPDATE M_ProductionPlan
          SET MA_CostCenterUse = v_CostCenterUse
          WHERE M_ProductionPlan_ID = v_Record_ID;
        END IF;


        IF(CUR_STOCK_ISOPEN) THEN
          CLOSE CUR_STOCK;
          CUR_STOCK_ISOPEN:=false;
        END IF;

        UPDATE M_PRODUCTIONPLAN
          SET Processed='Y'
        WHERE M_ProductionPlan_ID=v_Record_ID;
      ---- <<FINISH_PROCESS>>
      v_ResultStr:='Ending';
      --v_Message := v_Message || '@Created@: ' || v_NoRecords;
      IF(p_PInstance_ID IS NOT NULL) THEN
        --  Update AD_PInstance
        RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
        PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
      ELSE
        RAISE NOTICE '%','--<<MA_ProductionRun_Standard finished>> ' || v_Message ;
      END IF;
      RETURN;
    END; --BODY
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE '%',v_ResultStr ;
    v_ResultStr:= '@ERROR=' || SQLERRM;
    RAISE NOTICE '%',v_ResultStr ;
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END ; $$;


ALTER FUNCTION public.ma_productionrun_standard(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ma_standard_cost(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

--
-- Name: ma_workeffort_validate(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_workeffort_validate(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    Cur_Toolset RECORD;
    Cur_PP RECORD;
    --
    v_Record_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_User_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_count NUMERIC;
--    v_count2 NUMBER;
--    v_Production_ID VARCHAR2(32);
    v_ProductionDate TIMESTAMP;
--    v_Name NVARCHAR2(60) ;
    -- p_ppline            NUMBER;
    -- p_plline          NUMBER;
--    v_ProductionPlan_ID VARCHAR2(32);
--    v_ProductionLine_ID VARCHAR2(32);
--    v_Quantity NUMBER;
--    v_UOM_ID VARCHAR2(32);
--    v_PInstance NUMBER;
--    v_doneQty NUMBER;
--    v_needQty NUMBER;
    v_QtyOnHand NUMERIC;
    p_Processed CHAR;
    v_ProductQty NUMERIC;
    v_NextNo VARCHAR(32); --OBTG:VARCHAR2--
    Quantity NUMERIC:=99999; -- unlimited
    v_Result NUMERIC:=1;

    CUR_PL_Post RECORD;
    Cur_ProductionPlan RECORD;

    FINISH_PROCESS BOOLEAN:=FALSE;
    v_is_included NUMERIC:=0;
    v_available_period NUMERIC:=0;
    v_is_ready AD_Org.IsReady%TYPE;
    v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
    v_isacctle AD_OrgType.IsAcctLegalEntity%TYPE;
    v_org_bule_id AD_Org.AD_Org_ID%TYPE;
    v_AD_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
  BEGIN
    -- Process Parameters
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID, i.AD_User_ID, i.AD_Org_ID, i.AD_Client_ID, p.ParameterName,
          p.P_String, p.P_Number, p.P_Date
        FROM AD_PINSTANCE i
        LEFT JOIN AD_PINSTANCE_PARA p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo) LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_User_ID:=Cur_Parameter.AD_User_ID;
        v_Org_ID:=Cur_Parameter.AD_Org_ID;
        v_Client_ID:=Cur_Parameter.AD_Client_ID;
      END LOOP; -- Get Parameter
    ELSE
      RAISE NOTICE '%','--<<MA_WorkEffort_Validate>>' ;
    END IF;
  BEGIN --BODY
    SELECT Processed, MOVEMENTDATE, AD_ORG_ID
    INTO p_Processed, v_ProductionDate, v_AD_Org_ID
    FROM M_PRODUCTION
    WHERE M_Production_ID=v_Record_ID;
    --Check if is has been already processed
    IF(p_Processed='Y') THEN
      v_ResultStr:='Work Effort is already validated';
      v_Message:='@WorkEffortValidated@';
      RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
    END IF;
    IF(NOT FINISH_PROCESS) THEN
      -- Check that there are some parts of the job and that theay are processed
      
      -- Check the header belongs to a organization where transactions are posible and ready to use
      SELECT AD_Org.IsReady, Ad_OrgType.IsTransactionsAllowed
      INTO v_is_ready, v_is_tr_allow
      FROM M_PRODUCTION, AD_Org, AD_OrgType
      WHERE AD_Org.AD_Org_ID=M_PRODUCTION.AD_Org_ID
      AND AD_Org.AD_OrgType_ID=AD_OrgType.AD_OrgType_ID
      AND M_PRODUCTION.M_PRODUCTION_ID=v_Record_ID;
      IF (v_is_ready='N') THEN
        RAISE EXCEPTION '%', '@OrgHeaderNotReady@'; --OBTG:-20000--
      END IF;
      IF (v_is_tr_allow='N') THEN
        RAISE EXCEPTION '%', '@OrgHeaderNotTransAllowed@'; --OBTG:-20000--
      END IF;
      
      SELECT AD_ORG_CHK_DOCUMENTS('M_PRODUCTION', 'M_PRODUCTIONPLAN', v_Record_ID, 'M_PRODUCTION_ID', 'M_PRODUCTION_ID') INTO v_is_included FROM dual;
      IF (v_is_included=-1) THEN
        RAISE EXCEPTION '%', '@LinesAndHeaderDifferentLEorBU@'; --OBTG:-20000--
      END IF;
      FOR CUR_PP IN
        (SELECT M_PRODUCTIONPLAN_ID
         FROM M_PRODUCTIONPLAN
         WHERE M_PRODUCTION_ID = v_Record_ID) LOOP
        SELECT AD_ORG_CHK_DOCUMENTS('M_PRODUCTIONPLAN', 'M_PRODUCTIONLINE', CUR_PP.M_PRODUCTIONPLAN_ID, 'M_PRODUCTIONPLAN_ID', 'M_PRODUCTIONPLAN_ID') INTO v_is_included FROM dual;
        IF (v_is_included=-1) THEN
          RAISE EXCEPTION '%', '@LinesAndHeaderDifferentLEorBU@'; --OBTG:-20000--
        END IF;
      END LOOP;      
      
      -- Check the period control is opened (only if it is legal entity with accounting)
      -- Gets the BU or LE of the document
      SELECT AD_GET_DOC_LE_BU('M_PRODUCTION', v_Record_ID, 'M_PRODUCTION_ID', 'LE')
      INTO v_org_bule_id
      FROM DUAL;
      
      SELECT AD_OrgType.IsAcctLegalEntity
      INTO v_isacctle
      FROM AD_OrgType, AD_Org
      WHERE AD_Org.AD_OrgType_ID = AD_OrgType.AD_OrgType_ID
      AND AD_Org.AD_Org_ID=v_org_bule_id;
      
      IF (v_isacctle='Y') THEN
        SELECT C_CHK_OPEN_PERIOD(v_AD_Org_ID, v_ProductionDate, 'MMP', NULL) 
        INTO v_available_period
        FROM DUAL;
        
        IF (v_available_period<>1) THEN
          RAISE EXCEPTION '%', '@PeriodNotAvailable@'; --OBTG:-20000--
        END IF;
      END IF;
      
      
      v_ResultStr:='Checking ProductionRun';
      SELECT COUNT(*)
      INTO v_count
      FROM M_PRODUCTIONPLAN
      WHERE M_Production_ID=v_Record_ID;
      IF(v_count=0) THEN
        v_ResultStr := 'There are not Production Runs to validate';
        v_Message:='@NoProductionRun@';
        RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      SELECT COUNT(*)
      INTO v_count
      FROM M_PRODUCTIONPLAN pp
      WHERE M_Production_ID=v_Record_ID
        AND PROCESSED='N';
      IF(v_count<>0) THEN
        v_Message:='@ProducionRunNoProcessed@';
        RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
        FINISH_PROCESS:=TRUE;
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      --Check if there's any global use production phase.
      SELECT COUNT(*)
      INTO v_count
      FROM M_PRODUCTIONPLAN pp,
        MA_WRPHASE wp
      WHERE pp.MA_WRPHASE_ID=wp.MA_WRPHASE_ID
        AND pp.M_PRODUCTION_ID=v_Record_ID
        AND wp.GROUPUSE='Y';
      IF(v_count<>0) THEN
        v_ResultStr:='Distributing product of global use';
        PERFORM MA_GLOBALUSE_DISTRIBUTE(v_Client_ID, v_Org_ID, v_User_ID, v_Record_ID) ;
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      --Check if all the ProductionLine have a warehouse
      v_ResultStr:='Checking Locators';
      SELECT COUNT(*)
      INTO v_count
      FROM M_PRODUCTIONLINE l,
        M_PRODUCTIONPLAN p
      WHERE l.M_ProductionPlan_ID=p.M_ProductionPlan_ID
        AND p.M_Production_ID=v_Record_ID
        AND l.M_Locator_ID IS NULL;
      IF(v_count<>0) THEN
        v_ResultStr := 'There are produts without Locator';
        v_Message:='@NeedLocator@';
        RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
        FINISH_PROCESS:=TRUE;
      END IF;
    END IF; --FINISH_PROCESS
    --Check if exist any product in a productionplan with the same locator and productiontype P+ and P-
    IF(NOT FINISH_PROCESS) THEN
      SELECT COUNT(*)
      INTO v_count
      FROM M_PRODUCTIONLINE pl, M_PRODUCTIONPLAN pp
      WHERE pl.PRODUCTIONTYPE='+'
        AND pl.M_PRODUCTIONPLAN_ID = pp.M_PRODUCTIONPLAN_ID
        AND pp.M_PRODUCTION_ID = v_Record_ID
        AND EXISTS
        (SELECT 1
        FROM M_PRODUCTIONLINE
        WHERE M_PRODUCTIONPLAN_ID=pl.M_PRODUCTIONPLAN_ID
          AND M_PRODUCT_ID=pl.M_PRODUCT_ID
          AND PRODUCTIONTYPE='-'
        )
        ;
      IF(v_count<>0) THEN
        -- ROLLBACK;
        v_ResultStr := 'Same product in a production plan as P+ and P-';
        v_Message:='@P+AndP-InSamePlan@';
        RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
        FINISH_PROCESS:=TRUE;
      END IF;
    END IF; --FINISH_PROCESS
    IF (NOT FINISH_PROCESS) THEN
      SELECT COUNT(*)
      INTO v_Count
      FROM M_PRODUCTIONPLAN PP, M_PRODUCTIONLINE PL, M_PRODUCT P
      WHERE PL.M_PRODUCT_ID=P.M_PRODUCT_ID
        AND P.M_ATTRIBUTESET_ID IS NOT NULL
        AND P.M_ATTRIBUTESETINSTANCE_ID IS NULL
        AND COALESCE(PL.M_ATTRIBUTESETINSTANCE_ID, '0') = '0'
        AND PL.M_ProductionPlan_ID=pp.M_ProductionPlan_ID
        AND pp.M_Production_ID=v_Record_ID;
      IF v_Count<>0 THEN
        v_Message:='@LinesWithoutAttributeSet@';
        RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
        FINISH_PROCESS:=TRUE;
      END IF;
    END IF;
    -- All Production Lines
    IF(NOT FINISH_PROCESS) THEN
      FOR CUR_PL_Post IN
        (SELECT pl.M_ProductionLine_ID, pl.AD_Client_ID, pl.AD_Org_ID, p.MovementDate,
          pl.M_Product_ID, pl.M_AttributeSetInstance_ID, pl.MovementQty, pl.M_Locator_ID,
          pl.M_Product_UOM_ID, pl.QuantityOrder, pl.C_UOM_ID, pl.LINE, pl.PRODUCTIONTYPE,
          pr.ISSTOCKED, pr.PRODUCTTYPE
        FROM M_PRODUCTION p, M_PRODUCTIONLINE pl, M_PRODUCTIONPLAN pp, M_PRODUCT pr
        WHERE p.M_Production_ID=pp.M_Production_ID
          AND pp.M_ProductionPlan_ID=pl.M_ProductionPlan_ID
          AND pp.M_Production_ID=v_Record_ID
          AND pl.M_PRODUCT_ID=pr.M_PRODUCT_ID
        ORDER BY pp.Line, pl.Line)
      LOOP
        -- M_ProductionLine_ID, AD_Client_ID, AD_Org_ID, MovementDate, M_Product_ID, MovementQty, M_Locator_ID
        -- DBMS_OUTPUT.PUT_LINE('ProductionLine=' || CUR_PL_Post.M_ProductionLine_ID);
        -- DBMS_OUTPUT.PUT_LINE('  Qty=' || CUR_PL_Post.MovementQty || ', OnHand=' || M_BOM_Qty_OnHand(CUR_PL_Post.M_Product_ID, NULL, CUR_PL_Post.M_Locator_ID));
        -- Check Stock levels for reductions
        -- Check, if product exists and if it is stocked
        -- Unlimited capacity if no item
        IF(CUR_PL_Post.ProductType<>'I' OR CUR_PL_Post.IsStocked='N') THEN
          v_QtyOnHand:=Quantity;
          -- Stocked item
        ELSIF(CUR_PL_Post.IsStocked='Y') THEN
          -- Get ProductQty
          SELECT COALESCE(SUM(QtyOnHand), 0)
          INTO v_ProductQty
          FROM M_STORAGE_DETAIL s
          WHERE M_Product_ID=CUR_PL_Post.M_Product_ID
            AND EXISTS
            (SELECT * FROM M_LOCATOR l WHERE s.M_Locator_ID=l.M_Locator_ID)
            ;
          --DBMS_OUTPUT.PUT_LINE('Qty=' || ProductQty);
          v_QtyOnHand:=v_ProductQty;
        END IF;
        IF(CUR_PL_Post.PRODUCTIONTYPE='-' AND CUR_PL_Post.IsStocked<>'N' AND v_QtyOnHand-CUR_PL_Post.MovementQty<0) THEN
          SELECT '@NotEnoughStocked@: ' || NAME
          INTO v_Message
          FROM M_PRODUCT
          WHERE M_Product_ID=CUR_PL_Post.M_Product_ID;
          RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
          FINISH_PROCESS:=TRUE;
        END IF;
        -- Create Transaction Entry
        v_ResultStr:='CreateTransaction';
        SELECT * INTO  v_NextNo FROM Ad_Sequence_Next('M_Transaction', v_Org_ID) ;
        INSERT
        INTO M_TRANSACTION
          (
            M_Transaction_ID, M_ProductionLine_ID, AD_Client_ID, AD_Org_ID,
            IsActive, Created, CreatedBy, Updated,
            UpdatedBy, MovementType, M_Locator_ID, M_Product_ID,
            M_AttributeSetInstance_ID, MovementDate, MovementQty, M_Product_UOM_ID,
            QuantityOrder, C_UOM_ID
          )
          VALUES
          (
            v_NextNo, CUR_PL_Post.M_ProductionLine_ID, CUR_PL_Post.AD_Client_ID, CUR_PL_Post.AD_Org_ID,
             'Y', TO_DATE(NOW()), v_User_ID, TO_DATE(NOW()),
            v_User_ID, 'P+', CUR_PL_Post.M_Locator_ID, CUR_PL_Post.M_Product_ID,
            COALESCE(CUR_PL_Post.M_AttributeSetInstance_ID, '0'), -- not distinguishing between assemby/disassembly
            CUR_PL_Post.MovementDate,(CASE CUR_PL_Post.PRODUCTIONTYPE WHEN '+' THEN CUR_PL_Post.MovementQty ELSE -CUR_PL_Post.MOVEMENTQTY END), CUR_PL_Post.M_Product_UOM_ID,(CASE CUR_PL_Post.PRODUCTIONTYPE WHEN '+' THEN CUR_PL_Post.QUANTITYORDER ELSE -CUR_PL_Post.QuantityOrder END), CUR_PL_Post.C_UOM_ID
          )
          ;
        IF(CUR_PL_Post.IsStocked<>'N') THEN
          SELECT * INTO  v_Result, v_Message FROM M_Check_Stock(CUR_PL_Post.M_Product_ID, v_Client_ID, v_Org_ID) ;
        END IF;
        IF (v_Result=0) THEN
          v_Message:=v_Message || ' @Inline@ ' || CUR_PL_Post.line;
          RAISE EXCEPTION '%', v_Message; --OBTG:-20000--
          FINISH_PROCESS:=TRUE;
        END IF;
      END LOOP;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
        --Calculate Production Cost
        SELECT * INTO  v_Message FROM Ma_Production_Cost(v_Record_ID, v_User_ID);
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      -- Update donequantity on workrequirements
      v_ResultStr:='Updating workrequirement';
      FOR Cur_ProductionPlan IN
        (SELECT *  FROM M_PRODUCTIONPLAN pp  WHERE pp.M_PRODUCTION_ID=v_Record_ID)
      LOOP
        UPDATE MA_WRPHASE
          SET DONEQUANTITY=DONEQUANTITY + Cur_ProductionPlan.PRODUCTIONQTY
        WHERE MA_WRPhase_ID=Cur_ProductionPlan.MA_WRPHASE_ID;
      END LOOP;
      -- Indicate that we are done
      UPDATE M_PRODUCTION
        SET Processed='Y',
        updated=TO_DATE(NOW()),
        updatedby=v_User_ID
      WHERE M_Production_ID=v_Record_ID;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      v_ResultStr:='Updating used toolsets';
      FOR Cur_Toolset IN
        (SELECT MA_TOOLSETUSED.*
         FROM MA_TOOLSETUSED, M_PRODUCTIONPLAN
         WHERE MA_TOOLSETUSED.M_PRODUCTIONPLAN_ID = M_PRODUCTIONPLAN.M_PRODUCTIONPLAN_ID
           AND M_PRODUCTIONPLAN.M_PRODUCTION_ID = v_Record_ID) LOOP
        UPDATE MA_TOOLSET
        SET NUMBERUSES = NUMBERUSES + Cur_Toolset.USED
        WHERE MA_TOOLSET_ID = Cur_Toolset.MA_TOOLSET_ID;
      END LOOP;
    END IF;
    ---- <<FINISH_PROCESS>>
    --v_Message := v_Message || '@Created@: ' || v_NoRecords;
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  RAISE NOTICE '%',v_ResultStr ;
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $$;


ALTER FUNCTION public.ma_workeffort_validate(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ma_workrequirement_close(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_workrequirement_close(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  --  Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --
    v_Record_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    --  Phases to close
    Cur_Phase RECORD;
    --
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
  BEGIN
    --  Process Parameters
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      --  Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          i.AD_Org_ID,
          i.AD_Client_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Client_ID:=Cur_Parameter.AD_Client_ID;
        v_Record_ID:=Cur_Parameter.Record_ID;
      END LOOP; --  Get Parameter
    ELSE
      RAISE NOTICE '%','--<<MA_WorkRequirement_Close>>' ;
    END IF;
  BEGIN --BODY
    v_ResultStr:='Closing phases';
    FOR Cur_Phase IN
      (SELECT MA_WRPhase_ID
      FROM MA_WRPhase
      WHERE MA_WorkRequirement_ID=v_Record_ID
        AND closed='N'
      )
    LOOP
      UPDATE MA_WRPhase  SET closed='Y'  WHERE MA_WRPhase_ID=Cur_Phase.MA_WRPhase_ID;
    END LOOP;
    v_ResultStr:='Close work requirement';
    UPDATE MA_WorkRequirement
      SET closed='Y'
    WHERE MA_WorkRequirement_ID=v_Record_ID;
    ---- <<FINISH_PROCESS>>
    --v_Message := v_Message || '@Created@: ' || v_NoRecords;
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    ELSE
      RAISE NOTICE '%','--<<MA_WorkRequirement_Process finished>> ' || v_Message ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
  --p_Invoice_ID := 0;        --  Error Indicator
  RETURN;
END ; $$;


ALTER FUNCTION public.ma_workrequirement_close(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ma_workrequirement_process(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_workrequirement_process(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  --  Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --
    v_Record_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_User_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Org_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_WrPhase_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_WrPhaseProd_ID VARCHAR(32); --OBTG:VARCHAR2--
    --  Sequences to process
    Cur_Sequence RECORD;
    --
    v_ProcessPlan_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_ExplodePhases CHAR;
    v_Quantity NUMERIC;
    v_Multiplier NUMERIC;
    v_Processed CHAR;
    v_LaunchDate TIMESTAMP;
    -- WRPhases to process
    Cur_WRPhase RECORD;
    --  Sequence Products to process
    Cur_SeqProduct RECORD;
    --ptr_sp  Cur_SeqProduct%ROWTYPE;
    FINISH_PROCESS BOOLEAN:=false;
  BEGIN
    --  Process Parameters
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      --  Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          i.AD_Org_ID,
          i.AD_Client_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_User_ID:=Cur_Parameter.AD_User_ID;
        v_Client_ID:=Cur_Parameter.AD_Client_ID;
      END LOOP; --  Get Parameter
    ELSE
      RAISE NOTICE '%','--<<MA_WorkRequirement_Process>>' ;
    END IF;
  BEGIN --BODY
    -- Check if all the required fields are filled
    v_ResultStr:='CheckingArguments';
    SELECT MA_ProcessPlan_ID,
      Quantity,
      Processed,
      ExplodePhases,
      LaunchDate,
      AD_Org_ID
    INTO v_ProcessPlan_ID,
      v_Quantity,
      v_Processed,
      v_ExplodePhases,
      v_LaunchDate,
      v_Org_ID
    FROM MA_WorkRequirement
    WHERE MA_WorkRequirement_ID=v_Record_ID;
    --Check if it hasn't already been processed
    IF v_Processed='Y' THEN
      v_ResultStr:='Work Requirement is Processed';
      RAISE NOTICE '%','Work Requirement is already Processed' ;
      v_Message:='@WorkRequirementProcessed@';
      FINISH_PROCESS:=true;
    END IF;
    IF(NOT FINISH_PROCESS) THEN
      IF(v_ProcessPlan_ID IS NULL OR v_Quantity IS NULL) THEN
        RAISE NOTICE '%','Faltan argumentos' ;
        FINISH_PROCESS:=true;
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      IF(v_ExplodePhases='Y') THEN
        -- Data insertion begins
        FOR Cur_Sequence IN
          (SELECT s.MA_Sequence_ID,
            s.MA_Process_ID,
            s.Name,
            s.CostCenterUse,
            s.Preptime,
            s.Multiplier,
            s.SeqNo,
            s.NoQty,
            s.GroupUse,
            s.Outsourced
          FROM MA_Sequence s,
            MA_ProcessPlan_Version p
          WHERE s.MA_PROCESSPLAN_VERSION_ID=p.MA_PROCESSPLAN_VERSION_ID
            AND p.MA_ProcessPlan_ID=v_ProcessPlan_ID
            AND p.DATEFROM<=v_LaunchDate
            AND p.DATETO>v_LaunchDate
          )
        LOOP
          v_ResultStr:='InsertPhase';
          SELECT * INTO  v_WrPhase_ID FROM Ad_Sequence_Next('MA_WRPhase', v_Client_ID) ;
          v_Multiplier:=Cur_Sequence.Multiplier;
          --OPEN Cur_SeqProduct (Cur_Sequence.MA_Sequence_ID);
          --FETCH Cur_SeqProduct INTO ptr_sp;
          INSERT
          INTO MA_WRPHASE
            (
              MA_Wrphase_ID, MA_Workrequirement_ID, MA_Sequence_ID, AD_Client_ID,
              AD_Org_ID, Isactive, Created, Createdby,
              Updated, Updatedby, MA_Process_ID, CostCenterUse,
              Preptime, Quantity, Donequantity,
              SeqNo, Closed, NoQty, GroupUse, Outsourced
            )
            VALUES
            (
              v_WrPhase_ID, v_Record_ID, Cur_Sequence.MA_Sequence_ID, v_Client_ID,
              v_Org_ID, 'Y', TO_DATE(NOW()), v_User_ID,
              TO_DATE(NOW()), v_User_ID, Cur_Sequence.MA_Process_ID, Cur_Sequence.CostCenterUse,
              Cur_Sequence.Preptime, v_Multiplier*v_Quantity, 0,
              Cur_Sequence.SeqNo, 'N', Cur_Sequence.NoQty, Cur_Sequence.GroupUse, Cur_Sequence.Outsourced
            )
            ;
          FOR Cur_SeqProduct IN
            (SELECT *
            FROM MA_SequenceProduct
            WHERE MA_Sequence_ID=Cur_Sequence.MA_Sequence_ID AND productiontype in ('+','-')
            )
          LOOP
            v_ResultStr:='InsertProduct';
            SELECT * INTO  v_WrPhaseProd_ID FROM Ad_Sequence_Next('MA_WRPhaseProduct', v_Client_ID) ;
            RAISE NOTICE '%','Valores:' || v_WrPhaseProd_ID ||' '|| v_WrPhase_ID||' '|| v_Client_ID||' '|| v_Org_ID||' '|| v_User_ID||' '|| Cur_SeqProduct.M_Product_ID||' '|| Cur_SeqProduct.Productiontype||' '|| Cur_SeqProduct.Quantity ;
            v_ResultStr:='InsertProduct2';
            INSERT
            INTO MA_WRPHASEPRODUCT
              (
                MA_Wrphaseproduct_ID, MA_Wrphase_ID, AD_Client_ID, AD_Org_ID,
                Isactive, Created, Createdby, Updated,
                Updatedby, M_Product_ID, Productiontype, MovementQty,
                ComponentCost, C_UOM_ID,
                quantityorder, M_Product_UOM_ID
              )
              VALUES
              (
                v_WrPhaseProd_ID, v_WrPhase_ID, v_Client_ID, v_Org_ID,
                 'Y', TO_DATE(NOW()), v_User_ID, TO_DATE(NOW()),
                v_User_ID, Cur_SeqProduct.M_Product_ID, Cur_SeqProduct.Productiontype, Cur_SeqProduct.Quantity,
                Cur_SeqProduct.ComponentCost, Cur_SeqProduct.C_UOM_ID,
                Cur_SeqProduct.quantityorder, Cur_SeqProduct.M_Product_UOM_ID
              )
              ;
          END LOOP;
        END LOOP;
      ELSE
        -- Data insertion begins
        FOR Cur_WRPhase IN
          (SELECT MA_WRPhase_ID,
            MA_Sequence_ID,
            quantity
          FROM MA_WRPhase
          WHERE MA_WorkRequirement_ID=v_Record_ID
          )
        LOOP
          FOR Cur_SeqProduct IN
            (SELECT *
            FROM MA_SequenceProduct
            WHERE MA_Sequence_ID=Cur_WRPhase.MA_Sequence_ID AND productiontype in ('+','-')
            )
          LOOP
            v_ResultStr:='NInsertProduct';
            SELECT * INTO  v_WrPhaseProd_ID FROM Ad_Sequence_Next('MA_WRPhaseProduct', v_Client_ID) ;
            --DBMS_OUTPUT.PUT_LINE('Valores:' || v_WrPhaseProd_ID ||' '|| v_WrPhase_ID||' '|| v_Client_ID||' '|| v_Org_ID||' '|| v_User_ID||' '|| Cur_SeqProduct.Name||' '|| Cur_SeqProduct.M_Product_ID||' '|| Cur_SeqProduct.Productiontype||' '|| Cur_SeqProduct.Quantity);
            v_ResultStr:='NInsertProduct2';
            INSERT
            INTO MA_WRPHASEPRODUCT
              (
                MA_Wrphaseproduct_ID, MA_Wrphase_ID, AD_Client_ID, AD_Org_ID,
                Isactive, Created, Createdby, Updated,
                Updatedby, M_Product_ID, Productiontype, MovementQty,
                ComponentCost, C_UOM_ID,
                QUANTITYORDER, M_PRODUCT_UOM_ID
              )
              VALUES
              (
                v_WrPhaseProd_ID, Cur_WRPhase.MA_WrPhase_ID, v_Client_ID, v_Org_ID,
                 'Y', TO_DATE(NOW()), v_User_ID, TO_DATE(NOW()),
                v_User_ID, Cur_SeqProduct.M_Product_ID, Cur_SeqProduct.Productiontype, Cur_SeqProduct.Quantity,
                Cur_SeqProduct.ComponentCost, Cur_SeqProduct.C_UOM_ID,
                Cur_SeqProduct.quantityorder, Cur_SeqProduct.M_Product_UOM_ID
              )
              ;
          END LOOP;
        END LOOP;
      END IF;
    END IF; --FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      UPDATE MA_WorkRequirement
        SET Processed='Y', updated = TO_DATE(NOW()), updatedby = v_User_ID
      WHERE MA_WorkRequirement_ID=v_Record_ID;
    END IF; --FINISH_PROCESS
    ---- <<FINISH_PROCESS>>
    --v_Message := v_Message || '@Created@: ' || v_NoRecords;
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    ELSE
      RAISE NOTICE '%','--<<MA_WorkRequirement_Process finished>> ' || v_Message ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
  --p_Invoice_ID := 0;        --  Error Indicator
  RETURN;
END ; $$;


ALTER FUNCTION public.ma_workrequirement_process(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: ma_wrphase_close(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION ma_wrphase_close(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  --  Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  --  Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    --
    v_Record_ID VARCHAR(32):=NULL; --OBTG:VARCHAR2--
    v_WorkRequirement_ID VARCHAR(32); --OBTG:VARCHAR2--
    v_Count NUMERIC;
    v_Client_ID VARCHAR(32); --OBTG:VARCHAR2--
  BEGIN
    --  Process Parameters
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      --  Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          i.AD_Org_ID,
          i.AD_Client_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_Client_ID:=Cur_Parameter.AD_Client_ID;
      END LOOP; --  Get Parameter
    ELSE
      RAISE NOTICE '%','--<<MA_WorkRequirement_Close>>' ;
    END IF;
  BEGIN --BODY
    SELECT MA_WorkRequirement_ID
    INTO v_WorkRequirement_ID
    FROM MA_WRPhase
    WHERE MA_WRPhase_ID=v_Record_ID;
    v_ResultStr:='Closing phases';
    UPDATE MA_WRPhase  SET closed='Y'  WHERE MA_WRPhase_ID=v_Record_ID;
    SELECT count(*)
    INTO v_Count
    FROM MA_WRPhase
    WHERE MA_WorkRequirement_ID=v_WorkRequirement_ID
      AND closed='N';
    IF v_Count=0 THEN
      UPDATE MA_Workrequirement
        SET closed='Y'
      WHERE MA_WorkRequirement_ID=v_WorkRequirement_ID;
    END IF;
    ---- <<FINISH_PROCESS>>
    --v_Message := v_Message || '@Created@: ' || v_NoRecords;
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    ELSE
      RAISE NOTICE '%','--<<MA_WorkRequirement_Process finished>> ' || v_Message ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    -- ROLLBACK;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
  --p_Invoice_ID := 0;        --  Error Indicator
  RETURN;
END ; $$;


ALTER FUNCTION public.ma_wrphase_close(p_pinstance_id character varying) OWNER TO tad;

CREATE OR REPLACE FUNCTION months_between(init_date timestamp with time zone, end_date timestamp with time zone) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  v_months INTEGER;
  v_months_total INTEGER;
  v_years INTEGER;
begin
  v_months=extract(month from (age(init_date,end_date)));
  v_years=extract(year from (age(init_date,end_date)));

  v_months_total=abs((v_years*12) + v_months);
  return v_months_total;
end
$$;


CREATE OR REPLACE FUNCTION negation(boolean) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN NOT $1 ;
END;
$_$;


CREATE OR REPLACE FUNCTION r_request_duetype(p_actiondate timestamp without time zone, p_tolerancedays numeric) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
* The contents of this file are subject to the Compiere Public
* License 1.1 ("License"); You may not use this file except in
* compliance with the License. You may obtain a copy of the License in
* the legal folder of your Openbravo installation.
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing rights
* and limitations under the License.
* The Original Code is  Compiere  ERP &  Business Solution
* The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
* Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
* parts created by ComPiere are Copyright (C) ComPiere, Inc.;
* All Rights Reserved.
* Contributor(s): Openbravo SL
* Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
*
* Specifically, this derivative work is based upon the following Compiere
* file and version.
*************************************************************************
* $Id: R_Request_DueType.sql,v 1.2 2001/12/04 05:30:26 jjanke Exp $
***
* Title: Return updated Request Due Type
* Description:
* Set Due Type 3-Overdue 5-Due 7-Scheduled
************************************************************************/
BEGIN
  -- scheduled
  IF(TRUNC(p_ActionDate) > TRUNC(TO_DATE(NOW()))) THEN
    RETURN '7';
    -- overdue
  ELSIF(TRUNC(p_ActionDate) < TRUNC(TO_DATE(NOW())+p_ToleranceDays)) THEN
    RETURN '3';
  END IF;
  --
  RETURN '5';
END ; $_$;


ALTER FUNCTION public.r_request_duetype(p_actiondate timestamp without time zone, p_tolerancedays numeric) OWNER TO tad;

--
-- Name: r_request_duetype(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION r_request_duetype(p_actiondate timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$ DECLARE 
BEGIN
RETURN R_REQUEST_DUETYPE ($1, 1);
END
; $_$;


ALTER FUNCTION public.r_request_duetype(p_actiondate timestamp without time zone) OWNER TO tad;

--
-- Name: r_request_process(character varying, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION r_request_process(p_pinstance_id character varying, p_r_request_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: R_Request_Process.sql,v 1.6 2003/05/26 22:31:17 jjanke Exp $
  ***
  * Title: Request Processing
  * Description:
  *   Copy Request into RequestAction
  *   Prepare for next action
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; -- 0=failure
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    --
    v_NextNo VARCHAR(32) ; --OBTG:VARCHAR2--
    v_Rows NUMERIC(10) ;
    FINISH_PROCESS BOOLEAN:=false;

    rowcount NUMERIC;
  BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
      v_ResultStr:='PInstanceNotFound';
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PInstance i
        LEFT JOIN AD_PInstance_Para p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      END LOOP; -- Get Parameter
    ELSE
      v_Record_ID:=p_R_Request_ID;
    END IF;
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
  BEGIN --BODY
    /**
    * Copy Request into RequestAction
    */
    SELECT * INTO  v_NextNo FROM AD_Sequence_Next('R_RequestAction', v_Record_ID) ;
    INSERT
    INTO R_RequestAction
      (
        R_RequestAction_ID, R_Request_ID, AD_Client_ID, AD_Org_ID,
        IsActive, Created, CreatedBy, Updated,
        UpdatedBy, SalesRep_ID, ActionType, C_BPartner_ID,
        AD_User_ID, C_Order_ID, C_Invoice_ID, C_Debt_Payment_ID,
        M_Product_ID, C_Project_ID, R_MailText_ID, MailText,
        Result, DateNextAction, dateaction
      )
    SELECT v_NextNo, R_Request_ID, AD_Client_ID, AD_Org_ID,
      IsActive, TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()),
      v_AD_User_ID, SalesRep_ID, ActionType, C_BPartner_ID,
      AD_User_ID, C_Order_ID, C_Invoice_ID, C_Debt_Payment_ID,
      M_Product_ID, C_Project_ID, R_MailText_ID, MailText,
      Result, DateNextAction, TO_DATE(NOW())
    FROM R_Request
    WHERE R_Request_ID=v_Record_ID;
   GET DIAGNOSTICS  rowcount:=ROW_COUNT;
    v_Rows:=rowcount;
    v_Message:='@R_Request_ID@ @Updated@ ' || v_Rows;
    IF(v_Rows<>1) THEN
      v_Result:=0;
      FINISH_PROCESS:=true;
    END IF;
    IF(NOT FINISH_PROCESS) THEN
      -- Close Request
      UPDATE R_Request
        SET DateLastAction=Updated,
        LastResult=Result,
        DueType=R_Request_DueType(DateNextAction),
        Processed='Y',
        --
        Result=NULL,
        MailText=NULL,
        R_MailText_ID=NULL,
        ActionType=NULL
      WHERE R_Request_ID=v_Record_ID
        AND ActionType='X';
     GET DIAGNOSTICS  rowcount:=ROW_COUNT;
      v_Rows:=rowcount;
      v_Message:='@R_Request_ID@ @Updated@ ' || v_Rows;
      IF(v_Rows=1) THEN
        FINISH_PROCESS:=true;
      END IF;
    END IF;--FINISH_PROCESS
    IF(NOT FINISH_PROCESS) THEN
      /**
      * Prepare for next action
      */
      UPDATE R_Request
        SET DateLastAction=Updated,
        LastResult=Result,
        DueType=R_Request_DueType(DateNextAction),
        --
        Result=NULL,
        MailText=NULL,
        R_MailText_ID=NULL,
        ActionType=NULL
      WHERE R_Request_ID=v_Record_ID;
     GET DIAGNOSTICS  rowcount:=ROW_COUNT;
      v_Rows:=rowcount;
      v_Message:='@R_Request_ID@ @Updated@ ' || v_Rows;
      IF(v_Rows<>1) THEN
        v_Result:=0;
      END IF;
    END IF;--FINISH_PROCESS
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    IF(p_PInstance_ID IS NOT NULL) THEN
      PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
  RETURN;
END ; $_$;


ALTER FUNCTION public.r_request_process(p_pinstance_id character varying, p_r_request_id character varying) OWNER TO tad;

--
-- Name: r_request_process0(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION r_request_process0(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: R_Request_Process0.sql,v 1.2 2002/10/21 04:49:46 jjanke Exp $
  ***
  * Title: Request Processing
  ************************************************************************/
BEGIN
  PERFORM R_REQUEST_PROCESS(p_PInstance_ID, NULL) ;
END ; $_$;


ALTER FUNCTION public.r_request_process0(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: r_request_reopen(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION r_request_reopen(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: R_Request_ReOpen.sql,v 1.2 2003/01/12 04:17:33 jjanke Exp $
  ***
  * Title: Reopen Requests
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; -- 0=failure
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  -- Parameter
  --TYPE RECORD IS REFCURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    p_R_Request_ID VARCHAR(32) ; --OBTG:VARCHAR2--
    v_count NUMERIC(10):=0;
    v_R_RequestAction_ID VARCHAR(32) ; --OBTG:VARCHAR2--
    rowcount NUMERIC;
  BEGIN
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
    v_ResultStr:='PInstanceNotFound';
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      IF(Cur_Parameter.ParameterName='R_Request_ID') THEN
        p_R_Request_ID:=Cur_Parameter.P_String;
        RAISE NOTICE '%','  R_Request_ID=' || p_R_Request_ID ;
      ELSE
        RAISE NOTICE '%','*** Unknown Parameter=' || Cur_Parameter.ParameterName ;
      END IF;
    END LOOP; -- Get Parameter
    RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
    IF(p_R_Request_ID IS NOT NULL) THEN
      v_ResultStr:='Updating';
      UPDATE R_Request
        SET Processed='N'
      WHERE R_Request_ID=p_R_Request_ID
        AND Processed='Y';
     GET DIAGNOSTICS  rowcount:=ROW_COUNT;
      v_count:=rowcount;
      IF(v_count=1) THEN
        v_ResultStr:='Inserting Action';
        SELECT * INTO  v_R_RequestAction_ID FROM AD_Sequence_Next('R_RequestAction', p_R_Request_ID) ;
        RAISE NOTICE '%','Inserting R_RequestAction_ID=' || v_R_RequestAction_ID ;
        INSERT
        INTO R_RequestAction
          (
            R_RequestAction_ID, AD_Client_ID, AD_Org_ID, IsActive,
            CREATED, CREATEDBY, UPDATED, UPDATEDBY,
            R_Request_ID, AD_USER_ID, ACTIONTYPE, RESULT
          )
        SELECT  v_R_RequestAction_ID, AD_Client_ID, AD_Org_ID, 'Y',
          TO_DATE(NOW()), v_AD_User_ID, TO_DATE(NOW()), v_AD_User_ID,
          p_R_Request_ID, v_AD_User_ID, 'X', '** ReOpended **'
        FROM R_Request
        WHERE R_Request_ID=p_R_Request_ID;
      END IF;
    END IF;
    v_Message:='@Updated@=' || v_count;
    ---- <<FINISH_PROCESS>>
    --  Update AD_PInstance
    RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
    PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
   v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $_$;


ALTER FUNCTION public.r_request_reopen(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: round(numeric, numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION round(numeric, numeric) RETURNS numeric
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN round($1,CAST($2 AS INTEGER));
END;
$_$;


ALTER FUNCTION public.round(numeric, numeric) OWNER TO tad;

--
-- Name: rpad(character varying, numeric, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION rpad(character varying, numeric, character varying) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
return to_char(rpad($1::text,CAST($2 AS INTEGER), $3::text));
END;
$_$;


ALTER FUNCTION public.rpad(character varying, numeric, character varying) OWNER TO tad;

--
-- Name: s_expensetype_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION s_expensetype_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: S_ExpenseType_Trg.sql,v 1.3 2003/02/07 05:49:59 jjanke Exp $
    ***
    * Title: S_Expense Type
    * Description:
    *   Syncronize Resource with Product
    ************************************************************************/
    NextNo M_Product.M_Product_ID%TYPE;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF(TG_OP = 'INSERT') THEN
    SELECT * INTO  NextNo FROM AD_Sequence_Next('M_Product', new.AD_Client_ID) ;
    INSERT
    INTO M_PRODUCT
      (
        M_Product_ID, AD_Client_ID, AD_Org_ID,
        IsActive, Created, CreatedBy,
        Updated, UpdatedBy, Value,
        Name, Description, DOCUMENTNOTE,
        HELP, UPC, SKU,
        C_UOM_ID, SALESREP_ID, ISSUMMARY,
        ProductType, ISSTOCKED, ISPURCHASED,
        ISSOLD, ISBOM, ISINVOICEPRINTDETAILS,
        ISPICKLISTPRINTDETAILS, ISVERIFIED,
        M_Product_Category_ID, CLASSIFICATION, VOLUME,
        WEIGHT, SHELFWIDTH, SHELFHEIGHT,
        SHELFDEPTH, UNITSPERPALLET, C_TaxCategory_ID,
        S_Resource_ID, S_ExpenseType_ID, DISCONTINUED,
        DISCONTINUEDBY
      )
      VALUES
      (
        NextNo, new.AD_Client_ID, new.AD_Org_ID,
        new.IsActive, new.Created, new.CreatedBy,
        new.Updated, new.UpdatedBy, new.Value,
        new.Name, new.Description, null,
        null, null, null,
        new.C_UOM_ID, null,  'N',  'E',
         'N',  'N',  'Y',
         'N', 'N', 'N',
         'N', new.M_Product_Category_ID,
        null, 0, 0,
        0, 0, 0,
        0, new.C_TaxCategory_ID, null,
        new.S_ExpenseType_ID, 'N', null
      )
      ;
  ELSIF(TG_OP = 'UPDATE') THEN
    UPDATE M_Product
      SET IsActive=new.IsActive,
      Updated=new.Updated,
      UpdatedBy=new.UpdatedBy,
      Value=new.Value,
      Name=new.Name,
      Description=new.Description,
      C_UOM_ID=new.C_UOM_ID,
      M_Product_Category_ID=new.M_Product_Category_ID,
      C_TaxCategory_ID=new.C_TaxCategory_ID
    WHERE S_ExpenseType_ID=new.S_ExpenseType_ID;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.s_expensetype_trg() OWNER TO tad;

--
-- Name: s_resource_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION s_resource_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: S_Resource_Trg.sql,v 1.2 2002/10/23 03:16:57 jjanke Exp $
    ***
    * Title: S_Resource
    * Description:
    *   Syncronize Resource with Product
    ************************************************************************/
    NextNo M_Product.M_Product_ID%TYPE;
  v_C_UOM_ID              M_Product.C_UOM_ID%TYPE;
  v_M_Product_Category_ID M_Product.M_Product_Category_ID%TYPE;
  v_C_TaxCategory_ID      M_Product.C_TaxCategory_ID%TYPE;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF(TG_OP = 'INSERT') THEN
    -- Get ResourceType Info
    SELECT C_UOM_ID,
      M_Product_Category_ID,
      C_TaxCategory_ID
    INTO v_C_UOM_ID,
      v_M_Product_Category_ID,
      v_C_TaxCategory_ID
    FROM S_ResourceType
    WHERE S_ResourceType_ID=new.S_ResourceType_ID;
    --
    SELECT * INTO  NextNo FROM AD_Sequence_Next('M_Product', new.AD_Client_ID) ;
    INSERT
    INTO M_PRODUCT
      (
        M_Product_ID, AD_Client_ID, AD_Org_ID,
        IsActive, Created, CreatedBy,
        Updated, UpdatedBy, Value,
        Name, Description, DOCUMENTNOTE,
        HELP, UPC, SKU,
        C_UOM_ID, SALESREP_ID, ISSUMMARY,
        ProductType, ISSTOCKED, ISPURCHASED,
        ISSOLD, ISBOM, ISINVOICEPRINTDETAILS,
        ISPICKLISTPRINTDETAILS, ISVERIFIED, 
        M_Product_Category_ID, CLASSIFICATION, VOLUME,
        WEIGHT, SHELFWIDTH, SHELFHEIGHT,
        SHELFDEPTH, UNITSPERPALLET, C_TaxCategory_ID,
        S_Resource_ID, S_EXPENSETYPE_ID, DISCONTINUED,
        DISCONTINUEDBY
      )
      VALUES
      (
        NextNo, new.AD_Client_ID, new.AD_Org_ID,
        new.IsActive, new.Created, new.CreatedBy,
        new.Updated, new.UpdatedBy, new.Value,
        new.Name, new.Description, null,
        null, null, null,
        v_C_UOM_ID, null,  'N',
         'R',  'N',  'N',
         'Y', 'N', 'N',
         'N', 'N', 
        v_M_Product_Category_ID, null, 0,
        0, 0, 0,
        0, 0, v_C_TaxCategory_ID,
        new.S_Resource_ID, null, 'N',
        null
      )
      ;
  ELSIF(TG_OP = 'UPDATE') THEN
    UPDATE M_Product
      SET IsActive=new.IsActive,
      Updated=new.Updated,
      UpdatedBy=new.UpdatedBy,
      Value=new.Value,
      Name=new.Name,
      Description=new.Description
    WHERE S_Resource_ID=new.S_Resource_ID;
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.s_resource_trg() OWNER TO tad;

--
-- Name: s_resourceassignment_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION s_resourceassignment_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: S_ResourceAssignment_Trg.sql,v 1.2 2003/03/19 06:46:56 jjanke Exp $
    ***
    * Title: S_Resource Assignment
    * Description:
    *   Syncronize Resource Assugnment with Expense Reports
    ************************************************************************/
    v_Description VARCHAR(255) ; --OBTG:NVARCHAR2--
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  NULL;
  /**
  IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
  v_Description:=new.Name;
  IF (new.Description IS NOT NULL AND LENGTH(new.Description) > 0) THEN
  v_Description:=v_Description || ' (' || new.Description || ')';
  END IF;
  -- Update Expense Line
  UPDATE S_TimeExpenseLine
  SET  Description=v_Description,
  Qty=new.Qty
  WHERE S_ResourceAssignment_ID=new.S_ResourceAssignment_ID
  AND (Description <> v_Description OR Qty <> new.Qty);
  -- Update Order Line
  UPDATE C_OrderLine
  SET  Description=v_Description,
  QtyOrdered=new.Qty
  WHERE S_ResourceAssignment_ID=new.S_ResourceAssignment_ID
  AND (Description <> v_Description OR QtyOrdered <> new.Qty);
  -- Update Invoice Line
  UPDATE C_InvoiceLine
  SET  Description=v_Description,
  QtyInvoiced=new.Qty
  WHERE S_ResourceAssignment_ID=new.S_ResourceAssignment_ID
  AND (Description <> v_Description OR QtyInvoiced <> new.Qty);
  END IF;
  **/
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.s_resourceassignment_trg() OWNER TO tad;

--
-- Name: s_resourcetype_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION s_resourcetype_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: S_ResourceType_Trg.sql,v 1.1 2002/06/21 04:08:34 jjanke Exp $
    ***
    * Title: Resource Type
    * Description:
    *   Syncronize Resource Type with Product
    ************************************************************************/
        
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  UPDATE M_Product
    SET C_UOM_ID=new.C_UOM_ID,
    M_Product_Category_ID=new.M_Product_Category_ID,
    C_TaxCategory_ID=new.C_TaxCategory_ID
  WHERE S_Resource_ID IN
    (
    SELECT S_Resource_ID
    FROM S_Resource
    WHERE S_ResourceType_ID=new.S_ResourceType_ID
    )
    ;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.s_resourcetype_trg() OWNER TO tad;

--
-- Name: s_resourceunavailable_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION s_resourceunavailable_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$ DECLARE 

    /*************************************************************************
    * The contents of this file are subject to the Compiere Public
    * License 1.1 ("License"); You may not use this file except in
    * compliance with the License. You may obtain a copy of the License in
    * the legal folder of your Openbravo installation.
    * Software distributed under the License is distributed on an
    * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    * implied. See the License for the specific language governing rights
    * and limitations under the License.
    * The Original Code is  Compiere  ERP &  Business Solution
    * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
    * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
    * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
    * All Rights Reserved.
    * Contributor(s): Openbravo SL
    * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
    *
    * Specifically, this derivative work is based upon the following Compiere
    * file and version.
    *************************************************************************
    * $Id: S_ResourceUnavailable_Trg.sql,v 1.2 2002/10/23 03:16:57 jjanke Exp $
    ***
    * Title: Resource Unavailability
    * Description:
    *   - Truncate + Fill date
    *   - Endure that start < end
    ************************************************************************/
        
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


    -- Truncate + Fill Date
    new.DateFrom:=TRUNC(new.DateFrom) ;
  IF(new.DateTo IS NULL) THEN
    new.DateTo:=new.DateFrom;
  ELSE
    new.DateTo:=TRUNC(new.DateTo) ;
  END IF;
  -- start < end
  IF(new.DateFrom > new.DateTo) THEN
    RAISE EXCEPTION '%', 'End Date greater than Start Date' ; --OBTG:-20403--
  END IF;
IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $_$;


ALTER FUNCTION public.s_resourceunavailable_trg() OWNER TO tad;

--
-- Name: s_timeexpense_post(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION s_timeexpense_post(p_pinstance_id character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$ DECLARE 
/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SL
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: S_TimeExpense_Post.sql,v 1.4 2003/02/21 06:38:16 jjanke Exp $
  ***
  * Title: Process Time + Expenses
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Message VARCHAR(2000):=''; --OBTG:VARCHAR2--
  v_Result NUMERIC:=1; -- 0=failure
  v_Record_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_AD_User_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_DayHours  NUMERIC;
  v_Processed VARCHAR(60); --OBTG:VARCHAR2--
  v_CInvoicelineId VARCHAR(32); --OBTG:varchar2--
  v_COrderlineId VARCHAR(32); --OBTG:varchar2--
  v_ExpenseLines NUMERIC;
    -- Parameter
  --TYPE RECORD IS REFCURSOR;
  Cur_Parameter RECORD;
    -- Parameter Variables
BEGIN
  --  Update AD_PInstance
  RAISE NOTICE '%','Updating PInstance - Processing ' || p_PInstance_ID ;
  v_ResultStr:='PInstanceNotFound';
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
BEGIN --BODY
  -- Get Parameters
  v_ResultStr:='ReadingParameters';
  FOR Cur_Parameter IN
    (SELECT i.Record_ID,
      i.AD_User_ID,
      p.ParameterName,
      p.P_String,
      p.P_Number,
      p.P_Date
    FROM AD_PInstance i
    LEFT JOIN AD_PInstance_Para p
      ON i.AD_PInstance_ID=p.AD_PInstance_ID
    WHERE i.AD_PInstance_ID=p_PInstance_ID
    ORDER BY p.SeqNo
    )
  LOOP
    v_Record_ID:=Cur_Parameter.Record_ID;
    v_AD_User_ID:=Cur_Parameter.AD_User_ID;
    -- IF (p.ParameterName = 'xx') THEN
    --  p_xx := p.P_String;
    --  DBMS_OUTPUT.PUT_LINE('  xx=' || p_xx);
    -- ELSE
    --  DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || p.ParameterName);
    --  END IF;
  END LOOP; -- Get Parameter
  RAISE NOTICE '%','  Record_ID=' || v_Record_ID ;
  DECLARE
    CUR_te RECORD;
    v_Hours NUMERIC;
  BEGIN

  /* Check if there are expense lines to process */
  SELECT COUNT(S_TimeExpenseLine.S_TimeExpenseLine_Id)
  INTO v_ExpenseLines
  FROM S_TimeExpenseLine, S_TimeExpense
  WHERE S_TimeExpense.S_TimeExpense_ID = v_Record_ID
    AND S_TimeExpenseLine.S_TimeExpense_Id = S_TimeExpense.S_TimeExpense_ID
    AND S_TimeExpenseLine.IsActive = 'Y';
  IF (v_ExpenseLines = 0) THEN
    RAISE EXCEPTION '%', '@NoExpenseLines@'||'.'; --OBTG:-20000--
  END IF;

    -- For ease id having access to all variables
  SELECT S_TimeExpense.Processed,
  MAX(S_TimeExpenseLine.C_InvoiceLine_ID), MAX(S_TimeExpenseLine.C_OrderLine_ID)
  INTO v_Processed, v_CInvoicelineId, v_COrderlineId
  FROM S_TimeExpense LEFT JOIN S_TimeExpenseLine ON S_TimeExpense.S_TimeExpense_ID = S_TimeExpenseLine.S_TimeExpense_ID
  WHERE S_TimeExpense.S_TimeExpense_ID = v_Record_ID
  GROUP BY S_TimeExpense.PROCESSED;
  IF (v_Processed = 'Y') THEN
    IF (v_CInvoicelineId IS NULL AND v_COrderlineId IS NULL) THEN
        UPDATE S_TimeExpense SET Processed = 'N' WHERE S_TimeExpense_ID = v_Record_ID;
    ELSE
        v_Message:='@DocumentAssociated@';
     v_Result:=0;
    END IF;
  ELSE
     FOR CUR_te IN
       (SELECT te.S_TimeExpense_ID, te.DateReport, te.C_BPartner_ID, te.Description, SUM(CASE tel.ISTIMEREPORT WHEN 'Y' THEN tel.qty ELSE 0 END) AS totalhours
        FROM S_TimeExpense te, S_TimeExpenseLine tel
        WHERE te.S_TimeExpense_ID=v_Record_ID
          AND te.S_TimeExpense_ID=tel.S_TimeExpense_ID
          AND te.Processed='N'
        GROUP BY te.S_TimeExpense_ID, te.DateReport, te.C_BPartner_ID, te.Description
       )
     LOOP
       v_ResultStr:='S_TimeExpense_ID=' || CUR_te.S_TimeExpense_ID;
       RAISE NOTICE '%','S_TimeExpense_ID='||CUR_te.S_TimeExpense_ID||', DateReport='||CUR_te.DateReport||', C_BPartner_ID='||CUR_te.C_BPartner_ID||', Description='||CUR_te.Description ;
       -- Checks come here
       -- Complete
         UPDATE S_TimeExpense
           SET Processed='Y',
           Updated=TO_DATE(NOW()),
           UpdatedBy=v_AD_User_ID
         WHERE S_TimeExpense_ID=CUR_te.S_TimeExpense_ID;
     END LOOP;
  END IF;
  END;
  ---- <<FINISH_PROCESS>>
  --  Update AD_PInstance
  RAISE NOTICE '%','Updating PInstance - Finished ' || v_Message ;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
  RETURN;
END; --BODY
EXCEPTION
WHEN OTHERS THEN
   v_ResultStr:= '@ERROR=' || SQLERRM;
  RAISE NOTICE '%',v_ResultStr ;
  -- ROLLBACK;
  PERFORM AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ; $_$;


ALTER FUNCTION public.s_timeexpense_post(p_pinstance_id character varying) OWNER TO tad;

--
-- Name: s_timeexpense_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION s_timeexpense_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 





  v_ID    VARCHAR(32); --OBTG:varchar2--
  v_RO    NUMERIC;
/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2008 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;



 IF (TG_OP = 'INSERT') THEN
  IF (NEW.PROCESSED = 'Y') THEN
  RAISE EXCEPTION '%', 'Document processed/posted'; --OBTG:-20501--
 END IF;
 ELSE
   IF (TG_OP = 'UPDATE' AND OLD.PROCESSED = 'Y') THEN
  IF (NEW.DocumentNo<>OLD.DocumentNo
          OR NEW.C_BPartner_ID<>OLD.C_BPartner_ID
          OR NEW.DATEREPORT<>OLD.DATEREPORT)
          OR NEW.AD_ORG_ID<>OLD.AD_ORG_ID THEN
       RAISE EXCEPTION '%', 'Document processed/posted'; --OBTG:-20501--
     END IF;
  END IF;
 END IF;

IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.s_timeexpense_trg() OWNER TO tad;

--
-- Name: s_timeexpenseline_trg(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION s_timeexpenseline_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$ DECLARE 

/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2010 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/




  v_UOM_ID VARCHAR(32) ; --OBTG:VARCHAR2--
  v_TimeExpense_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_RO NUMERIC;
  v_need_verification BOOLEAN := true;
  v_BP_PriceList_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_BP_PL_Currency_ID VARCHAR(32); --OBTG:VARCHAR2--
  v_Count NUMERIC;
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 
    END IF;


  IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
    v_TimeExpense_ID := NEW.S_TIMEEXPENSE_ID;
  ELSE
    v_TimeExpense_ID := OLD.S_TIMEEXPENSE_ID;
  END IF;

  -- Added in order to fix bug 1798120
  -- Verification added in order to let work process ExpenseAPInvoice
  -- Verification will be skipped in UPDATING when:
  --   * There is not Invoice Line and is going to be OR
  --   * There is not Order Line and is going to be
   IF (TG_OP = 'UPDATE') THEN
    IF ((OLD.C_INVOICELINE_ID IS NOT NULL OR NEW.C_INVOICELINE_ID IS NULL) AND (OLD.C_ORDERLINE_ID IS NOT NULL OR NEW.C_ORDERLINE_ID IS NULL)) THEN
      v_need_verification := true;
    ELSE
      v_need_verification := false;
    END IF;
   END IF;

   IF (v_need_verification) THEN
   -- ReadOnly Check
    SELECT  COUNT(*)
     INTO v_RO
    FROM S_TIMEEXPENSE
    WHERE S_TIMEEXPENSE_ID=v_TimeExpense_ID
      AND Processed='Y';
    IF (v_RO > 0) THEN
      IF (TG_OP = 'INSERT' OR TG_OP = 'DELETE') THEN
        RAISE EXCEPTION '%', 'Document processed/posted'; --OBTG:-20501--
      ELSIF (NEW.Line<>OLD.Line
            OR NEW.IsTimeReport<>OLD.IsTimeReport
            OR NEW.ISInvoiced<>OLD.ISInvoiced
     OR NEW.S_TimeExpense_ID<>OLD.S_TimeExpense_ID
     OR NEW.AD_ORG_ID<>OLD.AD_ORG_ID
     OR COALESCE(NEW.DateExpense, '1-1-3000')<>COALESCE(OLD.DateExpense,'1-1-3000')
     OR COALESCE(NEW.M_Product_ID,'0')<>COALESCE(OLD.M_Product_ID,'0')
     OR COALESCE(NEW.qty,0)<>COALESCE(OLD.qty,0)
     OR COALESCE(NEW.expenseamt,0)<>COALESCE(OLD.expenseamt,0)
     OR COALESCE(NEW.C_Currency_ID,'0')<>COALESCE(OLD.C_Currency_ID,'0')
     OR COALESCE(NEW.S_Resourceassignment_ID,'0')<>COALESCE(OLD.S_Resourceassignment_ID,'0')
     OR COALESCE(NEW.C_BPartner_ID,'0')<>COALESCE(OLD.C_BPartner_ID,'0')
     OR COALESCE(NEW.C_Project_ID,'0')<>COALESCE(OLD.C_Project_ID,'0')
     OR COALESCE(NEW.C_Activity_ID,'0')<>COALESCE(OLD.C_Activity_ID,'0')
     OR COALESCE(NEW.C_Campaign_ID,'0')<>COALESCE(OLD.C_Campaign_ID,'0')
     OR COALESCE(NEW.C_InvoiceLine_ID,'0')<>COALESCE(OLD.C_InvoiceLine_ID,'0')
     OR COALESCE(NEW.InvoicePrice,0)<>COALESCE(OLD.InvoicePrice,0)
     OR COALESCE(NEW.C_Uom_ID,'0')<>COALESCE(OLD.C_Uom_ID,'0')
     OR COALESCE(NEW.C_OrderLine_ID,'0')<>COALESCE(OLD.C_OrderLine_ID,'0')
     OR COALESCE(NEW.C_ProjectPhase_ID,'0')<>COALESCE(OLD.C_ProjectPhase_ID,'0')
     OR COALESCE(NEW.C_ProjectTask_ID,'0')<>COALESCE(OLD.C_ProjectTask_ID,'0')
     OR COALESCE(NEW.S_TimeType_ID,'0')<>COALESCE(OLD.S_TimeType_ID,'0')) THEN
        RAISE EXCEPTION '%', 'Document processed/posted'; --OBTG:-20501--
      END IF;
    END IF;

    -- Difference, ID
    IF(TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
      IF(NEW.M_PRODUCT_ID IS NOT NULL) THEN
        -- Checks UOM match
        SELECT C_UOM_ID
        INTO v_UOM_ID
        FROM M_PRODUCT
        WHERE M_PRODUCT_ID=NEW.M_PRODUCT_ID;
        IF(COALESCE(v_UOM_ID, '0') <> COALESCE(NEW.C_UOM_ID, '0')) THEN
          RAISE EXCEPTION '%', 'Unit of Measure mismatch (product/transaction)' ; --OBTG:-20111--
        END IF;
        
        -- Looks for a price for current product and business partner
        IF(NEW.C_BPARTNER_ID IS NOT NULL AND NEW.INVOICEPRICE IS NULL) THEN
          -- Looks for business partner price list
          SELECT PL.M_PRICELIST_ID, PL.C_CURRENCY_ID 
          INTO v_BP_PriceList_ID, v_BP_PL_Currency_ID
          FROM C_BPARTNER BP, M_PRICELIST PL
          WHERE BP.M_PRICELIST_ID = PL.M_PRICELIST_ID
          AND BP.C_BPARTNER_ID = NEW.C_BPARTNER_ID;
          IF(v_BP_PriceList_ID IS NULL OR v_BP_PL_Currency_ID IS NULL) THEN
            -- Looks for expense sheet header price list
            SELECT PL.M_PRICELIST_ID, PL.C_CURRENCY_ID 
            INTO v_BP_PriceList_ID, v_BP_PL_Currency_ID
            FROM S_TIMEEXPENSE E, M_PRICELIST PL
            WHERE E.M_PRICELIST_ID = PL.M_PRICELIST_ID
            AND PL.M_PRICELIST_ID = (SELECT M_PriceList_ID FROM S_TimeExpense WHERE S_TimeExpense_ID = NEW.S_TimeExpense_ID);
            IF(v_BP_PriceList_ID IS NULL OR v_BP_PL_Currency_ID IS NULL) THEN
              RAISE EXCEPTION '%', 'Price not found for current partner and product.' ; --OBTG:-20555--
            END IF;
          END IF;
          -- Looks for price
          SELECT COUNT(M_BOM_PriceStd(p.M_Product_ID,pv.M_PriceList_Version_ID))
          INTO v_Count
          FROM M_Product p, M_ProductPrice pp, M_Pricelist pl, M_PriceList_Version pv 
          WHERE p.M_Product_ID=pp.M_Product_ID
          AND pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID
          AND pv.M_PriceList_ID=pl.M_PriceList_ID
          AND pv.IsActive='Y'
          AND p.M_Product_ID = NEW.M_PRODUCT_ID
          AND pl.M_PriceList_ID = v_BP_PriceList_ID
          AND pl.C_Currency_ID = v_BP_PL_Currency_ID
          AND SIGN(TO_NUMBER(TO_DATE(COALESCE(NEW.DateExpense, (SELECT DateReport FROM S_TimeExpense WHERE S_TimeExpense_ID = NEW.S_TimeExpense_ID), TO_DATE(NOW())))- TO_DATE(pv.ValidFrom))) <> -1 ;
          IF(v_Count = 0) THEN
            RAISE EXCEPTION '%', 'Price not found for current partner and product.' ; --OBTG:-20555--
          END IF;
        END IF;      
      END IF;
    END IF;
  END IF;

IF TG_OP = 'DELETE' THEN RETURN OLD; ELSE RETURN NEW; END IF; 

END 

; $$;


ALTER FUNCTION public.s_timeexpenseline_trg() OWNER TO tad;

--
-- Name: substr(character varying, numeric, numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION substr(character varying, numeric, numeric) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
return substr($1,CAST((CASE $2 WHEN 0 THEN 1 ELSE $2 END) AS INTEGER), CAST($3 AS INTEGER));
END;
$_$;


ALTER FUNCTION public.substr(character varying, numeric, numeric) OWNER TO tad;

--
-- Name: substract_days(timestamp with time zone, numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION substract_days(timestamp with time zone, numeric) RETURNS date
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN cast($1 AS date) - cast($2 AS int4) ;
END;
$_$;


ALTER FUNCTION public.substract_days(timestamp with time zone, numeric) OWNER TO tad;

--
-- Name: substract_days(timestamp with time zone, integer); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION substract_days(timestamp with time zone, integer) RETURNS date
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN cast($1 AS date) - $2 ;
END;
$_$;


ALTER FUNCTION public.substract_days(timestamp with time zone, integer) OWNER TO tad;

--
-- Name: substract_days(date, numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION substract_days(date, numeric) RETURNS date
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN $1 - cast($2 AS INTEGER) ;
END;
$_$;


ALTER FUNCTION public.substract_days(date, numeric) OWNER TO tad;

--
-- Name: substract_days(timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION substract_days(timestamp with time zone, timestamp with time zone) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
BEGIN
RETURN extract(epoch from ($1 - $2)) / 86400.0::float;
END;
$_$;


ALTER FUNCTION public.substract_days(timestamp with time zone, timestamp with time zone) OWNER TO tad;

--
-- Name: substract_days(timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION substract_days(timestamp without time zone, timestamp without time zone) RETURNS double precision
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN extract(epoch from ($1 - $2)) / 86400.0::float;
END;
$_$;


ALTER FUNCTION public.substract_days(timestamp without time zone, timestamp without time zone) OWNER TO tad;

--
-- Name: to_char(integer); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_char(integer) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN to_char($1, '999999999999D');
END;
$_$;


ALTER FUNCTION public.to_char(integer) OWNER TO tad;

--
-- Name: to_char(bigint); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_char(bigint) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN cast($1 as VARCHAR);
END;
$_$;


ALTER FUNCTION public.to_char(bigint) OWNER TO tad;

--
-- Name: to_char(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_char(timestamp without time zone) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN to_char($1, dateFormat());
END;
$_$;


ALTER FUNCTION public.to_char(timestamp without time zone) OWNER TO tad;

--
-- Name: to_char(date); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_char(date) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN to_char(to_date($1), dateFormat());
END;
$_$;


ALTER FUNCTION public.to_char(date) OWNER TO tad;

--
-- Name: to_char(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_char(character varying) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN $1;
END;
$_$;


ALTER FUNCTION public.to_char(character varying) OWNER TO tad;

--
-- Name: to_char(numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_char(numeric) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN ''||$1;
END;
$_$;


ALTER FUNCTION public.to_char(numeric) OWNER TO tad;

--
-- Name: to_char(text); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_char(text) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN $1;
END;
$_$;


ALTER FUNCTION public.to_char(text) OWNER TO tad;

--
-- Name: to_date(text); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_date(text) RETURNS timestamp without time zone
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN to_timestamp($1, dateFormat());
END;
$_$;


ALTER FUNCTION public.to_date(text) OWNER TO tad;

--
-- Name: to_date(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_date(timestamp with time zone) RETURNS timestamp without time zone
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
  RETURN to_timestamp(to_char($1, dateFormat()||' HH24:MI:SS'), dateFormat()||' HH24:MI:SS');
END;
$_$;


ALTER FUNCTION public.to_date(timestamp with time zone) OWNER TO tad;

--
-- Name: to_date(timestamp without time zone, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_date(timestamp without time zone, character varying) RETURNS timestamp without time zone
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN to_timestamp($1, $2);
END;
$_$;


ALTER FUNCTION public.to_date(timestamp without time zone, character varying) OWNER TO tad;

--
-- Name: to_interval(integer, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_interval(integer, character varying) RETURNS interval
    LANGUAGE plpgsql IMMUTABLE
    AS $_$    
declare    
       interval__number      alias for $1;
       interval__units       alias for $2;
begin

    -- We should probably do unit checking at some point
    return ('''' || interval__number || ' ' || interval__units || '''')::interval;

END;
$_$;


ALTER FUNCTION public.to_interval(integer, character varying) OWNER TO tad;

--
-- Name: to_number(text); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_number(text) RETURNS numeric
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN to_number($1, 'S99999999999999D999999');
EXCEPTION 
  WHEN OTHERS THEN 
    RETURN NULL;
END;
$_$;


ALTER FUNCTION public.to_number(text) OWNER TO tad;

--
-- Name: to_number(interval); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_number(interval) RETURNS numeric
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN extract(epoch FROM ($1))/86400;
EXCEPTION 
  WHEN OTHERS THEN 
    RETURN NULL;
END;
$_$;


ALTER FUNCTION public.to_number(interval) OWNER TO tad;

--
-- Name: to_number(integer); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_number(integer) RETURNS numeric
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN to_number($1, 'S99999999999999D999999');
EXCEPTION 
  WHEN OTHERS THEN 
    RETURN NULL;
END;
$_$;


ALTER FUNCTION public.to_number(integer) OWNER TO tad;

--
-- Name: to_number(bigint); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_number(bigint) RETURNS numeric
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN cast($1 as numeric);
END;
$_$;


ALTER FUNCTION public.to_number(bigint) OWNER TO tad;

--
-- Name: to_number(numeric); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_number(numeric) RETURNS numeric
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN $1;
EXCEPTION 
  WHEN OTHERS THEN 
    RETURN NULL;
END;
$_$;


ALTER FUNCTION public.to_number(numeric) OWNER TO tad;

--
-- Name: to_timestamp(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION to_timestamp(timestamp with time zone) RETURNS timestamp without time zone
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN to_timestamp(to_char($1, dateFormat()), dateFormat());
END;
$_$;


ALTER FUNCTION public.to_timestamp(timestamp with time zone) OWNER TO tad;

--
-- Name: trunc(date, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION trunc(date, character varying) RETURNS date
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE 
  p_transformation VARCHAR;
BEGIN
IF UPPER($2) = 'CC' THEN
  p_transformation := 'century';
ELSIF UPPER($2) = 'YY' THEN
  p_transformation := 'year';
ELSIF UPPER($2) = 'MM' THEN
  p_transformation := 'month';
ELSIF UPPER($2) = 'Q' THEN
  p_transformation := 'quarter';
ELSIF UPPER($2) = 'DAY' THEN
  p_transformation := 'week';
ELSIF UPPER($2) = 'DD' THEN
  p_transformation := 'day';
ELSIF UPPER($2) = 'HH' THEN
  p_transformation := 'hour';
ELSIF UPPER($2) = 'MI' THEN
  p_transformation := 'minute';
ELSE 
  p_transformation := $2;
END IF;
RETURN date_trunc( p_transformation , $1) ;
END;
$_$;


ALTER FUNCTION public.trunc(date, character varying) OWNER TO tad;

--
-- Name: trunc(timestamp with time zone, character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION trunc(timestamp with time zone, character varying) RETURNS date
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE 
  p_transformation VARCHAR;
BEGIN
IF UPPER($2) = 'CC' THEN
  p_transformation := 'century';
ELSIF UPPER($2) = 'YY' THEN
  p_transformation := 'year';
ELSIF UPPER($2) = 'MM' THEN
  p_transformation := 'month';
ELSIF UPPER($2) = 'Q' THEN
  p_transformation := 'quarter';
ELSIF UPPER($2) = 'DAY' THEN
  p_transformation := 'week';
ELSIF UPPER($2) = 'DD' THEN
  p_transformation := 'day';
ELSIF UPPER($2) = 'HH' THEN
  p_transformation := 'hour';
ELSIF UPPER($2) = 'MI' THEN
  p_transformation := 'minute';
ELSE 
  p_transformation := $2;
END IF;
RETURN date_trunc( p_transformation , $1) ;
END;
$_$;


ALTER FUNCTION public.trunc(timestamp with time zone, character varying) OWNER TO tad;

--
-- Name: trunc(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION trunc(timestamp without time zone) RETURNS date
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN to_timestamp(to_char($1, dateFormat()), dateFormat());
END;
$_$;


ALTER FUNCTION public.trunc(timestamp without time zone) OWNER TO tad;

--
-- Name: trunc(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION trunc(timestamp with time zone) RETURNS date
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
RETURN to_timestamp(to_char($1, dateFormat()), dateFormat());
END;
$_$;


ALTER FUNCTION public.trunc(timestamp with time zone) OWNER TO tad;

--
-- Name: update_dateformat(character varying); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION update_dateformat(format character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
  IF (dateformat() <> format) THEN
    EXECUTE 'CREATE OR REPLACE FUNCTION dateFormat() RETURNS VARCHAR AS '' DECLARE BEGIN  RETURN ''''' || format || '''''; EXCEPTION WHEN OTHERS THEN RETURN NULL; END; '' LANGUAGE ''plpgsql'' IMMUTABLE; ';
    RETURN 'dateFormat modified';
  END IF;
  RETURN 'dateFormat not modified';
END;
$$;


ALTER FUNCTION public.update_dateformat(format character varying) OWNER TO tad;

--
-- Name: uuid_generate_v4(); Type: FUNCTION; Schema: public; Owner: tad
--

CREATE OR REPLACE FUNCTION uuid_generate_v4() RETURNS uuid
    LANGUAGE c STRICT
    AS '$libdir/uuid-ossp', 'uuid_generate_v4';


ALTER FUNCTION public.uuid_generate_v4() OWNER TO tad;

--
--
-- Name: +; Type: OPERATOR; Schema: public; Owner: tad
--

CREATE OPERATOR + (
    PROCEDURE = add_days,
    LEFTARG = timestamp with time zone,
    RIGHTARG = numeric,
    COMMUTATOR = +
);


ALTER OPERATOR public.+ (timestamp with time zone, numeric) OWNER TO tad;

--
-- Name: +; Type: OPERATOR; Schema: public; Owner: tad
--

CREATE OPERATOR + (
    PROCEDURE = add_days,
    LEFTARG = date,
    RIGHTARG = numeric,
    COMMUTATOR = +
);


ALTER OPERATOR public.+ (date, numeric) OWNER TO tad;

--
-- Name: -; Type: OPERATOR; Schema: public; Owner: tad
--

CREATE OPERATOR - (
    PROCEDURE = substract_days,
    LEFTARG = date,
    RIGHTARG = numeric
);


ALTER OPERATOR public.- (date, numeric) OWNER TO tad;

--
-- Name: -; Type: OPERATOR; Schema: public; Owner: tad
--

CREATE OPERATOR - (
    PROCEDURE = substract_days,
    LEFTARG = timestamp with time zone,
    RIGHTARG = numeric
);


ALTER OPERATOR public.- (timestamp with time zone, numeric) OWNER TO tad;

--
-- Name: <=; Type: OPERATOR; Schema: public; Owner: tad
--

CREATE OPERATOR <= (
    PROCEDURE = lowerequalnumeric,
    LEFTARG = numeric,
    RIGHTARG = character varying
);


ALTER OPERATOR public.<= (numeric, character varying) OWNER TO tad;

--
-- Name: <=; Type: OPERATOR; Schema: public; Owner: tad
--

CREATE OPERATOR <= (
    PROCEDURE = lowerequaltimestamp,
    LEFTARG = timestamp without time zone,
    RIGHTARG = character varying
);


ALTER OPERATOR public.<= (timestamp without time zone, character varying) OWNER TO tad;

--
-- Name: =; Type: OPERATOR; Schema: public; Owner: tad
--

CREATE OPERATOR = (
    PROCEDURE = equal,
    LEFTARG = numeric,
    RIGHTARG = character varying
);


ALTER OPERATOR public.= (numeric, character varying) OWNER TO tad;

--
-- Name: >=; Type: OPERATOR; Schema: public; Owner: tad
--

CREATE OPERATOR >= (
    PROCEDURE = greaterequal,
    LEFTARG = timestamp without time zone,
    RIGHTARG = character varying
);


ALTER OPERATOR public.>= (timestamp without time zone, character varying) OWNER TO tad;

