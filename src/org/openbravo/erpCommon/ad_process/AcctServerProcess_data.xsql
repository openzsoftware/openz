<?xml version="1.0" encoding="UTF-8" ?>
<!--
 ***************************************************************************************************************************************************
* The contents of this file are subject to the Openbravo  Public  License Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html. Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the specific  language  governing  rights  and  limitations
* under the License. The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL. Parts created by Openbravo are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s): Stefan Zimmermann, sz@zimmermann-software.de (SZ) Contributions are Copyright (C) 2011 Stefan Zimmermann
****************************************************************************************************************************************************
* Purpose: Don't load Tables that are not in ACCT-Server anymore.
* 800168 (Internal Consumption) Is done in Database-Proc
**************************************************************************************
-->

<SqlClass name="AcctServerProcessData" package="org.openbravo.erpCommon.ad_process">
   <SqlClassComment></SqlClassComment>
   <SqlMethod name="selectUserOrg" type="preparedStatement" return="multiple">
      <SqlMethodComment></SqlMethodComment>
      <Sql><![CDATA[
      SELECT CREATEDBY AS AD_USER_ID, AD_ORG_ID, '' AS AD_TABLE_ID FROM AD_PROCESS
      WHERE AD_PROCESS_ID = ?
    ]]></Sql>
    <Parameter name="adProcessId"/>
   </SqlMethod>
   <SqlMethod name="selectTable" type="preparedStatement" return="String" default="">
      <SqlMethodComment></SqlMethodComment>
      <Sql><![CDATA[
      SELECT P_STRING FROM AD_PINSTANCE_PARA
      WHERE AD_PINSTANCE_ID = ?
      AND PARAMETERNAME = 'AD_Table_ID'
    ]]></Sql>
    <Parameter name="adPinstanceId"/>
   </SqlMethod>
   <SqlMethod name="selectAcctTable" type="preparedStatement" return="multiple">
      <SqlMethodComment></SqlMethodComment>
      <Sql><![CDATA[
      SELECT DISTINCT ad_table_id 
      FROM C_ACCTSCHEMA_TABLE
      WHERE isactive = 'Y' and AD_TABLE_ID!='800168'
      ORDER BY ad_table_id
    ]]></Sql>
   </SqlMethod>
   <SqlMethod name="selectDescription" type="preparedStatement" return="string">
      <SqlMethodComment></SqlMethodComment>
      <Sql><![CDATA[
                SELECT (case when ad_table.po_window_id is null then '' else ad_column_identifier('AD_Window',TO_CHAR(ad_table.po_window_id),?) end)||
                  (case when ad_table.po_window_id is null then '' else ' - ' end)||
                  ad_column_identifier('AD_Window',TO_CHAR(ad_table.ad_window_id),?)
                FROM AD_TABLE 
                WHERE AD_TABLE_ID = ?
    ]]></Sql>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="adTableId"/>
   </SqlMethod>
   <SqlMethod name="insert" type="preparedStatement" return="rowCount">
      <SqlMethodComment></SqlMethodComment>
      <Sql>
        INSERT INTO AD_NOTE (AD_NOTE_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE, CREATED, CREATEDBY, UPDATED, UPDATEDBY, 
        AD_MESSAGE_ID, TEXT) 
        VALUES (?, ?, 0, 'Y', now(), 0, now(), 0, (SELECT MIN(AD_MESSAGE_ID) FROM AD_MESSAGE), ?)
      </Sql>
      <Parameter name="adNoteId"/>
      <Parameter name="adClientId"/>
      <Parameter name="text"/>
   </SqlMethod>
   <SqlMethod name="update" type="preparedStatement" return="rowCount">
      <SqlMethodComment></SqlMethodComment>
      <Sql>
        UPDATE AD_NOTE SET UPDATED=now(), UPDATEDBY=0, TEXT=? 
        WHERE AD_NOTE_ID = ?
      </Sql>
      <Parameter name="text"/>
      <Parameter name="adNoteId"/>
   </SqlMethod>
   <SqlMethod name="selectOrg" type="preparedStatement" return="String" default="">
     <SqlMethodComment></SqlMethodComment>
     <Sql><![CDATA[
       SELECT P_STRING FROM AD_PINSTANCE_PARA
       WHERE AD_PINSTANCE_ID = ?
       AND PARAMETERNAME = 'AD_Org_ID'
     ]]></Sql>
     <Parameter name="adPinstanceId"/>
   </SqlMethod>
   <SqlMethod name="cleartempitems" type="preparedStatement" return="rowCount">
      <SqlMethodComment></SqlMethodComment>
      <Sql>
        delete from  fact_acct_tempitems
      </Sql>
   </SqlMethod>
   <SqlMethod name="processDownPaymentsTempItems" type="preparedStatement" return="string">
      <SqlMethodComment></SqlMethodComment>
      <Sql>
        select zsfi_processDownPaymentsTempItems() from dual
      </Sql>
   </SqlMethod>
</SqlClass>
