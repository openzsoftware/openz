<?xml version="1.0" encoding="UTF-8" ?>
<!--
***************************************************************************************************************************************************
* The contents of this file are subject to the Openbravo  Public  License Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html. Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the specific  language  governing  rights  and  limitations
* under the License. The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL. Parts created by Openbravo are Copyright (C) 2001-2010 Openbravo SL
* All Rights Reserved.
* Contributor(s): Stefan Zimmermann, sz@zimmermann-software.de (SZ) Contributions are Copyright (C) 2011 Stefan Zimmermann
****************************************************************************************************************************************************
* Price Fixing..
**************************************************************************************
-->

<SqlClass name="RequisitionToOrderData" package="org.openbravo.erpCommon.ad_forms">
  <SqlClassComment></SqlClassComment>
  <SqlMethod name="select" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT '' AS M_REQUISITIONLINE_ID, '' AS REQQTY, '' AS MATCHEDQTY, '' AS QTYTOORDER, 
          '' AS M_PRICELIST_ID, '' AS NEEDBYDATE, '' AS PRICELIST, '' AS PRICE,
          '' AS M_PRODUCT_ID, '' AS M_ATTRIBUTESETINSTANCE_ID, '' AS VENDOR_ID, '' AS VENDOR, 
          '' AS PRODUCT, '' AS TOOLTIPPRODUCT, '' AS ATTRIBUTE, ''  AS REQUESTER, '' AS PRICELISTID, '' AS VENDORPRICELIST,
          '' AS LOCKEDBY, '' AS LOCKQTY, '' AS LOCKPRICE, '' AS AD_ORG_ID, '' AS ORG, 
          '' AS InvoiceRule, '' AS DeliveryRule, '' AS FreightCostRule, '' AS DeliveryViaRule,
          '' AS PaymentRulePO, '' AS PO_PaymentTerm_ID, '' AS NOTE, '' AS C_UOM_ID,
          '' AS PRICELIMIT, '' AS PRICEACTUAL, '' AS DISCOUNT, '' AS TAX, '' AS C_ORDERLINE_ID,
          '' AS PADRE, '' AS ID, '' AS NAME, '' AS PRICESTD, '' AS TO_CLOSE,
          '' as PROJECT,''  as INTERNALNOTE,
          '' as TOOLTIPINTERNALNOTE, '' as TOOLTIPNOTE, '' AS DOCUMENTNO,
          '' AS A_ASSET_ID, '' AS C_PROJECT_ID,'' AS C_PROJECTPHASE_ID, '' AS C_PROJECTTASK_ID,'' as description,'' as typeofproduct,'' as category
        FROM DUAL
      ]]></Sql>
    <Field name="rownum" value="count"/>
  </SqlMethod>
  <SqlMethod name="set" type="constant" return="multiple">
      <SqlMethodComment></SqlMethodComment>
      <Sql></Sql>
  </SqlMethod>
  <SqlMethod name="selectLines" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT M_REQUISITIONLINE_ID, M_REQUISITIONLINE.NEEDBYDATE,
          zssi_strNumber2(M_REQUISITIONLINE.QTY - M_REQUISITIONLINE.ORDEREDQTY,?) AS QTYTOORDER, M_REQUISITION.DOCUMENTNO,
          zssi_strNumber(coalesce(M_REQUISITIONLINE.priceactual,m_get_offers_price(to_date(now()),coalesce(M_REQUISITIONLINE.C_BPARTNER_ID,M_REQUISITION.C_BPARTNER_ID,m_product.C_BPARTNER_ID),
                             M_REQUISITIONLINE.M_PRODUCT_ID,null,  M_REQUISITIONLINE.QTY - M_REQUISITIONLINE.ORDEREDQTY,
                             ( select po_pricelist_id from c_bpartner where c_bpartner_id=coalesce(M_REQUISITIONLINE.C_BPARTNER_ID,M_REQUISITION.C_BPARTNER_ID,m_product.C_BPARTNER_ID)))),?)   AS PRICE,
          AD_COLUMN_IDENTIFIER(to_char('C_BPartner'), coalesce(M_REQUISITIONLINE.C_BPARTNER_ID,M_REQUISITION.C_BPARTNER_ID,m_product.C_BPARTNER_ID), ?) AS VENDOR,
          AD_COLUMN_IDENTIFIER(to_char('M_PriceList'), ( select po_pricelist_id from c_bpartner where c_bpartner_id=coalesce(M_REQUISITIONLINE.C_BPARTNER_ID,M_REQUISITION.C_BPARTNER_ID,m_product.C_BPARTNER_ID)), ?) AS PRICELISTID,
          zssi_nomultiline(AD_COLUMN_IDENTIFIER(to_char('M_Product'), to_char(M_REQUISITIONLINE.M_PRODUCT_ID), ?)) AS PRODUCT,
          zssi_2HTML(AD_COLUMN_IDENTIFIER(to_char('M_Product'), to_char(M_REQUISITIONLINE.M_PRODUCT_ID), ?)) AS TOOLTIPPRODUCT,
          zssi_getprojectorcostcentername(M_REQUISITIONLINE.c_project_id,M_REQUISITIONLINE.a_asset_id) as PROJECT,
          zssi_nomultiline(M_REQUISITIONLINE.suppliernotes) as NOTE,
          zssi_2HTML(M_REQUISITIONLINE.suppliernotes) as TOOLTIPNOTE,
          zssi_nomultiline(M_REQUISITIONLINE.internalnotes) as INTERNALNOTE,
          zssi_2HTML(M_REQUISITIONLINE.internalnotes) as TOOLTIPINTERNALNOTE,
          zssi_2HTML(M_PRODUCT.description) as description,
          M_PRODUCT.typeofproduct,
          zssi_getIdentifierFromKey('m_product_category_id',M_PRODUCT.m_product_category_id,?) as category,
          AD_COLUMN_IDENTIFIER(to_char('M_AttributeSetInstance'), to_char(M_REQUISITIONLINE.M_ATTRIBUTESETINSTANCE_ID), ?) AS ATTRIBUTE,
          AD_COLUMN_IDENTIFIER(to_char('AD_User'), to_char(M_REQUISITION.AD_USER_ID), ?) AS REQUESTER
        FROM M_REQUISITIONLINE, M_REQUISITION,M_PRODUCT 
        WHERE M_REQUISITIONLINE.M_REQUISITION_ID = M_REQUISITION.M_REQUISITION_ID
          AND M_PRODUCT.M_PRODUCT_ID=M_REQUISITIONLINE.M_PRODUCT_ID
          AND M_REQUISITION.ISACTIVE = 'Y'
          AND M_REQUISITIONLINE.ISACTIVE = 'Y'
          AND M_REQUISITION.DOCSTATUS = 'CO'
          AND M_REQUISITIONLINE.REQSTATUS = 'O'
          
          AND case M_REQUISITIONLINE.REJECTED when 'Y' then 1=1 else M_REQUISITIONLINE.LOCKEDBY IS NULL end
          AND M_REQUISITION.AD_CLIENT_ID IN ('1')
          AND M_REQUISITIONLINE.AD_ORG_ID IN ('1')
          AND M_REQUISITIONLINE.REJECTED IN ('1')
          AND 1=1
        ORDER BY M_REQUISITIONLINE.NEEDBYDATE, M_REQUISITIONLINE.M_PRODUCT_ID, M_REQUISITIONLINE.C_BPARTNER_ID, M_REQUISITIONLINE.M_ATTRIBUTESETINSTANCE_ID
      ]]></Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND M_REQUISITION.AD_CLIENT_ID IN (" text="'1'"/>
    <Parameter name="adOrgId" optional="true" type="replace" after="AND M_REQUISITIONLINE.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="prejected" optional="true" type="replace" after="M_REQUISITIONLINE.REJECTED IN (" text="'1'"/>
    <Parameter name="parDateFrom" optional="true" after="AND 1=1"><![CDATA[ AND M_REQUISITIONLINE.NEEDBYDATE >= TO_DATE(?)]]></Parameter>
    <Parameter name="parDateTo" optional="true" after="AND 1=1"><![CDATA[ AND M_REQUISITIONLINE.NEEDBYDATE < TO_DATE(?)]]></Parameter>
    <Parameter name="parProduct" optional="true" after="AND 1=1"><![CDATA[ AND M_REQUISITIONLINE.M_PRODUCT_ID = TO_CHAR(?)]]></Parameter>
    <Parameter name="parRequester" optional="true" after="AND 1=1"><![CDATA[ AND M_REQUISITION.AD_USER_ID = TO_CHAR(?)]]></Parameter>
    <Parameter name="parVendorInc" optional="true" after="AND 1=1"><![CDATA[ AND (COALESCE(M_REQUISITIONLINE.C_BPARTNER_ID, M_REQUISITION.C_BPARTNER_ID,'-1') = TO_CHAR(?) OR (M_REQUISITIONLINE.C_BPARTNER_ID IS NULL AND M_REQUISITION.C_BPARTNER_ID IS NULL))]]></Parameter>
    <Parameter name="parVendor" optional="true" after="AND 1=1"><![CDATA[ AND COALESCE(M_REQUISITIONLINE.C_BPARTNER_ID, M_REQUISITION.C_BPARTNER_ID,'-1') = TO_CHAR(?)]]></Parameter>
    <Parameter name="parProject" optional="true" after="AND 1=1"><![CDATA[ AND M_REQUISITIONLINE.c_project_id = ? ]]></Parameter>
    <Parameter name="parPrdDesc" optional="true" after="AND 1=1"><![CDATA[ AND upper(coalesce(M_PRODUCT.description,'')) like upper(?) ]]></Parameter>
    <Parameter name="parPrdCategory" optional="true" after="AND 1=1"><![CDATA[ AND M_PRODUCT.m_product_category_id = ? ]]></Parameter>
    <Parameter name="parPrdType" optional="true" after="AND 1=1"><![CDATA[ AND M_PRODUCT.typeofproduct = ? ]]></Parameter>
  </SqlMethod>
  <SqlMethod name="selectSelected" type="preparedStatement" return="Multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT M_REQUISITIONLINE.M_REQUISITIONLINE_ID, M_REQUISITIONLINE.NEEDBYDATE, zssi_strNumber2(M_REQUISITIONLINE.QTY,?) AS REQQTY,
          M_REQUISITIONLINE.ORDEREDQTY AS MATCHEDQTY, M_REQUISITION.DOCUMENTNO,
          coalesce(m_get_offers_price(to_date(now()),coalesce(M_REQUISITIONLINE.C_BPARTNER_ID,M_REQUISITION.C_BPARTNER_ID,m_product.C_BPARTNER_ID),
                             M_REQUISITIONLINE.M_PRODUCT_ID,null,  M_REQUISITIONLINE.QTY - M_REQUISITIONLINE.ORDEREDQTY,
                             ( select po_pricelist_id from c_bpartner where c_bpartner_id=coalesce(M_REQUISITIONLINE.C_BPARTNER_ID,M_REQUISITION.C_BPARTNER_ID,m_product.C_BPARTNER_ID))),0) AS PRICELIST,
          COALESCE(LOCKQTY, QTY-ORDEREDQTY) AS LOCKQTY,
          coalesce(M_REQUISITIONLINE.lockprice,coalesce(M_REQUISITIONLINE.priceactual,m_get_offers_price(to_date(now()),coalesce(M_REQUISITIONLINE.C_BPARTNER_ID,M_REQUISITION.C_BPARTNER_ID,m_product.C_BPARTNER_ID),
                             M_REQUISITIONLINE.M_PRODUCT_ID,null,  M_REQUISITIONLINE.QTY - M_REQUISITIONLINE.ORDEREDQTY,
                             ( select po_pricelist_id from c_bpartner where c_bpartner_id=coalesce(M_REQUISITIONLINE.C_BPARTNER_ID,M_REQUISITION.C_BPARTNER_ID,m_product.C_BPARTNER_ID)))))   AS LOCKPRICE,
          coalesce(M_REQUISITIONLINE.C_BPARTNER_ID,M_REQUISITION.C_BPARTNER_ID,m_product.C_BPARTNER_ID,'-1') AS VENDOR_ID,
          COALESCE(( select po_pricelist_id from c_bpartner where c_bpartner_id=coalesce(M_REQUISITIONLINE.C_BPARTNER_ID,M_REQUISITION.C_BPARTNER_ID,m_product.C_BPARTNER_ID)), '-1') AS M_PRICELIST_ID,
          AD_COLUMN_IDENTIFIER(to_char('C_BPartner'), coalesce(M_REQUISITIONLINE.C_BPARTNER_ID,M_REQUISITION.C_BPARTNER_ID,m_product.C_BPARTNER_ID), ?) AS VENDOR,
          AD_COLUMN_IDENTIFIER(to_char('M_PriceList'), ( select po_pricelist_id from c_bpartner where c_bpartner_id=coalesce(M_REQUISITIONLINE.C_BPARTNER_ID,M_REQUISITION.C_BPARTNER_ID,m_product.C_BPARTNER_ID)), ?) AS PRICELISTID,
          AD_COLUMN_IDENTIFIER(to_char('M_Product'), to_char(M_REQUISITIONLINE.M_PRODUCT_ID), ?) AS PRODUCT,
          zssi_2HTML(AD_COLUMN_IDENTIFIER(to_char('M_Product'), to_char(M_REQUISITIONLINE.M_PRODUCT_ID), ?)) AS TOOLTIPPRODUCT,
          zssi_getprojectorcostcentername(M_REQUISITIONLINE.c_project_id,M_REQUISITIONLINE.a_asset_id) as PROJECT,
          zssi_nomultiline(M_REQUISITIONLINE.suppliernotes) as NOTE,
          zssi_2HTML(M_REQUISITIONLINE.suppliernotes) as TOOLTIPNOTE,
          zssi_nomultiline(M_REQUISITIONLINE.internalnotes) as INTERNALNOTE,
          zssi_2HTML(M_REQUISITIONLINE.internalnotes) as TOOLTIPINTERNALNOTE,
          zssi_2HTML(M_PRODUCT.description) as description,
          M_PRODUCT.typeofproduct,
          zssi_getIdentifierFromKey('m_product_category_id',M_PRODUCT.m_product_category_id,?) as category,
          AD_COLUMN_IDENTIFIER(to_char('M_AttributeSetInstance'), to_char(M_REQUISITIONLINE.M_ATTRIBUTESETINSTANCE_ID), ?) AS ATTRIBUTE
        FROM M_REQUISITION, M_REQUISITIONLINE,M_PRODUCT 
        WHERE M_REQUISITION.M_REQUISITION_ID = M_REQUISITIONLINE.M_REQUISITION_ID
          AND M_PRODUCT.M_PRODUCT_ID=M_REQUISITIONLINE.M_PRODUCT_ID
          AND M_REQUISITION.ISACTIVE = 'Y'
          AND COALESCE(LOCKQTY, QTY-ORDEREDQTY)>=0
          AND M_REQUISITIONLINE.ISACTIVE = 'Y'
          AND M_REQUISITION.DOCSTATUS = 'CO'
          AND M_REQUISITIONLINE.REQSTATUS = 'O'
          AND case ? when 'Y' then (case ? when 'Y' then M_REQUISITIONLINE.LOCKEDBY is not null and M_REQUISITIONLINE.REJECTED='N' else M_REQUISITIONLINE.LOCKEDBY is not null and M_REQUISITIONLINE.REJECTED='N' end) else M_REQUISITIONLINE.LOCKEDBY = ? end
          AND M_REQUISITION.AD_CLIENT_ID IN ('1')
          AND M_REQUISITIONLINE.AD_ORG_ID IN ('1')
        ORDER BY  VENDOR, M_REQUISITION.DOCUMENTNO, PRODUCT
        ]]></Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="language"/>
    <Parameter name="isWorkflowActive"/>
    <Parameter name="isWorkflowApprover"/>
    <Parameter name="adUserId"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND M_REQUISITION.AD_CLIENT_ID IN (" text="'1'"/>
    <Parameter name="adOrgId" optional="true" type="replace" after="AND M_REQUISITIONLINE.AD_ORG_ID IN (" text="'1'"/>
  </SqlMethod>
  <SqlMethod name="linesToOrder" type="preparedStatement" return="Multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT l.M_PRODUCT_ID, l.M_ATTRIBUTESETINSTANCE_ID, l.LOCKQTY,coalesce(l.suppliernotes,'')||zspr_getproductdocnoteCpyText(l.ad_org_id,l.m_product_id,r.c_bpartner_id,u.c_uom_id) AS NOTE, l.C_UOM_ID, 
          l.M_REQUISITIONLINE_ID, '' AS C_ORDERLINE_ID,
          COALESCE(l.PRICELIST, l.LOCKPRICE) AS PRICELIST,
          l.LOCKPRICE AS PRICELIMIT,
          l.LOCKPRICE AS PRICESTD,
          COALESCE(l.PRICEACTUAL, l.LOCKPRICE) AS PRICEACTUAL,
          0 AS DISCOUNT,
          zsfi_GetTax(?,l.M_PRODUCT_ID, ?) AS TAX,
          CASE WHEN LOCKQTY < (l.QTY - l.ORDEREDQTY) THEN 'N' ELSE 'Y' END AS TO_CLOSE,
          l.a_asset_id,l.c_project_id,l.c_projectphase_id,l.c_projecttask_id
        FROM M_REQUISITIONLINE l left join m_product_uom u on u.m_product_uom_id=l.m_product_uom_id,m_requisition r 
        WHERE 1=1
        and r.m_requisition_id=l.m_requisition_id
        ORDER BY l.M_PRODUCT_ID, l.M_ATTRIBUTESETINSTANCE_ID, l.SUPPLIERNOTES, l.LOCKPRICE
        ]]></Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="billto"/>
    <Parameter name="org"/>
    <Parameter name="parRequisitionLines" optional="true" type="argument" after="WHERE 1=1" text=" AND M_RequisitionLine_ID IN"/>
  </SqlMethod>
  <SqlMethod name="selecttask" type="preparedStatement" return="String">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT c_projecttask_id
        FROM M_REQUISITIONLINE 
        WHERE 1=1
        order by line limit 1
        ]]></Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="parRequisitionLines" optional="true" type="argument" after="WHERE 1=1" text=" AND M_RequisitionLine_ID IN"/>
  </SqlMethod>
  <SqlMethod name="selectproject" type="preparedStatement" return="String">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT c_project_id
        FROM M_REQUISITIONLINE 
        WHERE 1=1
        order by line limit 1
        ]]></Sql>
    <Field name="rownum" value="count"/>
    <Parameter name="parRequisitionLines" optional="true" type="argument" after="WHERE 1=1" text=" AND M_RequisitionLine_ID IN"/>
  </SqlMethod>
  <SqlMethod name="selectVendor" type="preparedStatement" return="Multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      SELECT DISTINCT COALESCE(M_REQUISITIONLINE.C_BPARTNER_ID, M_REQUISITION.C_BPARTNER_ID) AS VENDOR_ID
      FROM M_REQUISITIONLINE, M_REQUISITION
      WHERE M_REQUISITION.M_REQUISITION_ID = M_REQUISITIONLINE.M_REQUISITION_ID
        AND COALESCE(M_REQUISITIONLINE.C_BPARTNER_ID, M_REQUISITION.C_BPARTNER_ID) IS NOT NULL
        AND 1=1
      ]]></Sql>
    <Parameter name="parRequisitionLines" optional="true" type="argument" after="AND 1=1" text="AND M_RequisitionLine_ID IN"/>
  </SqlMethod>
  <SqlMethod name="selectPriceList" type="preparedStatement" return="Multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT DISTINCT c_bpartner.po_pricelist_id AS M_PRICELIST_ID,
          AD_COLUMN_IDENTIFIER(to_char('M_PriceList'), c_bpartner.po_pricelist_id, ?) AS PRICELISTID
        FROM M_REQUISITIONLINE, M_REQUISITION, c_bpartner 
        WHERE M_REQUISITION.M_REQUISITION_ID = M_REQUISITIONLINE.M_REQUISITION_ID
          AND coalesce(M_REQUISITIONLINE.c_bpartner_id,M_REQUISITION.c_bpartner_id)=c_bpartner.c_bpartner_id
          AND 1=1
          ]]></Sql>
    <Parameter name="language"/>
    <Parameter name="parRequisitionLines" optional="true" type="argument" after="AND 1=1" text="AND M_RequisitionLine_ID IN"/>
  </SqlMethod>
  <SqlMethod name="selectOrg" type="preparedStatement" return="Multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT DISTINCT AD_ORG_ID,
          AD_COLUMN_IDENTIFIER(to_char('AD_Org'), to_char(AD_ORG_ID), ?) AS ORG
        FROM M_REQUISITIONLINE
        WHERE 1=1
          ]]></Sql>
    <Parameter name="language"/>
    <Parameter name="parRequisitionLines" optional="true" type="argument" after="WHERE 1=1" text="AND M_RequisitionLine_ID IN"/>
  </SqlMethod>
  <SqlMethod name="selectNoPrice" type="preparedStatement" return="Multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT DISTINCT M_PRODUCT_ID,
          AD_COLUMN_IDENTIFIER(to_char('M_Product'), to_char(M_REQUISITIONLINE.M_PRODUCT_ID), ?) AS PRODUCT
        FROM M_REQUISITIONLINE
        WHERE NOT EXISTS ( SELECT 1 FROM M_PRODUCTPRICE
                           WHERE M_REQUISITIONLINE.M_PRODUCT_ID = M_PRODUCTPRICE.M_PRODUCT_ID
                           AND M_PRODUCTPRICE.M_PRICELIST_VERSION_ID = ? )
          AND LOCKPRICE IS NULL
          AND 1=1
          ]]></Sql>
    <Parameter name="language"/>
    <Parameter name="pricelistversion"/>
    <Parameter name="parRequisitionLines" optional="true" type="argument" after="AND 1=1" text=" AND M_RequisitionLine_ID IN"/>
  </SqlMethod>
  <SqlMethod name="selectWarehouseDouble" type="preparedStatement" return="Multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT AD_ORG.AD_ORG_ID AS PADRE, M_WAREHOUSE.M_WAREHOUSE_ID AS ID, M_WAREHOUSE.NAME AS NAME
        FROM M_WAREHOUSE, AD_ORG
        WHERE AD_ISORGINCLUDED(AD_ORG.AD_ORG_ID, M_WAREHOUSE.AD_ORG_ID, ?) <> -1
          AND AD_ORG.AD_ORG_ID IN ('1')
          AND M_WAREHOUSE.AD_CLIENT_ID IN ('1')
        ORDER BY PADRE, NAME
      ]]></Sql>
    <Parameter name="clientid"/>
    <Parameter name="adOrgId" optional="true" type="replace" after="AND AD_ORG.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="adclient" optional="true" type="replace" after="AND M_WAREHOUSE.AD_CLIENT_ID IN (" text="'1'"/>
  </SqlMethod>
  <SqlMethod name="selectVendorData" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      SELECT p.InvoiceRule, p.DeliveryRule, DeliveryViaRule,
        p.PaymentRulePO, p.PO_PaymentTerm_ID
      FROM C_BPartner p
      WHERE p.C_BPartner_ID = ?
      ]]>
    </Sql>
    <Parameter name="cBpartnerId"/>
  </SqlMethod>
  <SqlMethod name="bPartnerDescription" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT AD_COLUMN_IDENTIFIER(to_char('C_BPartner'), to_char(?), to_char(?)) AS VENDOR
        FROM DUAL
        ]]></Sql>
    <Parameter name="partnerid"/>
    <Parameter name="language"/>
  </SqlMethod>
  <SqlMethod name="mProductDescription" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT AD_COLUMN_IDENTIFIER(to_char('M_Product'), to_char(?), to_char(?)) AS PRODUCT
        FROM DUAL
        ]]></Sql>
    <Parameter name="productid"/>
    <Parameter name="language"/>
  </SqlMethod>
  <SqlMethod name="getPricelistVersion" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT M_GET_PRICELIST_VERSION(?, to_date(?)) AS PRICELISTID
        FROM DUAL
        ]]></Sql>
    <Parameter name="pricelist"/>
    <Parameter name="orderdate"/>
  </SqlMethod>
  <SqlMethod name="treeOrg" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT AD_TREE_ORG_ID FROM AD_CLIENTINFO
        WHERE AD_CLIENT_ID = ?
        ]]></Sql>
    <Parameter name="client"/>
  </SqlMethod>
  <SqlMethod name="cDoctypeTarget" type="preparedStatement" connection="true" return="string" default="">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT AD_GET_DOCTYPE(?, ?, 'POO', null) FROM DUAL
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
  </SqlMethod>
  <SqlMethod name="cBPartnerLocationId" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT MAX(C_BPARTNER_LOCATION_ID) FROM C_BPARTNER_LOCATION
        WHERE C_BPARTNER_ID = ?
        AND C_BPartner_Location.IsActive='Y'
      ]]>
    </Sql>
    <Parameter name="cBpartnerId"/>
  </SqlMethod>
  <SqlMethod name="billto" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT MAX(C_BPARTNER_LOCATION_ID) FROM C_BPARTNER_LOCATION
        WHERE  C_BPartner_Location.IsBillTo='Y'
        AND C_BPartner_Location.IsActive='Y'
        AND C_BPARTNER_ID = ?
      ]]>
    </Sql>
    <Parameter name="cBpartnerId"/>
  </SqlMethod>
  <SqlMethod name="selectCurrency" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT C_CURRENCY_ID
        FROM M_PRICELIST
        WHERE  M_PRICELIST_ID = ?
      ]]>
    </Sql>
    <Parameter name="mPricelistId"/>
  </SqlMethod>
  <SqlMethod name="selectPricelistversion" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       SELECT M_PRICELIST_VERSION_ID  FROM M_PRICELIST_VERSION
          WHERE M_PRICELIST_ID= ? and  VALIDFROM =    (SELECT max(VALIDFROM)    FROM M_PRICELIST_VERSION   WHERE M_PRICELIST_ID= ? and VALIDFROM<=TO_DATE(NOW()))
      ]]>
    </Sql>
    <Parameter name="mPricelistId"/>
    <Parameter name="mPricelistId"/>
  </SqlMethod>
  <SqlMethod name="unlock" type="preparedStatement" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE M_REQUISITIONLINE
        SET LOCKEDBY = null,
            LOCKPRICE = null,
            LOCKQTY = null,
            LOCKDATE = null,
            LOCKCAUSE = null
        WHERE M_REQUISITIONLINE_ID IN ('1')
      ]]>
    </Sql>
    <Parameter name="requisitionlines" type="replace" optional="true" after="M_REQUISITIONLINE_ID IN " text="('1')"/>
  </SqlMethod>
  <SqlMethod name="lock" type="preparedStatement"  return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE M_REQUISITIONLINE
        SET LOCKEDBY = ?,
            LOCKDATE = now(),
            LOCKQTY = null,
            LOCKPRICE = null,
            LOCKCAUSE = 'M',
            REJECTED ='N'
        WHERE M_REQUISITIONLINE_ID IN ('1')
      ]]>
    </Sql>
    <Parameter name="userId"/>
    <Parameter name="requisitionlines" type="replace" optional="true" after="M_REQUISITIONLINE_ID IN " text="('1')"/>
  </SqlMethod>
  <SqlMethod name="reject" type="preparedStatement"  return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE M_REQUISITIONLINE
        SET REJECTED = 'Y',
            LOCKEDBY = ?,
            LOCKDATE = now(),
            UPDATEDBY = ?,
            UPDATED = now()
        WHERE M_REQUISITIONLINE_ID IN ('1')
      ]]>
    </Sql>
    <Parameter name="userId"/>
    <Parameter name="userId"/>
    <Parameter name="requisitionlines" type="replace" optional="true" after="M_REQUISITIONLINE_ID IN " text="('1')"/>
  </SqlMethod>
  <SqlMethod name="updateLock" type="preparedStatement"  return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE M_REQUISITIONLINE
        SET LOCKQTY = to_number(?),
            LOCKPRICE = to_number(?)
        WHERE M_REQUISITIONLINE_ID = ?
      ]]>
    </Sql>
    <Parameter name="lockQty"/>
    <Parameter name="lockPrice"/>
    <Parameter name="mRequisitionLineId"/>
  </SqlMethod>
  <SqlMethod name="insertCOrder" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        INSERT INTO C_ORDER (C_ORDER_ID, AD_CLIENT_ID, AD_ORG_ID, CREATED, CREATEDBY, UPDATED, UPDATEDBY, DOCUMENTNO,
        DOCSTATUS, DOCACTION, C_DOCTYPE_ID, C_DOCTYPETARGET_ID,
        DATEORDERED, DATEPROMISED, DATEACCT, C_BPARTNER_ID, C_BPARTNER_LOCATION_ID, BILLTO_ID, C_CURRENCY_ID, 
        PAYMENTRULE, C_PAYMENTTERM_ID, INVOICERULE, DELIVERYRULE, FREIGHTCOSTRULE, 
        DELIVERYVIARULE, M_WAREHOUSE_ID, M_PRICELIST_ID, 
        PRIORITYRULE, ISSOTRX,PROCESSING,salesrep_id,c_project_id,c_projecttask_id)
        VALUES (?,?,?,now(),?,now(),?,?,?,?,?,?,TO_DATE(?),TO_DATE(?),TO_DATE(?),?,?,?,?,?,?,?,?,?,?,?,?,'5', 'N','N',?,?,?)
      ]]>
    </Sql>
    <Parameter name="cOrderId"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="documentNo"/>
    <Parameter name="docStatus"/>
    <Parameter name="docAction"/>
    <Parameter name="cDoctypeId"/>
    <Parameter name="cDoctypetargetId"/>
    <Parameter name="dateordered"/>
    <Parameter name="datepromised"/>
    <Parameter name="dateacct"/>
    <Parameter name="cBpartnerId"/>
    <Parameter name="cBpartnerLocationId"/>
    <Parameter name="billtoId"/>
    <Parameter name="cCurrencyId"/>
    <Parameter name="paymentrule"/>
    <Parameter name="cPaymenttermId"/>
    <Parameter name="invoicerule"/>
    <Parameter name="deliveryrule"/>
    <Parameter name="freightcostrule"/>
    <Parameter name="deliveryviarule"/>
    <Parameter name="mWarehouseId"/>
    <Parameter name="mPricelistId"/>
    <Parameter name="user"/>
    <Parameter name="project"/>
    <Parameter name="projecttask"/>
  </SqlMethod>
  <SqlMethod name="insertCOrderline" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        INSERT INTO C_ORDERLINE (C_ORDERLINE_ID, AD_CLIENT_ID, AD_ORG_ID, CREATED, CREATEDBY, UPDATED, UPDATEDBY,
        C_ORDER_ID, LINE, C_BPARTNER_ID, C_BPARTNER_LOCATION_ID, DATEORDERED, DATEPROMISED, 
        DESCRIPTION, M_PRODUCT_ID, M_ATTRIBUTESETINSTANCE_ID,
        M_WAREHOUSE_ID, C_UOM_ID, QTYORDERED, C_CURRENCY_ID, 
        PRICELIST, 
        PRICEACTUAL,
        PRICESTD, 
        C_TAX_ID, DISCOUNT, 
        A_ASSET_ID, C_PROJECT_ID, C_PROJECTPHASE_ID, C_PROJECTTASK_ID) 
        VALUES (?,?,?,now(),?,now(),?,
        ?,TO_NUMBER(?),?,?,TO_DATE(?),TO_DATE(?),
        ?,?,?,
        ?, ?,TO_NUMBER(?),?,
        m_bom_pricelist(?,?), 
        coalesce(TO_NUMBER(?),m_get_offers_price(to_date(now()),?,?,0.0,TO_NUMBER(?),?)),
        m_bom_pricestd(?,?), 
        ?, TO_NUMBER(?), 
        ?,?,?,?)
      ]]>
    </Sql>
    <Parameter name="cOrderlineId"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="cOrderId"/>
    <Parameter name="line"/>
    <Parameter name="cBpartnerId"/>
    <Parameter name="cBpartnerLocationId"/>
    <Parameter name="dateordered"/>
    <Parameter name="datepromised"/>
    <Parameter name="description"/>
    <Parameter name="mProductId"/>
    <Parameter name="mAttributeSetInstanceId"/>
    <Parameter name="mWarehouseId"/>
    <Parameter name="cUomId"/>
    <Parameter name="qtyordered"/>
    <Parameter name="cCurrencyId"/>
    <Parameter name="mProductId"/>
    <Parameter name="plvId"/>
    <Parameter name="priceactual"/>
    <Parameter name="cBpartnerId"/>
    <Parameter name="mProductId"/>
    <Parameter name="qtyordered"/>
    <Parameter name="pricelistid"/>
    <Parameter name="mProductId"/>
    <Parameter name="plvId"/>
    <Parameter name="taxid"/>
    <Parameter name="discount"/>
    <Parameter name="cAssetID"/>
    <Parameter name="cProjectID"/>
    <Parameter name="cProjectPhaseId"/>
    <Parameter name="cProjectTaskId"/>
  </SqlMethod>
  <SqlMethod name="insertRequisitionOrder" type="preparedStatement" connection="true" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        INSERT INTO M_REQUISITIONORDER (M_REQUISITIONORDER_ID, AD_CLIENT_ID, AD_ORG_ID, CREATED, CREATEDBY, UPDATED, UPDATEDBY, ISACTIVE,
        M_REQUISITIONLINE_ID, C_ORDERLINE_ID, QTY)
        VALUES (?,?,?,now(),?,now(),?,'Y',
        ?,?,TO_NUMBER(?))
      ]]>
    </Sql>
    <Parameter name="mRequisitionOrderId"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="mRequisitionLineId"/>
    <Parameter name="cOrderLineId"/>
    <Parameter name="qty"/>
  </SqlMethod>
  <SqlMethod name="cOrderPost0" connection="true" type="callableStatement" return="object" object="RequisitionToOrderData">
      <SqlMethodComment></SqlMethodComment>
      <Sql><![CDATA[
        CALL C_Order_Post(?)
      ]]></Sql>
      <Parameter name="adPinstanceId"></Parameter>
   </SqlMethod>
  <SqlMethod name="requisitionStatus" connection="true" type="callableStatement" return="object" object="RequisitionToOrderData">
      <SqlMethodComment></SqlMethodComment>
      <Sql><![CDATA[
        CALL M_RequisitionLine_Status(null, ?, ?)
      ]]></Sql>
      <Parameter name="requisitionLineId"></Parameter>
      <Parameter name="userId"></Parameter>
   </SqlMethod>
   <SqlMethod name="updateOrderReference" type="preparedStatement"  return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE C_ORDER
        SET A_ASSET_ID = ?,
            C_PROJECT_ID = ?,
            C_PROJECTPHASE_ID = ?,
            C_PROJECTTASK_ID = ?
        WHERE C_ORDER_ID = ?
      ]]>
    </Sql>
    <Parameter name="cAssetID"/>
    <Parameter name="cProjectID"/>
    <Parameter name="cProjectPhaseId"/>
    <Parameter name="cProjectTaskId"/>
    <Parameter name="cOrderId"/>
 </SqlMethod>
 
 <SqlMethod name="isPRapprovalworkflow" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       SELECT prapprovalworkflow
       from   
       (SELECT prapprovalworkflow,isstandard
            from c_orgconfiguration       
            WHERE ad_org_id = ? 
        UNION
        SELECT prapprovalworkflow,isstandard
            from c_orgconfiguration 
            WHERE isstandard='Y'
        )a order by isstandard LIMIT 1
      ]]>
    </Sql>
    <Parameter name="adOrgId"/>
  </SqlMethod>
  
  <SqlMethod name="isPRapprover" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       SELECT isprapprover
       from
       (SELECT isprapprover
           from   c_bpartner,ad_user where ad_user.c_bpartner_id= c_bpartner.c_bpartner_id      
           and ad_user_id = ? 
        UNION
           SELECT 'N' as isprapprover from dual
        ) a order by isprapprover desc LIMIT 1
      ]]>
    </Sql>
    <Parameter name="adUserId"/>
  </SqlMethod>
  <SqlMethod name="lockbyRequestor" type="preparedStatement"  return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        UPDATE M_REQUISITIONLINE SET LOCKEDBY=o.lockedby, LOCKDATE = now(),
                LOCKQTY = null,
                LOCKPRICE = null,
                LOCKCAUSE = 'M',
                REJECTED ='N'  from (select ad_user_id as lockedby,m_requisition_id from m_requisition) as o 
            where M_REQUISITIONLINE.m_requisition_id=o.m_requisition_id
              and M_REQUISITIONLINE_ID IN ('1')       
      ]]>
    </Sql>
    <Parameter name="requisitionlines" type="replace" optional="true" after="M_REQUISITIONLINE_ID IN " text="('1')"/>
    </SqlMethod>
    <SqlMethod name="getDocLink" type="preparedStatement" return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      select zsse_htmlLinkDirectKey('../PurchaseOrder/Header_Relation.html',?,?) as retval from dual;
    </Sql>
    <Parameter name="cOrderId"/>
    <Parameter name="docNo"/>
  </SqlMethod>
</SqlClass>
