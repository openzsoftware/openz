<?xml version="1.0" encoding="UTF-8" ?>
<!--
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html 
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License. 
 * The Original Code is Openbravo ERP. 
 * The Initial Developer of the Original Code is Openbravo SL 
 * All portions are Copyright (C) 2008 Openbravo SL 
 * All Rights Reserved. 
 * Contributor(s):  ______________________________________.
 ************************************************************************
-->



<SqlClass name="TaxPayment" package="org.openbravo.erpCommon.ad_actionButton">

  <SqlMethod name="select" type="preparedStatement" return="multiple">
  <SqlMethodComment>Tax Payment for a period</SqlMethodComment>
  <Sql>
  <![CDATA[
        SELECT AD_Client_ID, AD_Org_ID, C_TaxPayment_ID, Name, DateFrom, DateTo, GeneratePayment, Processing, Processed, C_Settlement_ID,GL_Journal_ID
		FROM C_TAXPAYMENT
		WHERE 1=1
      ]]>
  </Sql>
  <Parameter name="parTaxPaymId" optional="false" after=" 1=1"><![CDATA[ and c_taxpayment_id in ( ? )  ]]></Parameter> 
  </SqlMethod>

  <SqlMethod name="updateProcessed" type="preparedStatement" return="rowcount">
  <SqlMethodComment>delete All Tax Register Lines Child</SqlMethodComment>
  <Sql>
  <![CDATA[
  		UPDATE C_TAXPAYMENT 
  		SET Processed = ? , UPDATED=now() , UPDATEDBY =  ?
  		WHERE C_TaxPayment_ID = ?
      ]]>
  </Sql>
  <Parameter name="processed" default='N'/>
  <Parameter name="updateby"/>
  <Parameter name="taxpayment_id"/>
  </SqlMethod>

<SqlMethod name="updateGeneratePayment" type="preparedStatement" return="rowcount">
  <SqlMethodComment>delete All Tax Register Lines Child</SqlMethodComment>
  <Sql>
  <![CDATA[
  		UPDATE C_TAXPAYMENT 
  		SET GeneratePayment = ? , UPDATED=now() , UPDATEDBY = ? 
  		WHERE C_TaxPayment_ID = ?
      ]]>
  </Sql>
  <Parameter name="GeneratePayment" default='N'/>
  <Parameter name="updateby"/>
  <Parameter name="taxpayment_id"/>
  </SqlMethod>


  <SqlMethod name="deleteRegisterChild" type="preparedStatement" return="rowcount">
  <SqlMethodComment>delete Tax Register</SqlMethodComment>
  <Sql>
  <![CDATA[
  		DELETE FROM C_TAXREGISTER
  		WHERE C_TaxPayment_ID = ?
      ]]>
  </Sql>
  <Parameter name="taxpayment_id"/>
  </SqlMethod>
  
  <SqlMethod name="deleteRegisterLinesChild" type="preparedStatement" return="rowcount">
  <SqlMethodComment>delete All Tax Register Lines Child</SqlMethodComment>
  <Sql>
  <![CDATA[
  		DELETE FROM C_TAXREGISTERLINE 
  		WHERE C_TaxRegister_ID in 
  			( SELECT C_TaxRegister_ID 
  				FROM C_TAXREGISTER 
  				WHERE C_TaxPayment_ID = ? ) 
      ]]>
  </Sql>
  <Parameter name="taxpayment_id"/>
  </SqlMethod>
  
  <SqlMethod name="selectCrossPeriodCount" type="preparedStatement" return="string">
  <SqlMethodComment></SqlMethodComment>
  <Sql>
  <![CDATA[
     SELECT COUNT(*) FROM C_TAXPAYMENT WHERE PROCESSED='Y' 
     AND AD_CLIENT_ID = ?
     AND ((DATEFROM <= TO_DATE(?) AND DATETO >=TO_DATE(?)
     OR DATEFROM <= TO_DATE(?) AND DATETO >=TO_DATE(?))
     OR 
     (DATEFROM >= TO_DATE(?) AND DATETO <=TO_DATE(?)
     ))
      ]]>
  </Sql>
  <Parameter name="adClientId"/>
  <Parameter name="DateFrom"/>
  <Parameter name="DateFrom"/>
  <Parameter name="DateTo"/>
  <Parameter name="DateTo"/>
  <Parameter name="DateFrom"/>
  <Parameter name="DateTo"/>
  </SqlMethod>
 
  <SqlMethod name="calculatePrevvatcredit" type="preparedStatement" return="String">
  <SqlMethodComment>Update Tax Register Totals</SqlMethodComment>
  <Sql>
  <![CDATA[
  	   select sum(case when  c_taxregister.C_TAXREGISTER_TYPE_ID in 
        (select C_TAXREGISTER_TYPE_ID from c_taxregister_type where c_taxregister_type.ISSOTRX='Y')
        then coalesce(-lastregaccumamt,0)
        else coalesce(lastregaccumamt,0) end ) as prevvatcredit
        from c_taxregister where c_taxregister.C_TAXPAYMENT_id = ?
      	
      ]]>
  </Sql>
  <Parameter name="taxpayment_id"/>
  
  </SqlMethod>
  
  <SqlMethod name="calculateVatPayment" type="preparedStatement" return="String">
  <SqlMethodComment>Update Tax Register Totals</SqlMethodComment>
  <Sql>
  <![CDATA[
  	   select sum(case when  c_taxregister.C_TAXREGISTER_TYPE_ID in 
        (select C_TAXREGISTER_TYPE_ID from c_taxregister_type where c_taxregister_type.ISSOTRX='Y')
        then coalesce(taxtotalamt,0) - coalesce(lastregaccumamt,0)
        else coalesce(lastregaccumamt,0) - coalesce(taxtotalamt,0) end ) as VatPayment
        from c_taxregister where c_taxregister.C_TAXPAYMENT_id = ?
      	
      ]]>
  </Sql>
  <Parameter name="taxpayment_id"/>
  
  </SqlMethod>
 
 
</SqlClass>
