package org.openbravo.erpCommon.utility.reporting;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.openbravo.base.secureApp.HttpSecureAppServlet;
import org.openbravo.base.secureApp.VariablesSecureApp;
import org.openbravo.database.ConnectionProvider;
import org.openbravo.erpCommon.businessUtility.TabAttachmentsData;
import org.openbravo.erpCommon.utility.SequenceIdData;
import org.openbravo.erpCommon.utility.Utility;
import org.openbravo.erpCommon.utility.reporting.EInvoiceData;
import org.openbravo.erpCommon.utility.reporting.printing.ToolsData;
import org.openbravo.exception.NoConnectionAvailableException;
import org.openbravo.utils.FileUtility;
import org.openbravo.utils.Replace;

public class EInvoice {
	
	File xmlout;
	String destination;
	String pdfFilename;
	
	public void ReturnXInvoice(Report report, HttpServletResponse response, HttpSecureAppServlet con, String attachpath) throws ServletException, IOException {
		Connection conn = null;
	    try {
			conn = con.getTransactionConnection();
			String xml= getReportXMl(report,con,conn); 
		    xInvoiceAttach(conn,report,con,attachpath);
		    returnFile(report,response);
		    con.releaseRollbackConnection(conn);
	    } catch (final Exception exception) {
		      try {
		        con.releaseRollbackConnection(conn);
		      } catch (final Exception ignored) {
		      }

		      throw new ServletException(exception);
		    }		  
	}
	
	public void PrepareXInvoiceEmail(Report report, HttpServletResponse response, HttpSecureAppServlet con, String attachpath) throws ServletException, IOException {
		Connection conn = null;
	    try {
			conn = con.getTransactionConnection();
			String xml= getReportXMl(report,con,conn); 
		    xInvoiceAttach(conn,report,con,attachpath);
		    setReportAttached(report);
		    con.releaseRollbackConnection(conn);
	    } catch (final Exception exception) {
		      try {
		        con.releaseRollbackConnection(conn);
		      } catch (final Exception ignored) {
		      }

		      throw new ServletException(exception);
		    }		  
	}
	
	private String getReportXMl(Report report,ConnectionProvider con, Connection conn) throws ServletException {
		return EInvoiceData.getXInvoice(conn,con, report.getDocumentId(), report.getLanguage());
	}
	
	private void xInvoiceAttach(Connection conn,Report report,HttpSecureAppServlet con,String attachpath) throws ServletException, IOException, NoConnectionAvailableException, SQLException {
		final String tableId = ToolsData.getTableId(con, report.getDocumentType().getTableName());
		destination = attachpath + "/" + tableId + "-" + report.getDocumentId();
		String fname=report.getFilename();
		fname=Replace.replace(fname,".pdf",".xml");
		xmlout= new File(destination,fname);
		if (xmlout.exists()) {
			final String dateOfPrint = Utility.formatDate(new Date(), "yyyy-MM-dd-HH:mm:ss"); 
			xmlout= new File(destination,dateOfPrint + "-" + fname);
		}
		// Input PDF
		File pdfout= new File(report.getTargetLocation());
		FileInputStream in = new FileInputStream(pdfout);
	    byte[] bytes = IOUtils.toByteArray(in);
		byte[] encoded = java.util.Base64.getEncoder().encode(bytes);
	    // Output XML
		FileOutputStream out = new FileOutputStream(xmlout) ;
		EInvoiceData[] data=EInvoiceData.selectXInvoice(conn, con);
		for (int i=0;i<data.length;i++) {
			if (data[i].content.contains("@FILENAME@")) {
				String fna=Replace.replace(data[i].content, "@FILENAME@", report.getFilename());
				byte b[]=fna.getBytes();
				out.write(b);
			} else if (data[i].content.equals("@BINARYCODE@"))
				out.write(encoded);
			else {
				byte b[]=data[i].content.getBytes();
				out.write(b);
			}
		}
		out.flush();
		out.close();
	    // Attachment in DB
	    final String newFileId = SequenceIdData.getUUID();
	    Connection bconn = con.getTransactionConnection();
	    // The 103 in the following insert specifies the document type: in
	    TabAttachmentsData.insert(bconn, con, newFileId, "C726FEC915A54A0995C568555DA5BB3C", report.getOrgId(),
	                  "0", tableId, report.getDocumentId(), "401D1DDC283A464B9CBD6B2EBBF35832",
	          "Generated by printing ", xmlout.getName());
	    con.releaseCommitConnection(bconn);
	    pdfFilename = EInvoiceData.selectPDFFilenameFromXML(conn, con, newFileId);
	}
	
	public void returnFile(Report report, HttpServletResponse response) throws IOException {
	    // return pdf instead of csv for download
	    String filename = pdfFilename;
	    if(pdfFilename == null || pdfFilename.isEmpty()) {
	        filename = xmlout.getName();
	    }
		response.setHeader("Content-disposition", "attachment" + "; filename=" + filename);
		FileUtility f = new FileUtility();
	    f = new FileUtility(destination,filename, false, true);
	    f.dumpFile(response.getOutputStream());
	    response.getOutputStream().flush();
	    response.getOutputStream().close();
	}
	
	public void setReportAttached(Report report) throws IOException {
		report.setAttached(true);
		report.setFilename(xmlout.getName());
		File tmpf= new File(Replace.replace(xmlout.getPath(),xmlout.getName(),""));
		report.setTargetDirectory(tmpf);
	}
	
	// Zugferd
	public String getZugferd(Report report) {
		return "";   
		}
}
