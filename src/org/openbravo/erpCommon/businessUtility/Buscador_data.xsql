<?xml version="1.0" encoding="UTF-8" ?>
<!--
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html 
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License. 
 * The Original Code is Openbravo ERP. 
 * The Initial Developer of the Original Code is Openbravo SL 
 * All portions are Copyright (C) 2001-2009 Openbravo SL 
 * All Rights Reserved. 
 * Contributor(s):  ______________________________________.
 ************************************************************************
-->





<SqlClass name="BuscadorData" package="org.openbravo.erpCommon.businessUtility">
   <SqlClassComment></SqlClassComment>
   <SqlMethod name="select" type="preparedStatement" return="multiple">
      <SqlMethodComment></SqlMethodComment>
      <Sql> <![CDATA[
        SELECT AD_COLUMN.ad_column_id, ad_getFieldText(AD_FIELD.ad_field_id,?) AS NAME, 
        ad_reference_id as reference, ad_reference_value_id as referencevalue, ad_val_rule_id, fieldlength, displaylength, 
        AD_COLUMN.columnname, '' as value, ad_tab.ad_window_id, '' as code, 
        to_char(REPLACE(REPLACE(REPLACE(ad_element.name, 'Substitute', 'Product'), 'BOM', ''), 'M_LocatorTo_ID', 'M_Locator_ID')) as searchName, '' as COLUMNNAMEINP, '' as classname, 
        '' as mappingname, '' as COLUMNNAME_END, ISSELECTIONCOLUMN, AD_COLUMN.seqno as SEQ1, AD_FIELD.seqno as SEQ2
        FROM AD_FIELD, 
              AD_COLUMN left join AD_ELEMENT on AD_COLUMN.AD_Element_ID = AD_ELEMENT.AD_Element_ID ,  
              AD_TAB 
        WHERE AD_COLUMN.ad_column_id = AD_FIELD.ad_column_id
        AND AD_FIELD.ad_tab_id = AD_TAB.ad_tab_id 
        AND AD_COLUMN.isactive='Y'
        AND AD_FIELD.isactive='Y' 
        AND ISSELECTIONCOLUMN='Y' 
        AND ad_field.ad_tab_id=?
        UNION
        SELECT C.Ad_Column_Id, zssi_getElementTextByID(c.ad_element_id,?) as Name, 
                c.Ad_Reference_Id as reference, c.ad_reference_value_id  as referencevalue, c.ad_val_rule_id, 44, 44,
                c.columnname, to_char('') as value, tb.ad_window_id, to_char('') as code,
                to_char(c.name) as searchname, '' as COLUMNNAMEINP, '' as classname, 
                '' as mappingname, '' as COLUMNNAME_END, 'Y' as ISSELECTIONCOLUMN,
                null as seq1,
                (case when upper(c.columnname)='CREATED' then 10000 
                   when upper(c.columnname)='CREATEDBY' then 10001
                   when upper(c.columnname)='UPDATED' then 10002
                   else 10003
              end) as seq2
           FROM AD_TAB TB,
                AD_COLUMN C 
          WHERE TB.AD_Tab_ID = ?
            AND C.AD_Table_ID = TB.AD_Table_ID
            AND UPPER(c.columnname) in ('CREATED', 'CREATEDBY', 'UPDATED', 'UPDATEDBY')
            AND to_char('Y') = to_char(?)  
          order by seq1, seq2
      ]]></Sql>
        <Parameter name="adLanguage"/>
        <Parameter name="adTabId"/>
        <Parameter name="adLanguage"/>
        <Parameter name="adTabId"/>
        <Parameter name="showAudit"/>
        <Field name="id" value="void"/>
        <Field name="whereclause" value="void"/>
        <Field name="nameref" value="void"/>
        <Field name="defaultvalue" value="void"/>
        <Field name="isdisplayed" value="void"/>
        <Field name="istranslated" value="void"/>
        <Field name="type" value="void"/>
   </SqlMethod>
   
   <SqlMethod name="hasSelectionColumns" type="preparedStatement" return="string">
     <Sql>
      SELECT count(*) as seq1
        FROM AD_FIELD, 
              AD_COLUMN,  
              AD_TAB 
        WHERE AD_COLUMN.ad_column_id = AD_FIELD.ad_column_id
        AND AD_FIELD.ad_tab_id = AD_TAB.ad_tab_id 
        AND AD_COLUMN.isactive='Y'
        AND AD_FIELD.isactive='Y' 
        AND ISSELECTIONCOLUMN='Y' 
        AND ad_field.ad_tab_ID = ?
     </Sql>
     <Parameter name="adTabId"/>
   </SqlMethod>
   <SqlMethod name="selectFistFocusedfield" type="preparedStatement" return="string">
     <Sql>
       select  pname as name from ad_selecttabBuscadorFields(?,?,'N','N') order by pline limit 1
     </Sql>
     <Parameter name="lang"/>
     <Parameter name="adTabId"/>
   </SqlMethod>
   <SqlMethod name="isOrgInFilter" type="preparedStatement" return="string">
     <Sql>
       select  pname as name from ad_selecttabBuscadorFields(?,?,'N','N') where lower(pname)='ad_org_id'
     </Sql>
     <Parameter name="lang"/>
     <Parameter name="adTabId"/>
   </SqlMethod>
   <SqlMethod name="set" type="constant" return="multiple">
      <SqlMethodComment></SqlMethodComment>
      <Sql></Sql>
   </SqlMethod>
  
   <SqlMethod name="isSoTrx" type="preparedStatement" return="String" default="N">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
      SELECT issotrx FROM AD_window 
      WHERE ad_window_id = ?
      ]]>
    </Sql>
    <Parameter name="window"/>
  </SqlMethod>
  <SqlMethod name="parentsColumnName" type="preparedStatement" return="String" default="">
      <SqlMethodComment></SqlMethodComment>
      <Sql><![CDATA[
        SELECT ColumnName
        FROM AD_FIELD, AD_COLUMN 
        WHERE AD_FIELD.ad_column_id = AD_COLUMN.ad_column_id 
        AND ad_tab_id = ?
        AND isparent = 'Y'
        order by ad_column.seqno
      ]]></Sql>
      <Parameter name="tab"/>
  </SqlMethod>
  <SqlMethod name="selectSearchs" type="preparedStatement" return="multiple">
    <SqlMethodComment>Names of the columns and name of the fields of a tab</SqlMethodComment>
    <Sql><![CDATA[
      SELECT R.NAME, T.TABLENAME AS REFERENCE, C.COLUMNNAME AS COLUMNNAME, RSC.NAME AS COLUMNNAMEINP, 
      RSC.COLUMNNAME AS REFERENCEVALUE, MO.CLASSNAME, MOM.MAPPINGNAME, RSC.COLUMN_SUFFIX AS COLUMNNAME_END 
      FROM AD_REFERENCE R left join AD_REF_SEARCH RS  on R.AD_REFERENCE_ID = RS.AD_REFERENCE_ID 
                          left join AD_REF_SEARCH_COLUMN RSC on RS.AD_REF_SEARCH_ID = RSC.AD_REF_SEARCH_ID
                                AND RSC.COLUMNTYPE = ?, 
           AD_MODEL_OBJECT MO, AD_MODEL_OBJECT_MAPPING MOM, 
           AD_TABLE T, AD_COLUMN C 
      WHERE R.VALIDATIONTYPE = 'S' 
      AND R.AD_REFERENCE_ID = ?
      AND R.AD_REFERENCE_ID = MO.AD_REFERENCE_ID
      AND MO.ACTION = 'S' 
      AND MO.ISACTIVE = 'Y'
      AND MO.ISDEFAULT = 'Y'
      AND MO.AD_MODEL_OBJECT_ID = MOM.AD_MODEL_OBJECT_ID 
      AND MOM.ISACTIVE = 'Y' 
      AND MOM.ISDEFAULT = 'Y'
      AND RS.AD_TABLE_ID = T.AD_TABLE_ID 
      AND RS.AD_COLUMN_ID = C.AD_COLUMN_ID 
    ]]></Sql>
    <Parameter name="columntype"/>
    <Parameter name="searchId"/>
  </SqlMethod>
  <SqlMethod name="selectSearchName" type="preparedStatement" return="String" default="">
      <SqlMethodComment></SqlMethodComment>
      <Sql><![CDATA[
        SELECT AD_COLUMN_IDENTIFIER(?, ?, ?) AS NAME from dual
      ]]></Sql>
      <Parameter name="table_name"/>
      <Parameter name="c_bpartner_id"/>
      <Parameter name="adLanguage"/>
  </SqlMethod>

  <SqlMethod name="selectSearchTableName" type="preparedStatement" return="String" default="">
      <SqlMethodComment></SqlMethodComment>
      <Sql><![CDATA[
          select tablename AS NAME from ad_ref_search rs, ad_table t
          where rs.ad_table_id = t.ad_table_id
          and rs.ad_reference_id=?
      ]]></Sql>
      <Parameter name="ad_reference_id"/>
  </SqlMethod>

  <SqlMethod name="selectValidationTab" type="preparedStatement" return="multiple">
    <SqlMethodComment>Method need to be synchronized with src-wad/src/org/openbravo/wad/Fields_data.xsql::selectValidationTab</SqlMethodComment>
    <Sql>
      <![CDATA[
        SELECT c.ad_column_id as id, c.columnname, t.WHERECLAUSE as whereClause, v.code as referencevalue, c.ad_reference_id as reference,
        c.ad_reference_value_id as NameRef, c.ad_val_rule_id as defaultvalue, f.isdisplayed, c.istranslated, c.columnname as name,
        (case when t.whereclause is not null or v.code is not null then 'C' else 'R' end) as type /*Combo reaload or Reference*/ 
        FROM AD_FIELD f, 
             AD_COLUMN c left join  AD_VAL_RULE v on c.AD_VAL_RULE_ID = v.AD_VAL_RULE_ID
                         left join AD_REF_TABLE t on (CASE c.ad_reference_id WHEN '18' THEN c.AD_REFERENCE_VALUE_ID ELSE '0' END) = t.AD_REFERENCE_ID     
        WHERE f.AD_COLUMN_ID = c.ad_column_id
        AND f.ad_tab_id = ? 
        AND (t.whereclause IS NOT NULL
            OR v.code IS NOT NULL
            OR c.ad_reference_id in ('19','18','17'))
      ]]>
    </Sql>
    <Parameter name="tab"/>
  </SqlMethod>

</SqlClass>
