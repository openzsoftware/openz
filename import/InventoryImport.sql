select zsse_droptable('zsi_inventory');

create table zsi_inventory (
warehouse_key character varying(250),
Org_key character varying(250),
locator_key  character varying(250),
linedescription  character varying(250),
productvalue_key  character varying(250),
qtycount  character varying(250),
serialnumber character varying(250),
isunavailable character varying(250),
batchnunber character varying(250),
guaranteedate character varying(250),
description  character varying(2000),
auxfield1  character varying(250),
auxfield2  character varying(250),
auxfield3  character varying(250)
); 


copy zsi_inventory from '/tmp/Inventory.csv' CSV DELIMITER as ';' HEADER ;
 
CREATE or replace FUNCTION  zsi_InventoryImport() RETURNS void
AS $_$
DECLARE

ad_client character varying:='C726FEC915A54A0995C568555DA5BB3C';
creator  character varying:='0';

v_count numeric;
v_line numeric;
v_curr_onhand_qty numeric;
v_org character varying;
v_pcategory character varying;
v_locator character varying;
v_lang character varying;
v_attset character varying;
v_plningmethod character varying;
v_currency character varying;
v_tax character varying;
v_salesregion character varying;
v_productbomid character varying;
v_uom character varying;
v_uom2 character varying;
v_pricelist character varying;
v_pversion character varying;
v_user character varying;
v_productid character varying;
v_bpartnerid character varying;
v_invuid character varying;
v_wh character varying;
v_type varchar;
v_cur RECORD;
v_cur2 RECORD;
v_isbatch varchar;
v_isserial varchar;
v_lineid varchar;
v_snrmdid varchar;
v_bmdid  varchar;
BEGIN

  
   
   select count(*) into v_count from  zsi_inventory;
   if v_count>0 then
        alter table m_inventoryline disable trigger user;
        v_line:=10;
        for v_cur in (select  warehouse_key ,Org_key,locator_key,productvalue_key,sum(to_number(qtycount)) as qtycount from zsi_inventory group by warehouse_key ,Org_key,locator_key,productvalue_key)
        LOOP
            
            if v_line=10 then
                select ad_org_id into v_org from ad_org where value= case when v_cur.Org_key='*' then '0' else v_cur.Org_key end;
                select m_warehouse_id from into v_wh m_warehouse where value=v_cur.warehouse_key;
                select get_uuid() into v_invuid from dual; 
                insert into M_INVENTORY(M_INVENTORY_ID, AD_CLIENT_ID, AD_ORG_ID,  CREATEDBY,  UPDATEDBY, NAME, M_WAREHOUSE_ID, MOVEMENTDATE)
                    values(v_invuid,ad_client,v_org,creator,creator,'Generated by Inventory Import',v_wh,trunc(now()));
            end if;

            select m_locator_id into v_locator from m_locator where m_warehouse_id=v_wh and value=v_cur.locator_key;
            if v_locator is null then 
                raise exception '%','Lagerort nicht gefunden: '||v_cur.locator_key||' Lager: '||v_cur.warehouse_key;
            end if;
            select m_product_id,c_uom_id,isserialtracking,isbatchtracking into v_productid,v_uom,v_isserial,v_isbatch from m_product where value=v_cur.productvalue_key and isstocked='Y';
            select COALESCE(sum(qtyonhand),0) into v_curr_onhand_qty from m_storage_detail where m_product_id=v_productid and m_locator_id=v_locator;
            select get_uuid() into v_lineid;
            if v_productid is not null then 
               -- update m_product set isstocked='Y',producttype='I' where m_product_id=v_productid;
                insert into M_INVENTORYLINE (M_INVENTORYLINE_ID, AD_CLIENT_ID, AD_ORG_ID, CREATEDBY, UPDATEDBY, M_INVENTORY_ID, M_LOCATOR_ID, M_PRODUCT_ID, LINE, QTYBOOK, QTYCOUNT, C_UOM_ID)
                values (v_lineid,ad_client,v_org,creator,creator,v_invuid,v_locator,v_productid,v_line,coalesce(v_curr_onhand_qty,0),coalesce(to_number(v_cur.qtycount),0),v_uom);
                v_line:=v_line+10;
                if (v_isserial='Y' or v_isbatch='Y') and coalesce(to_number(v_cur.qtycount),0)>0 then
                    for v_cur2 in select serialnumber ,isunavailable,batchnunber,guaranteedate,description,to_number(qtycount) as qtycount,auxfield1,auxfield2,auxfield3 from zsi_inventory where locator_key=v_cur.locator_key and productvalue_key=v_cur.productvalue_key
                    LOOP   
                        if (v_cur2.serialnumber is null  and v_cur2.batchnunber is null)  then 
                                raise exception '%',v_cur.productvalue_key||' No Batch or serial given';
                        end if;
                            PERFORM snr_initmasterdata(creator,v_org, v_cur2.serialnumber,v_productid,v_cur2.batchnunber);
                            insert into SNR_INVENTORYLINE(SNR_INVENTORYLINE_ID, AD_CLIENT_ID, AD_ORG_ID, CREATEDBY, UPDATEDBY, M_INVENTORYLINE_ID, QUANTITY, ISUNAVAILABLE, LOTNUMBER, SERIALNUMBER)
                            values (get_uuid(),ad_client,v_org,creator,creator,v_lineid,v_cur2.qtycount,'N',v_cur2.batchnunber, v_cur2.SERIALNUMBER);
                            select snr_batchmasterdata_id into v_bmdid from snr_batchmasterdata  where batchnumber=v_cur2.batchnunber and m_product_id=v_productid;
                            update snr_batchmasterdata set guaranteedate=to_date(v_cur2.guaranteedate,'DD-MM-YYYY'),description=v_cur2.description,
                                auxfield1=v_cur2.auxfield1,auxfield2=v_cur2.auxfield2,auxfield3=v_cur2.auxfield3 where snr_batchmasterdata_id=v_bmdid;
                    END LOOP;
                end if;
            end if;
        END LOOP;
      alter table m_inventoryline enable trigger user;  
    end if;
END;
$_$  LANGUAGE 'plpgsql';


select zsi_InventoryImport();
alter table m_inventoryline enable trigger user;  
