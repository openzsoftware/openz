<?xml version="1.0" encoding="UTF-8" ?>
<!--
/***************************************************************************************************************************************************
* The contents of this file are subject to the Openbravo  Public  License Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html. Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the specific  language  governing  rights  and  limitations
* under the License. The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL. Parts created by Openbravo are Copyright (C) 2001-2009 Openbravo SL
* All Rights Reserved.
* Contributor(s): Stefan Zimmermann, 2011, sz@zimmermann-software.de (SZ) Contributions are Copyright (C) 2011 Stefan Zimmermann
*                 
* 
****************************************************************************************************************************************************/
-->





<SqlClass name="TimeFeedbackData" package="org.openz.pdc.controller"  accessModifier="public">
 <SqlClassComment></SqlClassComment>
    
    <SqlMethod name="initialize" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
        <Sql>
            Select 
                '' as c_projecttask_id, 
                '' as ad_user_id, 
                '' as decription,
                '' as hour_from, 
                '' as hour_to, 
                '' as out_messagetext, 
                '' as out_createdId,
                '' as comming,
                '' as leaving,
                '' as barcode,
                '' as type,
                '' as id,
                '' as mess,
                '' as ad_message_value from dual
        </Sql>
    </SqlMethod>
  
  
   <SqlMethod name="getEmployee" type="preparedStatement" return="string">
      <Sql>
        SELECT name from ad_user where ad_user_id=?
      </Sql>
      <Parameter name="userid"/>
   </SqlMethod>
   <SqlMethod name="getEmployeeStatusLeaving" type="preparedStatement" return="string">
      <Sql>
        SELECT case when count(*)>0 then 'Y' else 'N' end as retv from zspm_ptaskfeedbackline where ad_user_id=? and hour_from is not null and hour_to is null and createdbytimefeedbackapp = 'Y'
      </Sql>
      <Parameter name="userid"/>
   </SqlMethod>
   
   <SqlMethod name="getWorkstep" type="preparedStatement" return="string">
      <Sql>
        SELECT coalesce(value,name) as result from c_projecttask where c_projecttask_id=?
      </Sql>
      <Parameter name="workstepid"/>
   </SqlMethod>
   
   <SqlMethod name="getOpenWorkstep" type="preparedStatement" return="string">
      <Sql>
        SELECT pdc_getopenworkstep(?)
      </Sql>
      <Parameter name="userid"/>
   </SqlMethod>
   <SqlMethod name="isWorstepStarted" type="preparedStatement" return="string">
      <Sql>
        SELECT taskbegun from c_projecttask where c_projecttask_id=?
      </Sql>
      <Parameter name="workstepid"/>
   </SqlMethod>
  
   <SqlMethod name="setTimeFeedback" type="preparedStatement" return="string">
      <Sql>
        SELECT pdc_settimefeedback(?,?,?,to_timestamp(?,?)::timestamp without time zone,?,?,?)
      </Sql>
      <Parameter name="orgid"/>
      <Parameter name="workstepid"/>
      <Parameter name="userid"/>
      <Parameter name="timestamp"/>
      <Parameter name="format"/>
      <Parameter name="command"/>
      <Parameter name="descr"/>
      <Parameter name="lang"/>
   </SqlMethod>
  <SqlMethod name="beginWorkstepWithMat" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
        select out_createdId,out_messagetext from zssm_beginworkstep(?, ?, ?,'Y')
    </Sql>
    <Parameter name="workstepId"/>
    <Parameter name="userId"/>
    <Parameter name="adOrgId"/>
    </SqlMethod>
   <SqlMethod name="beginWorkstepNoMat" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
        select out_createdId,out_messagetext from zssm_beginworkstep(?, ?, ?,'N')
    </Sql>
    <Parameter name="workstepId"/>
    <Parameter name="userId"/>
    <Parameter name="adOrgId"/>
   </SqlMethod>
   <SqlMethod name="beginWorkstepNoMat" type="preparedStatement" return="multiple" connection="true">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
        select out_createdId,out_messagetext from zssm_beginworkstep(?, ?, ?,'N')
    </Sql>
    <Parameter name="workstepId"/>
    <Parameter name="userId"/>
    <Parameter name="adOrgId"/>
   </SqlMethod>
  </SqlClass>
