<?xml version="1.0" encoding="UTF-8" ?>
<!--
****************************************************************************************************************************************************
The contents of this file are subject to the Mozilla Public License Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at http://www.mozilla.org/MPL/MPL-1.1.html
Software distributed under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations under the License.
The Original Code is OpenZ. The Initial Developer of the Original Code is Stefan Zimmermann (sz@zimmermann-software.de)
Copyright (C) 2013 Stefan Zimmermann All Rights Reserved.
Contributor(s): ______________________________________.
***************************************************************************************************************************************************
-->





<SqlClass name="PdcCommonData" package="org.openz.pdc.controller" accessModifier="public">
  <SqlClassComment></SqlClassComment>
  <SqlMethod name="selectbarcode" type="preparedStatement" return="multiple">
        <SqlMethodComment></SqlMethodComment>
        <Sql>
            select 
                barcode, 
                type, 
                id,
                snrmasterdata_id,
                batchmasterdata_id,
                weight,
                serialnumber,
                lotnumber,
                0::numeric as qty,
                0::numeric as qtyleft,
                0::numeric as qtyproduced,
                0::numeric as qtytplanned
            from 
                pdc_getDataIdfromScan(?)
        </Sql>
        <Parameter name="barcode"/>
   </SqlMethod>
   <SqlMethod name="inventoryRunning" type="preparedStatement" return="string">
    <Sql>
    select count(*)  from m_inventoryline il,m_inventory i where i.m_inventory_id=il.m_inventory_id and i.processed='N' and il.m_locator_id=?
    </Sql>
    <Parameter name="locatorid"/>
  </SqlMethod>
  <SqlMethod name="insertProduction" type="preparedStatement"  return="rowCount" connection="true">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
        insert into M_INTERNAL_CONSUMPTION(M_INTERNAL_CONSUMPTION_ID, AD_CLIENT_ID, AD_ORG_ID,  CREATED, CREATEDBY, UPDATED, UPDATEDBY,
                    NAME, DESCRIPTION, MOVEMENTDATE, 
                    C_PROJECT_ID, C_PROJECTTASK_ID,  MOVEMENTTYPE,DOCUMENTNO,DATEACCT,plannedserialnumber)
               values(?,?,?,NOW(), ?, NOW(),?,
                      'Production-Process','Generated by PDC ->Send produced Material on Stock',now(),
                      ?,?,'P+',ad_sequence_doc('Production',?,'Y'),trunc(now()),?)
      ]]>
    </Sql>
    <Parameter name="uuId"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cProjecttaskId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="snrbnr"/>
  </SqlMethod>
  <SqlMethod name="insertConsumption" type="preparedStatement"  return="rowCount">
    <SqlMethodComment>Initializes a D- (Internal Consumption) Transaction</SqlMethodComment>
    <Sql>
      <![CDATA[
        insert into M_INTERNAL_CONSUMPTION(M_INTERNAL_CONSUMPTION_ID, AD_CLIENT_ID, AD_ORG_ID,  CREATED, CREATEDBY, UPDATED, UPDATEDBY,
                    NAME, DESCRIPTION, MOVEMENTDATE, 
                    C_PROJECT_ID, C_PROJECTTASK_ID,  MOVEMENTTYPE,DOCUMENTNO,DATEACCT)
               values(?,?,?,NOW(), ?, NOW(),?,
                      'Production-Process','Generated by PDC ->Get Material from Stock',now(),
                      ?,?,'D-',ad_sequence_doc('Production',?,'Y'),trunc(now()))
      ]]>
    </Sql>
    <Parameter name="uuId"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cProjecttaskId"/>
    <Parameter name="adOrgId"/>
  </SqlMethod>
  <SqlMethod name="insertMaterailReturn" type="preparedStatement"  return="rowCount">
    <SqlMethodComment>Initializes a D+ (Internal Material Return) Transaction</SqlMethodComment>
    <Sql>
      <![CDATA[
        insert into M_INTERNAL_CONSUMPTION(M_INTERNAL_CONSUMPTION_ID, AD_CLIENT_ID, AD_ORG_ID,  CREATED, CREATEDBY, UPDATED, UPDATEDBY,
                    NAME, DESCRIPTION, MOVEMENTDATE, 
                    C_PROJECT_ID, C_PROJECTTASK_ID,  MOVEMENTTYPE,DOCUMENTNO,DATEACCT)
               values(?,?,?,NOW(), ?, NOW(),?,
                      'Production-Process','Generated by PDC ->Send Material back to Stock',now(),
                      ?,?,'D+',ad_sequence_doc('Production',?,'Y'),trunc(now())) 
      ]]>
    </Sql>
    <Parameter name="uuId"/>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cProjecttaskId"/>
    <Parameter name="adOrgId"/>
  </SqlMethod>
  <SqlMethod name="insertMaterialLine" type="preparedStatement"  return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       insert into M_INTERNAL_CONSUMPTIONLINE(M_INTERNAL_CONSUMPTIONLINE_ID, AD_CLIENT_ID, AD_ORG_ID, CREATED, CREATEDBY, UPDATED, UPDATEDBY, M_INTERNAL_CONSUMPTION_ID, 
                                                  M_LOCATOR_ID, M_PRODUCT_ID, LINE, MOVEMENTQTY, DESCRIPTION, C_UOM_ID, C_PROJECT_ID, C_PROJECTTASK_ID)
                  values (get_uuid(),?,?,NOW(), ?, NOW(),?,?,
                          ?,?,to_number(?),to_number(?),'Generated by PDC',?,?, ?);
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="consumptionId"/>
    <Parameter name="locatorId"/>
    <Parameter name="productId"/>
    <Parameter name="line"/>
    <Parameter name="qty"/>
    <Parameter name="uomId"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cProjecttaskId"/>
  </SqlMethod>
  <SqlMethod name="insertMaterialLine" type="preparedStatement"  return="rowCount" connection="true">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       insert into M_INTERNAL_CONSUMPTIONLINE(M_INTERNAL_CONSUMPTIONLINE_ID, AD_CLIENT_ID, AD_ORG_ID, CREATED, CREATEDBY, UPDATED, UPDATEDBY, M_INTERNAL_CONSUMPTION_ID, 
                                                  M_LOCATOR_ID, M_PRODUCT_ID, LINE, MOVEMENTQTY, DESCRIPTION, C_UOM_ID, C_PROJECT_ID, C_PROJECTTASK_ID)
                  values (get_uuid(),?,?,NOW(), ?, NOW(),?,?,
                          ?,?,to_number(?),to_number(?),'Generated by PDC',?,?, ?);
      ]]>
    </Sql>
    <Parameter name="adClientId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="consumptionId"/>
    <Parameter name="locatorId"/>
    <Parameter name="productId"/>
    <Parameter name="line"/>
    <Parameter name="qty"/>
    <Parameter name="uomId"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cProjecttaskId"/>
  </SqlMethod>
  <SqlMethod name="insertMaterialLine4Trx" type="preparedStatement"  return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       insert into M_INTERNAL_CONSUMPTIONLINE(M_INTERNAL_CONSUMPTIONLINE_ID, AD_CLIENT_ID, AD_ORG_ID, CREATED, CREATEDBY, UPDATED, UPDATEDBY, M_INTERNAL_CONSUMPTION_ID, 
                                                  M_LOCATOR_ID, M_PRODUCT_ID, LINE, MOVEMENTQTY, DESCRIPTION, C_UOM_ID, C_PROJECT_ID, C_PROJECTTASK_ID)
                  values (?,'C726FEC915A54A0995C568555DA5BB3C',?,NOW(), ?, NOW(),?,?,
                          ?,?,
                          coalesce((select max(line)+10 from m_internal_consumptionline where m_internal_consumption_id=?),10),
                          to_number(?),'Generated by PDC',?,?, ?);
      ]]>
    </Sql>
    <Parameter name="consumptionLineId"/>
    <Parameter name="adOrgId"/>
    <Parameter name="user"/>
    <Parameter name="user"/>
    <Parameter name="consumptionId"/>
    <Parameter name="locatorId"/>
    <Parameter name="productId"/>
    <Parameter name="consumptionId"/>
    <Parameter name="qty"/>
    <Parameter name="uomId"/>
    <Parameter name="cProjectId"/>
    <Parameter name="cProjecttaskId"/>
  </SqlMethod>
  <SqlMethod name="updateMaterialLine" type="preparedStatement"  return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       UPDATE M_INTERNAL_CONSUMPTIONLINE SET MOVEMENTQTY=to_number(?) where M_INTERNAL_CONSUMPTIONLINE_ID=?
      ]]>
    </Sql>
    <Parameter name="qty"/>
    <Parameter name="consumptionlineId"/>
  </SqlMethod>
  <SqlMethod name="updateSnrBnr" type="preparedStatement"  return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       UPDATE M_INTERNAL_CONSUMPTION SET plannedserialnumber=? where M_INTERNAL_CONSUMPTION_ID=?
      ]]>
    </Sql>
    <Parameter name="plannedserialnumber"/>
    <Parameter name="consumptionId"/>
  </SqlMethod>
  <SqlMethod name="updateSnrBnr" type="preparedStatement"  return="rowCount" connection="true">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       UPDATE M_INTERNAL_CONSUMPTION SET plannedserialnumber=? where M_INTERNAL_CONSUMPTION_ID=?
      ]]>
    </Sql>
    <Parameter name="plannedserialnumber"/>
    <Parameter name="consumptionId"/>
  </SqlMethod>
  <SqlMethod name="getProductStdUOM" type="preparedStatement" return="string">
      <Sql>
        SELECT  c_uom_id from m_product where m_product_id = ?  
      </Sql>
      <Parameter name="mProductId"/>
   </SqlMethod>
   <SqlMethod name="getIDWhenScannedSameLine" type="preparedStatement" return="string">
      <Sql>
        SELECT  M_INTERNAL_CONSUMPTIONLINE_ID from M_INTERNAL_CONSUMPTIONLINE
        where M_INTERNAL_CONSUMPTION_ID=? and m_product_id = ? and  m_locator_id=? 
      </Sql>
      <Parameter name="mConsumptionId"/>
      <Parameter name="mProductId"/>
      <Parameter name="mLocatorId"/>
   </SqlMethod>
   <SqlMethod name="getIDWhenScannedSameLineWoLocator" type="preparedStatement" return="string" connection="true">
      <Sql>
        SELECT  M_INTERNAL_CONSUMPTIONLINE_ID from M_INTERNAL_CONSUMPTIONLINE
        where M_INTERNAL_CONSUMPTION_ID=? and m_product_id = ? limit 1
      </Sql>
      <Parameter name="mConsumptionId"/>
      <Parameter name="mProductId"/>
   </SqlMethod>
   <SqlMethod name="getlineQtyByProduct" type="preparedStatement" return="string" connection="true">
      <Sql>
        SELECT  sum(movementqty) from M_INTERNAL_CONSUMPTIONLINE
        where M_INTERNAL_CONSUMPTION_ID=? and m_product_id = ? 
      </Sql>
      <Parameter name="mConsumptionId"/>
      <Parameter name="mProductId"/>
   </SqlMethod>
  <SqlMethod name="deleteMaterialLine" type="preparedStatement"  return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       delete from M_INTERNAL_CONSUMPTIONLINE where M_INTERNAL_CONSUMPTIONLINE_ID=?
      ]]>
    </Sql>
    <Parameter name="consumptionlineId"/>
  </SqlMethod>
  <SqlMethod name="getProductionOrderFromWorkstep" type="preparedStatement" return="string">
      <Sql>
        SELECT  c_project_id from c_projecttask where c_projecttask_id = ?  
      </Sql>
      <Parameter name="mProductId"/>
   </SqlMethod>
   <SqlMethod name="getNextLineFromConsumption" type="preparedStatement" return="string">
      <Sql>
        SELECT coalesce(to_char(max(line)+10),'10')   from M_INTERNAL_CONSUMPTIONLINE where M_INTERNAL_CONSUMPTION_ID=?
      </Sql>
      <Parameter name="consumptionId"/>
   </SqlMethod>
   <SqlMethod name="getNextLineFromConsumption" type="preparedStatement" return="string" connection="true">
      <Sql>
        SELECT coalesce(to_char(max(line)+10),'10')   from M_INTERNAL_CONSUMPTIONLINE where M_INTERNAL_CONSUMPTION_ID=?
      </Sql>
      <Parameter name="consumptionId"/>
   </SqlMethod>
   <SqlMethod name="isbatchorserialnumber" type="preparedStatement" return="string">
      <Sql>
        SELECT pdc_isbatchorserialnumber(?)
      </Sql>
      <Parameter name="consumptionId"/>
   </SqlMethod>
   <SqlMethod name="isbatchorserialnumber" type="preparedStatement" return="string" connection="true">
      <Sql>
        SELECT pdc_isbatchorserialnumber(?)
      </Sql>
      <Parameter name="consumptionId"/>
   </SqlMethod>
   <SqlMethod name="isserialtracking" type="preparedStatement" return="string">
      <Sql>
        SELECT isserialtracking from m_product where m_product_id=?
      </Sql>
      <Parameter name="productId"/>
   </SqlMethod>
   <SqlMethod name="isbatchtracking" type="preparedStatement" return="string">
      <Sql>
        SELECT isbatchtracking from m_product where m_product_id=?
      </Sql>
      <Parameter name="productId"/>
   </SqlMethod>
   <SqlMethod name="doConsumptionPost" type="preparedStatement" return="string">
      <Sql>
        SELECT  m_internal_consumption_post(?)
      </Sql>
      <Parameter name="consumptionId"/>
   </SqlMethod>
   <SqlMethod name="doConsumptionPost" type="preparedStatement" return="string" connection="true">
      <Sql>
        SELECT  m_internal_consumption_post(?)
      </Sql>
      <Parameter name="consumptionId"/>
   </SqlMethod>
   <SqlMethod name="closeWorkstep" type="preparedStatement"  return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       select zssm_closeworkstep(?,?,?) from dual
      ]]>
    </Sql>
    <Parameter name="projecttaskId"/>
    <Parameter name="userId"/>
    <Parameter name="language"/>
  </SqlMethod>
  <SqlMethod name="closeWorkstep" type="preparedStatement"  return="string" connection="true">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       select zssm_closeworkstep(?,?,?) from dual
      ]]>
    </Sql>
    <Parameter name="projecttaskId"/>
    <Parameter name="userId"/>
    <Parameter name="language"/>
  </SqlMethod>
  <SqlMethod name="isWorkstepClosed" type="preparedStatement"  return="string">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       select iscomplete from c_projecttask where c_projecttask_id=?
      ]]>
    </Sql>
    <Parameter name="projecttaskId"/>
  </SqlMethod>
  <SqlMethod name="deleteAllMaterialLines" type="preparedStatement" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       delete from M_INTERNAL_CONSUMPTIONLINE where M_INTERNAL_CONSUMPTION_ID=?
      ]]>
    </Sql>
    <Parameter name="consumptionId"/>
  </SqlMethod>
  <SqlMethod name="deleteMaterialTransaction" type="preparedStatement" return="rowCount">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       delete from M_INTERNAL_CONSUMPTION where M_INTERNAL_CONSUMPTION_ID=?
      ]]>
    </Sql>
    <Parameter name="consumptionId"/>
  </SqlMethod>
  <SqlMethod name="deleteAllMaterialLines" type="preparedStatement" return="rowCount" connection="true">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       delete from M_INTERNAL_CONSUMPTIONLINE where M_INTERNAL_CONSUMPTION_ID=?
      ]]>
    </Sql>
    <Parameter name="consumptionId"/>
  </SqlMethod>
  <SqlMethod name="deleteMaterialTransaction" type="preparedStatement" return="rowCount" connection="true">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
      <![CDATA[
       delete from M_INTERNAL_CONSUMPTION where M_INTERNAL_CONSUMPTION_ID=?
      ]]>
    </Sql>
    <Parameter name="consumptionId"/>
  </SqlMethod>
  <SqlMethod name="getConsumptionMovementType" type="preparedStatement" return="string">
      <Sql>
        SELECT movementtype from m_internal_consumption where m_internal_consumption_id= ?
        UNION 
        SELECT 'XX' from dual
      </Sql>
      <Parameter name="consumptionId"/>
   </SqlMethod>
   <SqlMethod name="getLocator" type="preparedStatement" return="string">
      <Sql>
        SELECT value from m_locator where m_locator_id= ?
      </Sql>
      <Parameter name="locatorId"/>
   </SqlMethod>
   <SqlMethod name="getSumUp" type="preparedStatement" return="string">
      <Sql>
        SELECT pdc_numfield(sum(movementqty),sum(weight),?)  from (
            select movementqty,weight from m_internal_consumptionline where m_internal_consumption_id= ?
            union all
            select 1,weight  from pdc_tempitems  where m_internal_consumption_id= ?
         ) a
      </Sql>
      <Parameter name="Lang"/>
      <Parameter name="consId"/>
      <Parameter name="consId"/>
   </SqlMethod>
   <SqlMethod name="getProduct" type="preparedStatement" return="string">
      <Sql>
        SELECT  zssi_getproductnamewithvalue(?,?) from dual
      </Sql>
      <Parameter name="productId"/>
      <Parameter name="lang"/>
   </SqlMethod>
   <SqlMethod name="getEmployee" type="preparedStatement" return="string">
      <Sql>
        SELECT  name from ad_user where ad_user_id=?
      </Sql>
      <Parameter name="employeeId"/>
   </SqlMethod>
      <SqlMethod name="getWorkstepFromKombi" type="preparedStatement" return="string">
      <Sql>
      	SELECT a.zssm_workstep_v_id from (
        	SELECT 1 as ln, v.zssm_workstep_v_id from zssm_workstep_v v,m_internal_consumption c where v.iscomplete ='N'  and v.istaskcancelled='N' and v.projectstatus='OR' and v.m_product_id = ?
        	        and c.c_projecttask_id=v.zssm_workstep_v_id and c.processed='Y' and c.plannedserialnumber = ? group by v.zssm_workstep_v_id
        	UNION 
        	SELECT 2 as ln, zssm_workstep_v_id from (
        		SELECT  zssm_workstep_v_id from zssm_workstep_v  where iscomplete ='N'  and istaskcancelled='N' and projectstatus='OR' and m_product_id = ? order by startdate,created limit 1
        	) b    		
        ) a order by ln LIMIT 1
      </Sql>
      <Parameter name="productId"/>
      <Parameter name="serialorBatchNumber"/>
      <Parameter name="productId"/>
   </SqlMethod>
   <SqlMethod name="getWorkstepFromProduct" type="preparedStatement" return="string">
      <Sql>
        SELECT  zssm_workstep_v_id from zssm_workstep_v  where iscomplete ='N'  and istaskcancelled='N' and projectstatus='OR' and m_product_id = ? order by startdate,created limit 1
      </Sql>
      <Parameter name="productId"/>
   </SqlMethod>
   <SqlMethod name="getWorkstepFromProduct4Consumption" type="preparedStatement" return="string">
      <Sql><![CDATA[
        SELECT  zssm_workstep_v_id from zssm_workstep_v  where iscomplete ='N'  and istaskcancelled='N' and projectstatus='OR' and m_product_id = ? 
                and (select count(*) from zspm_projecttaskbom bom where bom.c_projecttask_id=zssm_workstep_v.c_projecttask_id and quantity>qtyreceived)>0 order by startdate,created limit 1
       ]]></Sql>
      <Parameter name="productId"/>
   </SqlMethod>
   <SqlMethod name="getWorkstepFromKombi4Consumption" type="preparedStatement" return="string">
      <Sql><![CDATA[
      	SELECT a.zssm_workstep_v_id from (
        	SELECT  1 as ln,  v.zssm_workstep_v_id from zssm_workstep_v v,m_internal_consumption c where v.iscomplete ='N'  and v.istaskcancelled='N' and v.projectstatus='OR' and v.m_product_id = ?
        	        and c.c_projecttask_id=v.zssm_workstep_v_id and c.processed='Y' and c.plannedserialnumber = ? group by v.zssm_workstep_v_id
        	UNION 
        	SELECT  2 as ln,  zssm_workstep_v_id from (
        		SELECT  zssm_workstep_v_id from zssm_workstep_v  where iscomplete ='N'  and istaskcancelled='N' and projectstatus='OR' and m_product_id = ? 
        		and (select count(*) from zspm_projecttaskbom bom where bom.c_projecttask_id=zssm_workstep_v.c_projecttask_id and quantity>qtyreceived)>0 order by startdate,created limit 1
        	) b        		
        ) a order by ln LIMIT 1
      ]]></Sql>
      <Parameter name="productId"/>
      <Parameter name="serialorBatchNumber"/>
      <Parameter name="productId"/>
   </SqlMethod>
   <SqlMethod name="getProductFromWorkstep" type="preparedStatement" return="string">
      <Sql><![CDATA[
        SELECT  m_product_id as id from zssm_workstep_v  where zssm_workstep_v_id = ? and assembly='Y'
        union
        SELECT  id from (select bom.m_product_id as id from zspm_projecttaskbom bom,zssm_workstep_v w where w.c_projecttask_id=bom.c_projecttask_id and w.zssm_workstep_v_id = ? and w.assembly='N' order by bom.line limit 1) a
      ]]></Sql>
      <Parameter name="workstepId"/>
      <Parameter name="workstepId"/>
   </SqlMethod>
   <SqlMethod name="getProductFromDurchreicheWorkstep" type="preparedStatement" return="string">
      <Sql>
        SELECT  v.m_product_id as id from zssm_workstepbom_v v,c_projecttask t where t.c_projecttask_id=v.zssm_workstep_v_id and t.assembly='N' and v.zssm_workstep_v_id = ? order by line limit 1
      </Sql>
      <Parameter name="workstepId"/>
   </SqlMethod>
   <SqlMethod name="isWorkstepSimplyfied" type="preparedStatement" return="string">
      <Sql>
        select pdc_issimplyfied(?,?) from dual
      </Sql>
      <Parameter name="workstepId"/>
      <Parameter name="consumptionId"/>
   </SqlMethod>
   <SqlMethod name="getQtyLeftFromWorkstep" type="preparedStatement" return="string">
      <Sql>
        SELECT  qtyleft-coalesce((select returnquantity from pdc_PFeedbackUpperGrid(?,null,null) where outtype='PROD' limit 1),0) as qtyleft from zssm_workstep_v  where zssm_workstep_v_id = ? 
      </Sql>
      <Parameter name="workstepId"/>
      <Parameter name="workstepId"/>
   </SqlMethod>
   <SqlMethod name="isSerialOrBatch" type="preparedStatement" return="string">
      <Sql>
        SELECT  case when isserialtracking='Y' or isbatchtracking='Y' then 'Y' else 'N' end from m_product where m_product_id= ? 
      </Sql>
      <Parameter name="productId"/>
   </SqlMethod>
   <SqlMethod name="isSerial" type="preparedStatement" return="string">
      <Sql>
        SELECT  isserialtracking from m_product where m_product_id= ? 
      </Sql>
      <Parameter name="productId"/>
   </SqlMethod>
   <SqlMethod name="isAutologin" type="preparedStatement" return="string">
      <Sql>
        SELECT  case when permsessionid is null then 'N' else 'Y' end as retval from ad_user where ad_user_id = ? 
      </Sql>
      <Parameter name="userId"/>
   </SqlMethod>
   <SqlMethod name="isProducedSerial" type="preparedStatement" return="string">
      <Sql>
        select case when count(*)>0 then 'Y' else 'N' end as retv from  m_internal_consumption where c_projecttask_id=? and processed='Y' and movementtype='P+' and plannedserialnumber=?
      </Sql>
      <Parameter name="workstepId"/>
      <Parameter name="plannedsnr"/>
   </SqlMethod>
   <SqlMethod name="cancelInternalConsumption" type="preparedStatement" return="string">
      <Sql>
        select m_cancelInternal_consumption(?,?) as ret from dual
      </Sql>
      <Parameter name="consumptionId"/>
       <Parameter name="userId"/>
   </SqlMethod>
   <SqlMethod name="getPlannedSerial" type="preparedStatement" return="string">
      <Sql>
        select name from snr_planedserials_v where snr_planedserials_v_id=? 
      </Sql>
      <Parameter name="selectedId"/>
   </SqlMethod>
   <SqlMethod name="getPlannedSerialVIdfromsnr" type="preparedStatement" return="string">
      <Sql>
        select snr_planedserials_v_id from snr_planedserials_v where name=? and c_projecttask_id=? 
      </Sql>
      <Parameter name="snr"/>
      <Parameter name="Workstep"/>
   </SqlMethod>
  </SqlClass>
